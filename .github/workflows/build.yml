---
on: [push]

name: Build

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Install native dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            libasound2-dev \
            libavahi-client-dev \
            xorg-dev \
            libgtk-3-dev \
            libclang-dev \
            libudev-dev \
            libunwind-dev \
            curl \
            lld \
            zip \
            unzip \
            autoconf \
            automake \
            build-essential \
            cmake \
            libass-dev \
            libfreetype6-dev \
            libgnutls28-dev \
            libsdl2-dev \
            libtool \
            libva-dev \
            libvdpau-dev \
            libvorbis-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            pkg-config \
            texinfo \
            wget \
            yasm \
            zlib1g-dev \
            nasm \
            libx264-dev \
            libx265-dev \
            libnuma-dev \
            libvpx-dev \
            libmp3lame-dev \
            libopus-dev

      - uses: taiki-e/install-action@protoc
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - uses: Swatinem/rust-cache@v2
      - name: Build ffmpeg
        run: |
          git clone https://github.com/ffmpeg/ffmpeg --depth 1 --single-branch --branch release/6.0
          cd ffmpeg
          PKG_CONFIG_PATH="${HOME}/ffmpeg_build/lib/pkgconfig" ./configure \
            --disable-decoder=exr,phm \
            --pkg-config-flags="--static" \
            --extra-cflags="-I${HOME}/ffmpeg_build/include" \
            --extra-ldflags="-L${HOME}/ffmpeg_build/lib" \
            --extra-libs="-lpthread -lm" \
            --ld="g++" \
            --prefix=${HOME}/ffmpeg_build
          make -j$(nproc)
          make install
          rm -rf ${HOME}/ffmpeg
          echo "FFMPEG_LIBS_DIR=${HOME}/ffmpeg_build/lib" >> "$GITHUB_ENV"
          echo "FFMPEG_INCLUDE_DIR=${HOME}/ffmpeg_build/include" >> "$GITHUB_ENV"
          echo "FFMPEG_PKG_CONFIG_PATH=${HOME}/ffmpeg_build/lib/pkgconfig" >> "$GITHUB_ENV"

      - name: Build Headless
        run: make build-headless
      - uses: actions/upload-artifact@v3
        with:
          name: linux-headless
          path: target/release/mizer
          if-no-files-found: error
      - name: Build
        run: make build-release
      - name: Package
        run: make mizer.zip
      - uses: actions/upload-artifact@v3
        with:
          name: linux-full
          path: mizer.zip
          if-no-files-found: error

  bundle-flatpak:
    runs-on: ubuntu-latest
    needs:
      - build-linux
    steps:
      - name: Install flatpak
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Fetch artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-full
      - name: Bundle
        run: make mizer.flatpak
      - uses: actions/upload-artifact@v3
        with:
          name: Flatpak
          path: mizer.flatpak
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Install build dependencies
        run: brew install protobuf gstreamer gst-plugins-base gst-plugins-bad
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Build
        run: make build-release
        continue-on-error: true
      - name: Package
        run: make artifact
        continue-on-error: true
      - uses: actions/upload-artifact@v3
        with:
          name: macos-full
          path: artifact

  build-windows:
    if: false
    runs-on: windows-latest
    steps:
      - name: Install build dependencies
        run: choco install protoc make wget
        shell: bash
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Get flutter deps
        run: flutter pub get
        working-directory: ui
      - name: Build
        run: make build
      - uses: actions/upload-artifact@v3
        with:
          name: windows-full
          path: |
            target/debug/
            !target/debug/deps/**
            !target/debug/build/**
            !target/debug/incremental/**
            !target/debug/examples/**
            !target/debug/libmizer*
            !target/debug/.fingerprint/**
            components/fixtures/open-fixture-library/.fixtures
          if-no-files-found: error

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/maxjoehnk/node-based-mizer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
