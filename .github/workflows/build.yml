on: [push]

name: Build

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install native dependencies
        run: sudo apt-get update && sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev libasound2-dev libavahi-client-dev xorg-dev libgtk-3-dev curl libclang-dev libudev-dev
      - name: Install Protoc 3.17.3
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protoc-3.17.3-linux-x86_64.zip
          unzip protoc-3.17.3-linux-x86_64.zip
          mkdir -p $HOME/.local/bin
          cp bin/protoc $HOME/.local/bin/
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v1
        with:
          channel: dev
      - name: Build Headless
        run: make build-headless
      - uses: actions/upload-artifact@v2
        with:
          name: linux-headless
          path: target/release/mizer
          if-no-files-found: error
      - name: Build
        run: make build-release
      - name: Package
        run: make package
      - uses: actions/upload-artifact@v2
        with:
          name: linux-full
          path: artifact
          if-no-files-found: error
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Install build dependencies
        run: brew install protobuf gstreamer gst-plugins-base gst-plugins-bad
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v1
        with:
          channel: dev
      - name: Build
        run: make build-release
      - name: Package
        run: make package
      - uses: actions/upload-artifact@v2
        with:
          name: macos-full
          path: artifact
          if-no-files-found: error

  build-windows:
    if: false
    runs-on: windows-latest
    needs: gvsbuild
    steps:
      - name: Install build dependencies
        run: choco install protoc make wget
      - name: Create GTK binaries dir
        run: mkdir C:\gtk-build\gtk\x64\release

      - name: Get GTK binaries from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: ${{needs.gvsbuild.outputs.cachekey}}
      - name: Set up env
        run: |
          echo "PKG_CONFIG=C:\gtk-build\gtk\x64\release\bin\pkgconf.exe" >> $GITHUB_ENV
          echo "C:\gtk-build\gtk\x64\release\bin" >> $GITHUB_PATH
        shell: bash
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v1
        with:
          channel: dev
      - name: Get flutter deps
        run: flutter pub get
        working-directory: ui
      - name: Build
        run: make build
      - uses: actions/upload-artifact@v2
        with:
          name: windows-full
          path: |
            target/debug/
            !target/debug/deps/**
            !target/debug/build/**
            !target/debug/incremental/**
            !target/debug/examples/**
            !target/debug/libmizer*
            !target/debug/.fingerprint/**
            components/fixtures/open-fixture-library/.fixtures
          if-no-files-found: error
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install native dependencies
        run: sudo apt-get update && sudo apt-get install libclang-dev
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install cbindgen binary crate
        uses: actions-rs/install@v0.1
        with:
          crate: cbindgen
          version: latest
          use-tool-cache: true
      - uses: subosito/flutter-action@v1
        with:
          channel: master
      - name: Generate FFI bindings
        run: make generate_bindings
        working-directory: ui
      - name: Generate protobuf code
        run: make proto
        working-directory: ui
      - run: flutter build apk
        working-directory: ui
      - uses: actions/upload-artifact@v2
        with:
          name: android-client
          path: ui/build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error

  # Gtk & glib dependencies for windows
  gvsbuild:
    if: false
    name: build GTK binaries with gvsbuild
    runs-on: windows-latest

    env:
      # git revision of gvsbuild we use for to build GTK and the other dependencies
      gvsbuildref: ed2136815a33e33e3ff15e05576416aca704cefc

      # bump this number if you want to force a rebuild of gvsbuild with the same revision
      gvsbuildupdate: 1

    outputs:
      cachekey: ${{ steps.output.outputs.cachekey }}

    steps:
      # this is needed for the cache restore to work
      - name: create dir
        run: mkdir C:\gtk-build\gtk\x64\release

      - name: get from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}

      - name: checkout gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: wingtk/gvsbuild
          ref: ${{ env.gvsbuildref }}
          path: gvsbuild

      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: move git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
        shell: cmd

      - name: run gvsbuild
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: gvsbuild
        run: python .\build.py build -p=x64 --vs-ver=16 --msys-dir=C:\msys64 gtk3 graphene gstreamer gst-plugins-base gst-plugins-bad

      - name: restore git binary
        if: steps.cache.outputs.cache-hit != 'true'
        run: move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
        shell: cmd

      - name: output cache key
        id: output
        run: echo "::set-output name=cachekey::gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}"
