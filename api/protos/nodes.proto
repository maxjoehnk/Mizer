syntax = "proto3";

package mizer.nodes;

service NodesApi {
  rpc GetNodes (NodesRequest) returns (Nodes) {}
  rpc AddNode (AddNodeRequest) returns (Node) {}
  rpc AddLink (NodeConnection) returns (NodeConnection) {}
  rpc WriteControlValue (WriteControl) returns (WriteResponse) {}
  rpc UpdateNodeProperty (UpdateNodeConfigRequest) returns (UpdateNodeConfigResponse) {}
  rpc MoveNode (MoveNodeRequest) returns (MoveNodeResponse) {}
  rpc DeleteNode (DeleteNodeRequest) returns (DeleteNodeResponse) {}
  rpc HideNode (HideNodeRequest) returns (HideNodeResponse) {}
  rpc ShowNode (ShowNodeRequest) returns (ShowNodeResponse) {}
  rpc DuplicateNode (DuplicateNodeRequest) returns (Node) {}
  rpc RenameNode (RenameNodeRequest) returns (RenameNodeResponse) {}
  rpc GroupNodes (GroupNodesRequest) returns (GroupNodesResponse) {}
}

message AddNodeRequest {
  Node.NodeType type = 1;
  NodePosition position = 2;
  optional string parent = 3;
}

message DuplicateNodeRequest {
  string path = 1;
  optional string parent = 2;
}

message NodesRequest {}

message WriteControl {
  string path = 1;
  string port = 2;
  double value = 3;
}

message WriteResponse {}

message UpdateNodeConfigRequest {
  string path = 1;
  NodeConfig config = 2;
}

message UpdateNodeConfigResponse {}

message MoveNodeRequest {
  string path = 1;
  NodePosition position = 2;
}

message MoveNodeResponse {}

message ShowNodeRequest {
  string path = 1;
  NodePosition position = 2;
  optional string parent = 3;
}

message ShowNodeResponse {}

message RenameNodeRequest {
  string path = 1;
  string new_name = 2;
}

message RenameNodeResponse {}

message GroupNodesRequest {
  repeated string nodes = 1;
  optional string parent = 2;
}

message GroupNodesResponse {}

message DeleteNodeRequest {
  string path = 1;
}

message DeleteNodeResponse {}

message HideNodeRequest {
  string path = 1;
}

message HideNodeResponse {}

message Nodes {
  repeated Node nodes = 1;
  repeated NodeConnection channels = 2;
  // Flat list of all nodes
  repeated Node all_nodes = 3;
}

message NodeConnection {
  string targetNode = 1;
  Port targetPort = 2;
  string sourceNode = 3;
  Port sourcePort = 4;
  ChannelProtocol protocol = 5;
}

message Node {
  enum NodeType {
    Fader = 0;
    Button = 1;
    Oscillator = 2;
    Clock = 3;
    Script = 4;
    Envelope = 5;
    Sequence = 6;
    Select = 7;
    Merge = 8;
    Threshold = 9;
//    DmxInput = 10;
    DmxOutput = 10;
    OscInput = 11;
    OscOutput = 12;
    MidiInput = 13;
    MidiOutput = 14;
    Sequencer = 15;
    Fixture = 16;
    Programmer = 17;
    Group = 18;
    Preset = 19;
    VideoFile = 20;
    VideoOutput = 21;
    VideoEffect = 22;
    VideoColorBalance = 23;
    VideoTransform = 24;
    PixelToDmx = 30;
    PixelPattern = 31;
    OpcOutput = 32;
    Laser = 40;
    IldaFile = 41;
    Gamepad = 45;
    ColorRgb = 50;
    ColorHsv = 51;
    Container = 100;
    Encoder = 55;
    Math = 56;
    DataToNumber = 57;
    NumberToData = 58;
    Value = 59;
    MqttInput = 60;
    MqttOutput = 61;
    PlanScreen = 62;
    Delay = 63;
    Ramp = 64;
    Noise = 65;
    Label = 66;
    Transport = 67;
    G13Input = 68;
    G13Output = 69;
    ConstantNumber = 70;
    Conditional = 71;
  }

  enum NodePreviewType {
    History = 0;
    Waveform = 1;
    Multiple = 2;
    Texture = 3;
    None = 4;
  }

  NodeType type = 1;
  string path = 2;
  repeated Port inputs = 3;
  repeated Port outputs = 4;
  NodeDesigner designer = 5;
  NodePreviewType preview = 6;
  NodeConfig config = 7;
}

message NodeConfig {
  oneof type {
    OscillatorNodeConfig oscillatorConfig = 10;
    ScriptingNodeConfig scriptingConfig = 11;
    SequenceNodeConfig sequenceConfig = 12;
    ClockNodeConfig clockConfig = 13;
    FixtureNodeConfig fixtureConfig = 14;
    ButtonNodeConfig buttonConfig = 15;
    FaderNodeConfig faderConfig = 16;
    IldaFileNodeConfig ildaFileConfig = 17;
    LaserNodeConfig laserConfig = 18;
    PixelPatternNodeConfig pixelPatternConfig = 19;
    PixelDmxNodeConfig pixelDmxConfig = 20;
    DmxOutputNodeConfig dmxOutputConfig = 21;
    MidiNodeConfig midiInputConfig = 22;
    MidiNodeConfig midiOutputConfig = 23;
    OpcOutputNodeConfig opcOutputConfig = 24;
    OscNodeConfig oscInputConfig = 25;
    OscNodeConfig oscOutputConfig = 26;
    VideoColorBalanceNodeConfig videoColorBalanceConfig = 27;
    VideoEffectNodeConfig videoEffectConfig = 28;
    VideoFileNodeConfig videoFileConfig = 29;
    VideoOutputNodeConfig videoOutputConfig = 30;
    VideoTransformNodeConfig videoTransformConfig = 31;
    SelectNodeConfig selectConfig = 32;
    MergeNodeConfig mergeConfig = 33;
    EnvelopeNodeConfig envelopeConfig = 34;
    SequencerNodeConfig sequencerConfig = 35;
    ProgrammerNodeConfig programmerConfig = 36;
    GroupNodeConfig groupConfig = 37;
    PresetNodeConfig presetConfig = 38;
    ColorRgbNodeConfig colorRgbConfig = 40;
    ColorHsvNodeConfig colorHsvConfig = 41;
    GamepadNodeConfig gamepadNodeConfig = 42;
    ThresholdNodeConfig thresholdConfig = 43;
    EncoderNodeConfig encoderConfig = 44;
    ContainerNodeConfig containerConfig = 45;
    MathNodeConfig mathConfig = 46;
    MqttInputNodeConfig mqttInputConfig = 47;
    MqttOutputNodeConfig mqttOutputConfig = 48;
    NumberToDataNodeConfig numberToDataConfig = 49;
    DataToNumberNodeConfig dataToNumberConfig = 50;
    ValueNodeConfig valueConfig = 51;
    PlanScreenNodeConfig planScreenConfig = 52;
    DelayNodeConfig delayConfig = 53;
    RampNodeConfig rampConfig = 54;
    NoiseNodeConfig noiseConfig = 55;
    LabelNodeConfig labelConfig = 56;
    TransportNodeConfig transportConfig = 57;
    G13InputNodeConfig g13InputConfig = 58;
    G13OutputNodeConfig g13OutputConfig = 59;
    ConstantNumberNodeConfig constantNumberConfig = 60;
    ConditionalNodeConfig conditionalConfig = 61;
  }
}

message OscillatorNodeConfig {
  enum OscillatorType {
    Square = 0;
    Sine = 1;
    Saw = 2;
    Triangle = 3;
  }
  OscillatorType type = 1;
  double ratio = 2;
  double max = 3;
  double min = 4;
  double offset = 5;
  bool reverse = 6;
}

message ScriptingNodeConfig {
  string script = 1;
}

message SequenceNodeConfig {
  repeated SequenceStep steps = 1;

  message SequenceStep {
    double tick = 1;
    double value = 2;
    bool hold = 3;
  }
}

message ProgrammerNodeConfig {}
message GroupNodeConfig {}
message PresetNodeConfig {}

message EnvelopeNodeConfig {
  double attack = 1;
  double decay = 2;
  double sustain = 3;
  double release = 4;
}

message ClockNodeConfig {
  double speed = 1;
}

message FixtureNodeConfig {
  uint32 fixture_id = 1;
}

message SequencerNodeConfig {
  uint32 sequence_id = 1;
}

message ButtonNodeConfig {
  bool toggle = 1;
}
message FaderNodeConfig {}

message IldaFileNodeConfig {
  string file = 1;
}

message LaserNodeConfig {
  string device_id = 1;
}

message GamepadNodeConfig {
  string device_id = 1;
  Control control = 2;

  enum Control {
      LeftStickX = 0;
      LeftStickY = 1;
      RightStickX = 2;
      RightStickY = 3;
      LeftTrigger = 4;
      RightTrigger = 5;
      LeftShoulder = 6;
      RightShoulder = 7;
      South = 8;
      East = 9;
      North = 10;
      West = 11;
      Select = 12;
      Start = 13;
      DpadUp = 14;
      DpadDown = 15;
      DpadLeft = 16;
      DpadRight = 17;
      LeftStick = 18;
      RightStick = 19;
  }
}

message PixelPatternNodeConfig {
  enum Pattern {
    RgbIterate = 0;
    RgbSnake = 1;
  }

  Pattern pattern = 1;
}

message PixelDmxNodeConfig {
  uint64 width = 1;
  uint64 height = 2;
  uint32 start_universe = 3;
  string output = 4;
}

message DmxOutputNodeConfig {
  optional string output = 1;
  uint32 universe = 2;
  uint32 channel = 3;
}

message MidiNodeConfig {
  string device = 1;
  oneof binding {
    NoteBinding noteBinding = 2;
    ControlBinding controlBinding = 3;
  }

  message NoteBinding {
    uint32 channel = 1;
    MidiType type = 2;
    uint32 port = 3;
    uint32 rangeFrom = 4;
    uint32 rangeTo = 5;

    enum MidiType {
      CC = 0;
      Note = 1;
    }
  }

  message ControlBinding {
    string page = 1;
    string control = 2;
  }
}

message OpcOutputNodeConfig {
  string host = 1;
  uint32 port = 2;
  uint64 width = 3;
  uint64 height = 4;
}

message OscNodeConfig {
  string connection = 1;
  string path = 2;
  ArgumentType argumentType = 3;
  bool onlyEmitChanges = 4;

  enum ArgumentType {
    Int = 0;
    Float = 1;
    Long = 2;
    Double = 3;
    Bool = 4;
    Color = 5;
  }
}


message VideoColorBalanceNodeConfig {}
message VideoEffectNodeConfig {}
message VideoFileNodeConfig {
  string file = 1;
}
message VideoOutputNodeConfig {}
message VideoTransformNodeConfig {}

message SelectNodeConfig {}
message MergeNodeConfig {
  MergeMode mode = 1;

  enum MergeMode {
    Latest = 0;
    Highest = 1;
    Lowest = 2;
  }
}
message ThresholdNodeConfig {
  double lower_threshold = 1;
  double upper_threshold = 2;
  double active_value = 3;
  double inactive_value = 4;
}

message EncoderNodeConfig {
  double hold_rate = 1;
}

message ColorRgbNodeConfig {}
message ColorHsvNodeConfig {}

message ContainerNodeConfig {
  repeated Node nodes = 1;
}

message MathNodeConfig {
  Mode mode = 1;

  enum Mode {
    Addition = 0;
    Subtraction = 1;
    Multiplication = 2;
    Division = 3;
    Invert = 4;
    Sine = 5;
    Cosine = 6;
    Tangent = 7;
  }
}

message MqttInputNodeConfig {
  string connection = 1;
  string path = 2;
}

message MqttOutputNodeConfig {
  string connection = 1;
  string path = 2;
}

message NumberToDataNodeConfig {}
message DataToNumberNodeConfig {}

message ValueNodeConfig {
  string value = 1;
}

message PlanScreenNodeConfig {
  string plan_id = 1;
  uint32 screen_id = 2;
}

message DelayNodeConfig {
  uint32 buffer_size = 1;
}

message RampNodeConfig {
  repeated RampStep steps = 1;

  message RampStep {
    double x = 1;
    double y = 2;
    double c0a = 3;
    double c0b = 4;
    double c1a = 5;
    double c1b = 6;
  }
}

message NoiseNodeConfig {
  uint64 tick_rate = 1;
  bool fade = 2;
}

message LabelNodeConfig {
  string text = 1;
}

message TransportNodeConfig {
}

message G13InputNodeConfig {
  string device_id = 1;
  Key key = 2;

  enum Key {
      G1 = 0;
      G2 = 1;
      G3 = 2;
      G4 = 3;
      G5 = 4;
      G6 = 5;
      G7 = 6;
      G8 = 7;
      G9 = 8;
      G10 = 9;
      G11 = 10;
      G12 = 11;
      G13 = 12;
      G14 = 13;
      G15 = 14;
      G16 = 15;
      G17 = 16;
      G18 = 17;
      G19 = 18;
      G20 = 19;
      G21 = 20;
      G22 = 21;
      M1 = 22;
      M2 = 23;
      M3 = 24;
      MR = 25;
      L1 = 26;
      L2 = 27;
      L3 = 28;
      L4 = 29;
      JoystickX = 30;
      JoystickY = 31;
      Joystick = 32;
      Left = 33;
      Down = 34;
      BD = 35;
  }
}

message G13OutputNodeConfig {
  string device_id = 1;
}

message ConstantNumberNodeConfig {
  double value = 1;
}

message ConditionalNodeConfig {
  double threshold = 1;
}

message NodePosition {
  double x = 1;
  double y = 2;
}

message NodeDesigner {
  NodePosition position = 1;
  double scale = 2;
  bool hidden = 3;
}

enum ChannelProtocol {
    SINGLE = 0;
    MULTI = 1;
    COLOR = 9;
    TEXTURE = 2;
    VECTOR = 3;
    LASER = 4;
    POLY = 5;
    DATA = 6;
    MATERIAL = 7;
    GST = 8;
}

message Port {
  string name = 1;
  ChannelProtocol protocol = 2;
  bool multiple = 3;
}
