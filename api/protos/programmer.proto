syntax = "proto3";

package mizer.programmer;

import "fixtures.proto";

service ProgrammerApi {
  rpc SubscribeToProgrammer (SubscribeProgrammerRequest) returns (stream ProgrammerState) {}
  rpc WriteControl (WriteControlRequest) returns (WriteControlResponse) {}
  rpc SelectFixtures (SelectFixturesRequest) returns (SelectFixturesResponse) {}
  rpc UnselectFixtures (UnselectFixturesRequest) returns (UnselectFixturesResponse) {}
  rpc Clear (ClearRequest) returns (ClearResponse) {}
  rpc Highlight (HighlightRequest) returns (HighlightResponse) {}
  rpc Store (StoreRequest) returns (StoreResponse) {}
  rpc GetPresets (PresetsRequest) returns (Presets) {}
  rpc CallPreset (PresetId) returns (CallPresetResponse) {}
  rpc GetGroups (GroupsRequest) returns (Groups) {}
  rpc SelectGroup (SelectGroupRequest) returns (SelectGroupResponse) {}
  rpc AddGroup (AddGroupRequest) returns (Group) {}
  rpc AssignFixturesToGroup (AssignFixturesToGroupRequest) returns (AssignFixturesToGroupResponse) {}
  rpc AssignFixtureSelectionToGroup (AssignFixtureSelectionToGroupRequest) returns (AssignFixturesToGroupResponse) {}
}

message SubscribeProgrammerRequest {}

message ProgrammerState {
  repeated mizer.fixtures.FixtureId fixtures = 1;
  repeated mizer.fixtures.FixtureId active_fixtures = 2;
  FixtureSelection selection = 3;
  repeated ProgrammerChannel controls = 4;
  bool highlight = 5;
  uint32 block_size = 6;
  uint32 groups = 7;
  uint32 wings = 8;
}

message FixtureSelection {
  repeated GroupedFixtureList fixtures = 1;

  message GroupedFixtureList {
    repeated mizer.fixtures.FixtureId fixtures = 1;
  }
}

message ProgrammerChannel {
  repeated mizer.fixtures.FixtureId fixtures = 1;
  mizer.fixtures.FixtureControl control = 2;
  oneof value {
    double fader = 3;
    mizer.fixtures.ColorMixerChannel color = 4;
    GenericValue generic = 5;
  }

  enum ColorChannel {
    Red = 0;
    Green = 1;
    Blue = 2;
  }

  message GenericValue {
    string name = 1;
    double value = 2;
  }
}

message WriteControlRequest {
  mizer.fixtures.FixtureControl control = 1;
  oneof value {
    double fader = 2;
    mizer.fixtures.ColorMixerChannel color = 3;
    GenericValue generic = 4;
  }

  message GenericValue {
    string name = 1;
    double value = 2;
  }
}

message WriteControlResponse {}

message SelectFixturesRequest {
  repeated mizer.fixtures.FixtureId fixtures = 1;
}

message SelectFixturesResponse {}

message UnselectFixturesRequest {
  repeated mizer.fixtures.FixtureId fixtures = 1;
}

message UnselectFixturesResponse {}

message ClearRequest {}
message ClearResponse {}

message HighlightRequest {
  bool highlight = 1;
}

message HighlightResponse {}

message StoreRequest {
  uint32 sequence_id = 1;
  Mode store_mode = 2;
  optional uint32 cue_id = 3;

  enum Mode {
    Overwrite = 0;
    Merge = 1;
    AddCue = 2;
  }
}
message StoreResponse {}

message PresetsRequest {}

message PresetId {
  uint32 id = 1;
  PresetType type = 2;

  enum PresetType {
    Intensity = 0;
    Shutter = 1;
    Color = 2;
    Position = 3;
  }
}

message Presets {
  repeated Preset intensities = 1;
  repeated Preset shutter = 2;
  repeated Preset color = 3;
  repeated Preset position = 4;
}

message Preset {
  PresetId id = 1;
  optional string label = 2;
  oneof value {
    double fader = 3;
    Color color = 4;
    Position position = 5;
  }

  message Color {
    double red = 1;
    double green = 2;
    double blue = 3;
  }

  message Position {
    double tilt = 1;
    double pan = 2;
  }
}

message CallPresetResponse {
}

message GroupsRequest {}
message Groups {
  repeated Group groups = 1;
}

message Group {
  uint32 id = 1;
  string name = 2;
}

message SelectGroupRequest {
  uint32 id = 1;
}

message SelectGroupResponse {}

message AddGroupRequest {
  string name = 1;
}

message AssignFixturesToGroupRequest {
  uint32 id = 1;
  repeated mizer.fixtures.FixtureId fixtures = 2;
}

message AssignFixtureSelectionToGroupRequest {
  uint32 id = 1;
}

message AssignFixturesToGroupResponse {}
