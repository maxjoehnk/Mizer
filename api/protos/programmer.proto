syntax = "proto3";

package mizer.programmer;

import "fixtures.proto";

service ProgrammerApi {
  rpc SubscribeToProgrammer (SubscribeProgrammerRequest) returns (stream ProgrammerState) {}
  rpc WriteControl (WriteControlRequest) returns (WriteControlResponse) {}
  rpc SelectFixtures (SelectFixturesRequest) returns (SelectFixturesResponse) {}
  rpc UnselectFixtures (UnselectFixturesRequest) returns (UnselectFixturesResponse) {}
  rpc Clear (ClearRequest) returns (ClearResponse) {}
  rpc Highlight (HighlightRequest) returns (HighlightResponse) {}
  rpc Store (StoreRequest) returns (StoreResponse) {}
  rpc GetPresets (PresetsRequest) returns (Presets) {}
  rpc CallPreset (PresetId) returns (CallPresetResponse) {}
  rpc GetGroups (GroupsRequest) returns (Groups) {}
  rpc SelectGroup (SelectGroupRequest) returns (SelectGroupResponse) {}
  rpc AddGroup (AddGroupRequest) returns (Group) {}
  rpc AssignFixturesToGroup (AssignFixturesToGroupRequest) returns (AssignFixturesToGroupResponse) {}
  rpc AssignFixtureSelectionToGroup (AssignFixtureSelectionToGroupRequest) returns (AssignFixturesToGroupResponse) {}
  rpc WriteEffectRate (WriteEffectRateRequest) returns (WriteEffectRateResponse) {}
  rpc WriteEffectOffset (WriteEffectOffsetRequest) returns (WriteEffectOffsetResponse) {}
}

message SubscribeProgrammerRequest {
}

message ProgrammerState {
  repeated mizer.fixtures.FixtureId fixtures = 1;
  repeated mizer.fixtures.FixtureId active_fixtures = 2;
  repeated uint32 active_groups = 3;
  FixtureSelection selection = 4;
  repeated ProgrammerChannel controls = 5;
  bool highlight = 6;
  uint32 block_size = 7;
  uint32 groups = 8;
  uint32 wings = 9;
  repeated EffectProgrammerState effects = 10;
}

message FixtureSelection {
  repeated GroupedFixtureList fixtures = 1;

  message GroupedFixtureList {
    repeated mizer.fixtures.FixtureId fixtures = 1;
  }
}

message ProgrammerChannel {
  repeated mizer.fixtures.FixtureId fixtures = 1;
  mizer.fixtures.FixtureControl control = 2;
  oneof value {
    double fader = 3;
    mizer.fixtures.ColorMixerChannel color = 4;
    GenericValue generic = 5;
  }

  enum ColorChannel {
    RED = 0;
    GREEN = 1;
    BLUE = 2;
  }

  message GenericValue {
    string name = 1;
    double value = 2;
  }
}

message EffectProgrammerState {
  uint32 effect_id = 1;
  double effect_rate = 2;
  optional double effect_offset = 3;
}

message WriteEffectRateRequest {
  uint32 effect_id = 1;
  double effect_rate = 2;
}

message WriteEffectRateResponse {
}

message WriteEffectOffsetRequest {
  uint32 effect_id = 1;
  optional double effect_offset = 2;
}

message WriteEffectOffsetResponse {
}

message WriteControlRequest {
  mizer.fixtures.FixtureControl control = 1;
  oneof value {
    double fader = 2;
    mizer.fixtures.ColorMixerChannel color = 3;
    GenericValue generic = 4;
  }

  message GenericValue {
    string name = 1;
    double value = 2;
  }
}

message WriteControlResponse {
}

message SelectFixturesRequest {
  repeated mizer.fixtures.FixtureId fixtures = 1;
}

message SelectFixturesResponse {
}

message UnselectFixturesRequest {
  repeated mizer.fixtures.FixtureId fixtures = 1;
}

message UnselectFixturesResponse {
}

message ClearRequest {
}
message ClearResponse {
}

message HighlightRequest {
  bool highlight = 1;
}

message HighlightResponse {
}

message StoreRequest {
  uint32 sequence_id = 1;
  Mode store_mode = 2;
  optional uint32 cue_id = 3;

  enum Mode {
    OVERWRITE = 0;
    MERGE = 1;
    ADD_CUE = 2;
  }
}
message StoreResponse {
}

message PresetsRequest {
}

message PresetId {
  uint32 id = 1;
  PresetType type = 2;

  enum PresetType {
    INTENSITY = 0;
    SHUTTER = 1;
    COLOR = 2;
    POSITION = 3;
  }
}

message Presets {
  repeated Preset intensities = 1;
  repeated Preset shutters = 2;
  repeated Preset colors = 3;
  repeated Preset positions = 4;
}

message Preset {
  PresetId id = 1;
  optional string label = 2;
  oneof value {
    double fader = 3;
    Color color = 4;
    Position position = 5;
  }

  message Color {
    double red = 1;
    double green = 2;
    double blue = 3;
  }

  message Position {
    double tilt = 1;
    double pan = 2;
  }
}

message CallPresetResponse {
}

message GroupsRequest {
}
message Groups {
  repeated Group groups = 1;
}

message Group {
  uint32 id = 1;
  string name = 2;
}

message SelectGroupRequest {
  uint32 id = 1;
}

message SelectGroupResponse {
}

message AddGroupRequest {
  string name = 1;
}

message AssignFixturesToGroupRequest {
  uint32 id = 1;
  repeated mizer.fixtures.FixtureId fixtures = 2;
}

message AssignFixtureSelectionToGroupRequest {
  uint32 id = 1;
}

message AssignFixturesToGroupResponse {
}
