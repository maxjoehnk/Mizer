syntax = "proto3";

package mizer.sequencer;

import "fixtures.proto";

service SequencerApi {
  rpc GetSequences (GetSequencesRequest) returns (Sequences) {}
  rpc GetSequence (GetSequenceRequest) returns (Sequence) {}
  rpc AddSequence (AddSequenceRequest) returns (Sequence) {}
  rpc DeleteSequence (DeleteSequenceRequest) returns (Sequences) {}
  rpc SequenceGo (SequenceGoRequest) returns (EmptyResponse) {}
  rpc SequenceStop (SequenceStopRequest) returns (EmptyResponse) {}
  rpc UpdateCueTrigger (CueTriggerRequest) returns (Sequences) {}
  rpc UpdateCueTriggerTime (CueTriggerTimeRequest) returns (Sequences) {}
  rpc UpdateCueEffectOffsetTime (CueEffectOffsetTimeRequest) returns (Sequences) {}
  rpc UpdateCueName (CueNameRequest) returns (Sequences) {}
  rpc UpdateCueValue (CueValueRequest) returns (Sequences) {}
  rpc UpdateCueFadeTime (CueTimingRequest) returns (Sequences) {}
  rpc UpdateCueDelayTime (CueTimingRequest) returns (Sequences) {}
  rpc UpdateSequenceWrapAround (SequenceWrapAroundRequest) returns (Sequences) {}
  rpc UpdateSequenceStopOnLastCue (SequenceStopOnLastCueRequest) returns (Sequences) {}
  rpc UpdateSequenceName (CueNameRequest) returns (Sequences) {}
}

message GetSequencesRequest {
}

message GetSequenceRequest {
  uint32 sequence = 1;
}

message AddSequenceRequest {
}

message DeleteSequenceRequest {
  uint32 sequence = 1;
}

message SequenceGoRequest {
  uint32 sequence = 1;
}

message SequenceStopRequest {
  uint32 sequence = 1;
}

message CueTriggerRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  CueTrigger.Type trigger = 3;
}

message CueTriggerTimeRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  CueTime time = 3;
}

message CueEffectOffsetTimeRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  uint32 effect = 3;
  optional double time = 4;
}

message CueNameRequest {
  uint32 sequence = 1;
  uint32 cue = 2;
  string name = 3;
}

message CueValueRequest {
  uint32 sequence_id = 1;
  uint32 cue_id = 2;
  uint32 control_index = 3;
  CueValue value = 4;
}

message CueTimingRequest {
  uint32 sequence_id = 1;
  uint32 cue_id = 2;
  CueTimer time = 3;
}

message SequenceWrapAroundRequest {
  uint32 sequence = 1;
  bool wrap_around = 2;
}

message SequenceStopOnLastCueRequest {
  uint32 sequence = 1;
  bool stop_on_last_cue = 2;
}

message SequenceNameRequest {
  uint32 sequence = 1;
  string name = 2;
}

message EmptyResponse {
}

message Sequences {
  repeated Sequence sequences = 1;
}

message Sequence {
  uint32 id = 1;
  string name = 2;
  repeated Cue cues = 3;
  repeated mizer.fixtures.FixtureId fixtures = 4;
  bool wrap_around = 5;
  bool stop_on_last_cue = 6;
}

message Cue {
  uint32 id = 1;
  string name = 2;
  CueTrigger trigger = 3;
  repeated CueControl controls = 4;
  CueTimings cue_timings = 5;
  CueTimings dimmer_timings = 6;
  CueTimings position_timings = 7;
  CueTimings color_timings = 8;
  repeated CueEffect effects = 9;
}

message CueEffect {
  uint32 effect_id = 1;
  repeated mizer.fixtures.FixtureId fixtures = 2;
  optional double effect_offsets = 3;
  optional double effect_rate = 4;
}

message CueTimings {
  CueTimer fade = 8;
  CueTimer delay = 9;
}

message CueTrigger {
  Type type = 1;
  optional CueTime time = 2;

  enum Type {
    GO = 0;
    FOLLOW = 1;
    TIME = 2;
    BEATS = 3;
    TIMECODE = 4;
  }

}

message CueControl {
  Type type = 1;
  CueValue value = 2;
  repeated mizer.fixtures.FixtureId fixtures = 3;

  enum Type {
    INTENSITY = 0;
    SHUTTER = 1;
    COLOR_RED = 2;
    COLOR_GREEN = 3;
    COLOR_BLUE = 4;
    COLOR_WHEEL = 5;
    PAN = 6;
    TILT = 7;
    FOCUS = 8;
    ZOOM = 9;
    PRISM = 10;
    IRIS = 11;
    FROST = 12;
    GOBO = 13;
    GENERIC = 14;
  }
}


message CueValue {
  oneof value {
    double direct = 3;
    CueValueRange range = 4;
  }
}

message CueTimer {
  bool has_timer = 1;
  oneof timer {
    CueTime direct = 2;
    CueTimerRange range = 3;
  }
}

message CueValueRange {
  double from = 1;
  double to = 2;
}

message CueTime {
  oneof time {
    double seconds = 1;
    double beats = 2;
  }
}

message CueTimerRange {
  CueTime from = 1;
  CueTime to = 2;
}
