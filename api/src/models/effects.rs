// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `effects.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GetEffectsRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetEffectsRequest {
    fn default() -> &'a GetEffectsRequest {
        <GetEffectsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetEffectsRequest {
    pub fn new() -> GetEffectsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetEffectsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetEffectsRequest {
        GetEffectsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetEffectsRequest>(
                "GetEffectsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetEffectsRequest {
        static instance: ::protobuf::rt::LazyV2<GetEffectsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetEffectsRequest::new)
    }
}

impl ::protobuf::Clear for GetEffectsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetEffectsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEffectsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddEffectRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddEffectRequest {
    fn default() -> &'a AddEffectRequest {
        <AddEffectRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddEffectRequest {
    pub fn new() -> AddEffectRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AddEffectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddEffectRequest {
        AddEffectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AddEffectRequest| { &m.name },
                |m: &mut AddEffectRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddEffectRequest>(
                "AddEffectRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddEffectRequest {
        static instance: ::protobuf::rt::LazyV2<AddEffectRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddEffectRequest::new)
    }
}

impl ::protobuf::Clear for AddEffectRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddEffectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddEffectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UpdateEffectStepRequest {
    // message fields
    pub effect_id: u32,
    pub channel_index: u32,
    pub step_index: u32,
    pub step: ::protobuf::SingularPtrField<EffectStep>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateEffectStepRequest {
    fn default() -> &'a UpdateEffectStepRequest {
        <UpdateEffectStepRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateEffectStepRequest {
    pub fn new() -> UpdateEffectStepRequest {
        ::std::default::Default::default()
    }

    // uint32 effect_id = 1;


    pub fn get_effect_id(&self) -> u32 {
        self.effect_id
    }
    pub fn clear_effect_id(&mut self) {
        self.effect_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = v;
    }

    // uint32 channel_index = 2;


    pub fn get_channel_index(&self) -> u32 {
        self.channel_index
    }
    pub fn clear_channel_index(&mut self) {
        self.channel_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_index(&mut self, v: u32) {
        self.channel_index = v;
    }

    // uint32 step_index = 3;


    pub fn get_step_index(&self) -> u32 {
        self.step_index
    }
    pub fn clear_step_index(&mut self) {
        self.step_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_step_index(&mut self, v: u32) {
        self.step_index = v;
    }

    // .mizer.effects.EffectStep step = 4;


    pub fn get_step(&self) -> &EffectStep {
        self.step.as_ref().unwrap_or_else(|| <EffectStep as ::protobuf::Message>::default_instance())
    }
    pub fn clear_step(&mut self) {
        self.step.clear();
    }

    pub fn has_step(&self) -> bool {
        self.step.is_some()
    }

    // Param is passed by value, moved
    pub fn set_step(&mut self, v: EffectStep) {
        self.step = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_step(&mut self) -> &mut EffectStep {
        if self.step.is_none() {
            self.step.set_default();
        }
        self.step.as_mut().unwrap()
    }

    // Take field
    pub fn take_step(&mut self) -> EffectStep {
        self.step.take().unwrap_or_else(|| EffectStep::new())
    }
}

impl ::protobuf::Message for UpdateEffectStepRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.step {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel_index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.step_index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.step)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.effect_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.channel_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.step_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.step_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.step.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_id != 0 {
            os.write_uint32(1, self.effect_id)?;
        }
        if self.channel_index != 0 {
            os.write_uint32(2, self.channel_index)?;
        }
        if self.step_index != 0 {
            os.write_uint32(3, self.step_index)?;
        }
        if let Some(ref v) = self.step.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateEffectStepRequest {
        UpdateEffectStepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_id",
                |m: &UpdateEffectStepRequest| { &m.effect_id },
                |m: &mut UpdateEffectStepRequest| { &mut m.effect_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel_index",
                |m: &UpdateEffectStepRequest| { &m.channel_index },
                |m: &mut UpdateEffectStepRequest| { &mut m.channel_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "step_index",
                |m: &UpdateEffectStepRequest| { &m.step_index },
                |m: &mut UpdateEffectStepRequest| { &mut m.step_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EffectStep>>(
                "step",
                |m: &UpdateEffectStepRequest| { &m.step },
                |m: &mut UpdateEffectStepRequest| { &mut m.step },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateEffectStepRequest>(
                "UpdateEffectStepRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateEffectStepRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateEffectStepRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateEffectStepRequest::new)
    }
}

impl ::protobuf::Clear for UpdateEffectStepRequest {
    fn clear(&mut self) {
        self.effect_id = 0;
        self.channel_index = 0;
        self.step_index = 0;
        self.step.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateEffectStepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateEffectStepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddEffectChannelRequest {
    // message fields
    pub effect_id: u32,
    pub control: ::protobuf::SingularPtrField<super::fixtures::FixtureFaderControl>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddEffectChannelRequest {
    fn default() -> &'a AddEffectChannelRequest {
        <AddEffectChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddEffectChannelRequest {
    pub fn new() -> AddEffectChannelRequest {
        ::std::default::Default::default()
    }

    // uint32 effect_id = 1;


    pub fn get_effect_id(&self) -> u32 {
        self.effect_id
    }
    pub fn clear_effect_id(&mut self) {
        self.effect_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = v;
    }

    // .mizer.fixtures.FixtureFaderControl control = 2;


    pub fn get_control(&self) -> &super::fixtures::FixtureFaderControl {
        self.control.as_ref().unwrap_or_else(|| <super::fixtures::FixtureFaderControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_control(&mut self) {
        self.control.clear();
    }

    pub fn has_control(&self) -> bool {
        self.control.is_some()
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: super::fixtures::FixtureFaderControl) {
        self.control = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_control(&mut self) -> &mut super::fixtures::FixtureFaderControl {
        if self.control.is_none() {
            self.control.set_default();
        }
        self.control.as_mut().unwrap()
    }

    // Take field
    pub fn take_control(&mut self) -> super::fixtures::FixtureFaderControl {
        self.control.take().unwrap_or_else(|| super::fixtures::FixtureFaderControl::new())
    }
}

impl ::protobuf::Message for AddEffectChannelRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.control {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.control)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.effect_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.control.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_id != 0 {
            os.write_uint32(1, self.effect_id)?;
        }
        if let Some(ref v) = self.control.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddEffectChannelRequest {
        AddEffectChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_id",
                |m: &AddEffectChannelRequest| { &m.effect_id },
                |m: &mut AddEffectChannelRequest| { &mut m.effect_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fixtures::FixtureFaderControl>>(
                "control",
                |m: &AddEffectChannelRequest| { &m.control },
                |m: &mut AddEffectChannelRequest| { &mut m.control },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddEffectChannelRequest>(
                "AddEffectChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddEffectChannelRequest {
        static instance: ::protobuf::rt::LazyV2<AddEffectChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddEffectChannelRequest::new)
    }
}

impl ::protobuf::Clear for AddEffectChannelRequest {
    fn clear(&mut self) {
        self.effect_id = 0;
        self.control.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddEffectChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddEffectChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DeleteEffectChannelRequest {
    // message fields
    pub effect_id: u32,
    pub channel_index: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteEffectChannelRequest {
    fn default() -> &'a DeleteEffectChannelRequest {
        <DeleteEffectChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteEffectChannelRequest {
    pub fn new() -> DeleteEffectChannelRequest {
        ::std::default::Default::default()
    }

    // uint32 effect_id = 1;


    pub fn get_effect_id(&self) -> u32 {
        self.effect_id
    }
    pub fn clear_effect_id(&mut self) {
        self.effect_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = v;
    }

    // uint32 channel_index = 2;


    pub fn get_channel_index(&self) -> u32 {
        self.channel_index
    }
    pub fn clear_channel_index(&mut self) {
        self.channel_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_index(&mut self, v: u32) {
        self.channel_index = v;
    }
}

impl ::protobuf::Message for DeleteEffectChannelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.effect_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.channel_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_id != 0 {
            os.write_uint32(1, self.effect_id)?;
        }
        if self.channel_index != 0 {
            os.write_uint32(2, self.channel_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteEffectChannelRequest {
        DeleteEffectChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_id",
                |m: &DeleteEffectChannelRequest| { &m.effect_id },
                |m: &mut DeleteEffectChannelRequest| { &mut m.effect_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel_index",
                |m: &DeleteEffectChannelRequest| { &m.channel_index },
                |m: &mut DeleteEffectChannelRequest| { &mut m.channel_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteEffectChannelRequest>(
                "DeleteEffectChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteEffectChannelRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteEffectChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteEffectChannelRequest::new)
    }
}

impl ::protobuf::Clear for DeleteEffectChannelRequest {
    fn clear(&mut self) {
        self.effect_id = 0;
        self.channel_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteEffectChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteEffectChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddEffectStepRequest {
    // message fields
    pub effect_id: u32,
    pub channel_index: u32,
    pub step: ::protobuf::SingularPtrField<EffectStep>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddEffectStepRequest {
    fn default() -> &'a AddEffectStepRequest {
        <AddEffectStepRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddEffectStepRequest {
    pub fn new() -> AddEffectStepRequest {
        ::std::default::Default::default()
    }

    // uint32 effect_id = 1;


    pub fn get_effect_id(&self) -> u32 {
        self.effect_id
    }
    pub fn clear_effect_id(&mut self) {
        self.effect_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = v;
    }

    // uint32 channel_index = 2;


    pub fn get_channel_index(&self) -> u32 {
        self.channel_index
    }
    pub fn clear_channel_index(&mut self) {
        self.channel_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_index(&mut self, v: u32) {
        self.channel_index = v;
    }

    // .mizer.effects.EffectStep step = 3;


    pub fn get_step(&self) -> &EffectStep {
        self.step.as_ref().unwrap_or_else(|| <EffectStep as ::protobuf::Message>::default_instance())
    }
    pub fn clear_step(&mut self) {
        self.step.clear();
    }

    pub fn has_step(&self) -> bool {
        self.step.is_some()
    }

    // Param is passed by value, moved
    pub fn set_step(&mut self, v: EffectStep) {
        self.step = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_step(&mut self) -> &mut EffectStep {
        if self.step.is_none() {
            self.step.set_default();
        }
        self.step.as_mut().unwrap()
    }

    // Take field
    pub fn take_step(&mut self) -> EffectStep {
        self.step.take().unwrap_or_else(|| EffectStep::new())
    }
}

impl ::protobuf::Message for AddEffectStepRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.step {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel_index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.step)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.effect_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.channel_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.step.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_id != 0 {
            os.write_uint32(1, self.effect_id)?;
        }
        if self.channel_index != 0 {
            os.write_uint32(2, self.channel_index)?;
        }
        if let Some(ref v) = self.step.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddEffectStepRequest {
        AddEffectStepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_id",
                |m: &AddEffectStepRequest| { &m.effect_id },
                |m: &mut AddEffectStepRequest| { &mut m.effect_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel_index",
                |m: &AddEffectStepRequest| { &m.channel_index },
                |m: &mut AddEffectStepRequest| { &mut m.channel_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EffectStep>>(
                "step",
                |m: &AddEffectStepRequest| { &m.step },
                |m: &mut AddEffectStepRequest| { &mut m.step },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddEffectStepRequest>(
                "AddEffectStepRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddEffectStepRequest {
        static instance: ::protobuf::rt::LazyV2<AddEffectStepRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddEffectStepRequest::new)
    }
}

impl ::protobuf::Clear for AddEffectStepRequest {
    fn clear(&mut self) {
        self.effect_id = 0;
        self.channel_index = 0;
        self.step.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddEffectStepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddEffectStepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DeleteEffectStepRequest {
    // message fields
    pub effect_id: u32,
    pub channel_index: u32,
    pub step_index: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteEffectStepRequest {
    fn default() -> &'a DeleteEffectStepRequest {
        <DeleteEffectStepRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteEffectStepRequest {
    pub fn new() -> DeleteEffectStepRequest {
        ::std::default::Default::default()
    }

    // uint32 effect_id = 1;


    pub fn get_effect_id(&self) -> u32 {
        self.effect_id
    }
    pub fn clear_effect_id(&mut self) {
        self.effect_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_effect_id(&mut self, v: u32) {
        self.effect_id = v;
    }

    // uint32 channel_index = 2;


    pub fn get_channel_index(&self) -> u32 {
        self.channel_index
    }
    pub fn clear_channel_index(&mut self) {
        self.channel_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_index(&mut self, v: u32) {
        self.channel_index = v;
    }

    // uint32 step_index = 3;


    pub fn get_step_index(&self) -> u32 {
        self.step_index
    }
    pub fn clear_step_index(&mut self) {
        self.step_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_step_index(&mut self, v: u32) {
        self.step_index = v;
    }
}

impl ::protobuf::Message for DeleteEffectStepRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.effect_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel_index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.step_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.effect_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.effect_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.channel_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.step_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.step_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.effect_id != 0 {
            os.write_uint32(1, self.effect_id)?;
        }
        if self.channel_index != 0 {
            os.write_uint32(2, self.channel_index)?;
        }
        if self.step_index != 0 {
            os.write_uint32(3, self.step_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteEffectStepRequest {
        DeleteEffectStepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "effect_id",
                |m: &DeleteEffectStepRequest| { &m.effect_id },
                |m: &mut DeleteEffectStepRequest| { &mut m.effect_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel_index",
                |m: &DeleteEffectStepRequest| { &m.channel_index },
                |m: &mut DeleteEffectStepRequest| { &mut m.channel_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "step_index",
                |m: &DeleteEffectStepRequest| { &m.step_index },
                |m: &mut DeleteEffectStepRequest| { &mut m.step_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteEffectStepRequest>(
                "DeleteEffectStepRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteEffectStepRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteEffectStepRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteEffectStepRequest::new)
    }
}

impl ::protobuf::Clear for DeleteEffectStepRequest {
    fn clear(&mut self) {
        self.effect_id = 0;
        self.channel_index = 0;
        self.step_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteEffectStepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteEffectStepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Effects {
    // message fields
    pub effects: ::protobuf::RepeatedField<Effect>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Effects {
    fn default() -> &'a Effects {
        <Effects as ::protobuf::Message>::default_instance()
    }
}

impl Effects {
    pub fn new() -> Effects {
        ::std::default::Default::default()
    }

    // repeated .mizer.effects.Effect effects = 1;


    pub fn get_effects(&self) -> &[Effect] {
        &self.effects
    }
    pub fn clear_effects(&mut self) {
        self.effects.clear();
    }

    // Param is passed by value, moved
    pub fn set_effects(&mut self, v: ::protobuf::RepeatedField<Effect>) {
        self.effects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_effects(&mut self) -> &mut ::protobuf::RepeatedField<Effect> {
        &mut self.effects
    }

    // Take field
    pub fn take_effects(&mut self) -> ::protobuf::RepeatedField<Effect> {
        ::std::mem::replace(&mut self.effects, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Effects {
    fn is_initialized(&self) -> bool {
        for v in &self.effects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.effects)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.effects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.effects {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Effects {
        Effects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Effect>>(
                "effects",
                |m: &Effects| { &m.effects },
                |m: &mut Effects| { &mut m.effects },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Effects>(
                "Effects",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Effects {
        static instance: ::protobuf::rt::LazyV2<Effects> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Effects::new)
    }
}

impl ::protobuf::Clear for Effects {
    fn clear(&mut self) {
        self.effects.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Effects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Effects {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Effect {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub channels: ::protobuf::RepeatedField<EffectChannel>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Effect {
    fn default() -> &'a Effect {
        <Effect as ::protobuf::Message>::default_instance()
    }
}

impl Effect {
    pub fn new() -> Effect {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .mizer.effects.EffectChannel channels = 3;


    pub fn get_channels(&self) -> &[EffectChannel] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::protobuf::RepeatedField<EffectChannel>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::protobuf::RepeatedField<EffectChannel> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::protobuf::RepeatedField<EffectChannel> {
        ::std::mem::replace(&mut self.channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Effect {
    fn is_initialized(&self) -> bool {
        for v in &self.channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.channels {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Effect {
        Effect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Effect| { &m.id },
                |m: &mut Effect| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Effect| { &m.name },
                |m: &mut Effect| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EffectChannel>>(
                "channels",
                |m: &Effect| { &m.channels },
                |m: &mut Effect| { &mut m.channels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Effect>(
                "Effect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Effect {
        static instance: ::protobuf::rt::LazyV2<Effect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Effect::new)
    }
}

impl ::protobuf::Clear for Effect {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Effect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Effect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct EffectChannel {
    // message fields
    pub control: super::fixtures::FixtureControl,
    pub steps: ::protobuf::RepeatedField<EffectStep>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EffectChannel {
    fn default() -> &'a EffectChannel {
        <EffectChannel as ::protobuf::Message>::default_instance()
    }
}

impl EffectChannel {
    pub fn new() -> EffectChannel {
        ::std::default::Default::default()
    }

    // .mizer.fixtures.FixtureControl control = 1;


    pub fn get_control(&self) -> super::fixtures::FixtureControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = super::fixtures::FixtureControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: super::fixtures::FixtureControl) {
        self.control = v;
    }

    // repeated .mizer.effects.EffectStep steps = 2;


    pub fn get_steps(&self) -> &[EffectStep] {
        &self.steps
    }
    pub fn clear_steps(&mut self) {
        self.steps.clear();
    }

    // Param is passed by value, moved
    pub fn set_steps(&mut self, v: ::protobuf::RepeatedField<EffectStep>) {
        self.steps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_steps(&mut self) -> &mut ::protobuf::RepeatedField<EffectStep> {
        &mut self.steps
    }

    // Take field
    pub fn take_steps(&mut self) -> ::protobuf::RepeatedField<EffectStep> {
        ::std::mem::replace(&mut self.steps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EffectChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.steps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.steps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(1, self.control);
        }
        for value in &self.steps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.control != super::fixtures::FixtureControl::INTENSITY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        for v in &self.steps {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EffectChannel {
        EffectChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::fixtures::FixtureControl>>(
                "control",
                |m: &EffectChannel| { &m.control },
                |m: &mut EffectChannel| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EffectStep>>(
                "steps",
                |m: &EffectChannel| { &m.steps },
                |m: &mut EffectChannel| { &mut m.steps },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EffectChannel>(
                "EffectChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EffectChannel {
        static instance: ::protobuf::rt::LazyV2<EffectChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EffectChannel::new)
    }
}

impl ::protobuf::Clear for EffectChannel {
    fn clear(&mut self) {
        self.control = super::fixtures::FixtureControl::INTENSITY;
        self.steps.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EffectChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EffectChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct EffectStep {
    // message fields
    pub value: ::protobuf::SingularPtrField<super::sequencer::CueValue>,
    // message oneof groups
    pub control_point: ::std::option::Option<EffectStep_oneof_control_point>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EffectStep {
    fn default() -> &'a EffectStep {
        <EffectStep as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum EffectStep_oneof_control_point {
    simple(SimpleControlPoint),
    quadratic(QuadraticControlPoint),
    cubic(CubicControlPoint),
}

impl EffectStep {
    pub fn new() -> EffectStep {
        ::std::default::Default::default()
    }

    // .mizer.sequencer.CueValue value = 1;


    pub fn get_value(&self) -> &super::sequencer::CueValue {
        self.value.as_ref().unwrap_or_else(|| <super::sequencer::CueValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::sequencer::CueValue) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::sequencer::CueValue {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::sequencer::CueValue {
        self.value.take().unwrap_or_else(|| super::sequencer::CueValue::new())
    }

    // .mizer.effects.SimpleControlPoint simple = 2;


    pub fn get_simple(&self) -> &SimpleControlPoint {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::simple(ref v)) => v,
            _ => <SimpleControlPoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_simple(&mut self) {
        self.control_point = ::std::option::Option::None;
    }

    pub fn has_simple(&self) -> bool {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::simple(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_simple(&mut self, v: SimpleControlPoint) {
        self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::simple(v))
    }

    // Mutable pointer to the field.
    pub fn mut_simple(&mut self) -> &mut SimpleControlPoint {
        if let ::std::option::Option::Some(EffectStep_oneof_control_point::simple(_)) = self.control_point {
        } else {
            self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::simple(SimpleControlPoint::new()));
        }
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::simple(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_simple(&mut self) -> SimpleControlPoint {
        if self.has_simple() {
            match self.control_point.take() {
                ::std::option::Option::Some(EffectStep_oneof_control_point::simple(v)) => v,
                _ => panic!(),
            }
        } else {
            SimpleControlPoint::new()
        }
    }

    // .mizer.effects.QuadraticControlPoint quadratic = 3;


    pub fn get_quadratic(&self) -> &QuadraticControlPoint {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(ref v)) => v,
            _ => <QuadraticControlPoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_quadratic(&mut self) {
        self.control_point = ::std::option::Option::None;
    }

    pub fn has_quadratic(&self) -> bool {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_quadratic(&mut self, v: QuadraticControlPoint) {
        self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_quadratic(&mut self) -> &mut QuadraticControlPoint {
        if let ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(_)) = self.control_point {
        } else {
            self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(QuadraticControlPoint::new()));
        }
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_quadratic(&mut self) -> QuadraticControlPoint {
        if self.has_quadratic() {
            match self.control_point.take() {
                ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(v)) => v,
                _ => panic!(),
            }
        } else {
            QuadraticControlPoint::new()
        }
    }

    // .mizer.effects.CubicControlPoint cubic = 4;


    pub fn get_cubic(&self) -> &CubicControlPoint {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(ref v)) => v,
            _ => <CubicControlPoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cubic(&mut self) {
        self.control_point = ::std::option::Option::None;
    }

    pub fn has_cubic(&self) -> bool {
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cubic(&mut self, v: CubicControlPoint) {
        self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cubic(&mut self) -> &mut CubicControlPoint {
        if let ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(_)) = self.control_point {
        } else {
            self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(CubicControlPoint::new()));
        }
        match self.control_point {
            ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cubic(&mut self) -> CubicControlPoint {
        if self.has_cubic() {
            match self.control_point.take() {
                ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(v)) => v,
                _ => panic!(),
            }
        } else {
            CubicControlPoint::new()
        }
    }
}

impl ::protobuf::Message for EffectStep {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(EffectStep_oneof_control_point::simple(ref v)) = self.control_point {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EffectStep_oneof_control_point::quadratic(ref v)) = self.control_point {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EffectStep_oneof_control_point::cubic(ref v)) = self.control_point {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::simple(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::quadratic(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.control_point = ::std::option::Option::Some(EffectStep_oneof_control_point::cubic(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.control_point {
            match v {
                &EffectStep_oneof_control_point::simple(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EffectStep_oneof_control_point::quadratic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EffectStep_oneof_control_point::cubic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.control_point {
            match v {
                &EffectStep_oneof_control_point::simple(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EffectStep_oneof_control_point::quadratic(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EffectStep_oneof_control_point::cubic(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EffectStep {
        EffectStep::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sequencer::CueValue>>(
                "value",
                |m: &EffectStep| { &m.value },
                |m: &mut EffectStep| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SimpleControlPoint>(
                "simple",
                EffectStep::has_simple,
                EffectStep::get_simple,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QuadraticControlPoint>(
                "quadratic",
                EffectStep::has_quadratic,
                EffectStep::get_quadratic,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CubicControlPoint>(
                "cubic",
                EffectStep::has_cubic,
                EffectStep::get_cubic,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EffectStep>(
                "EffectStep",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EffectStep {
        static instance: ::protobuf::rt::LazyV2<EffectStep> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EffectStep::new)
    }
}

impl ::protobuf::Clear for EffectStep {
    fn clear(&mut self) {
        self.value.clear();
        self.control_point = ::std::option::Option::None;
        self.control_point = ::std::option::Option::None;
        self.control_point = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EffectStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EffectStep {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SimpleControlPoint {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleControlPoint {
    fn default() -> &'a SimpleControlPoint {
        <SimpleControlPoint as ::protobuf::Message>::default_instance()
    }
}

impl SimpleControlPoint {
    pub fn new() -> SimpleControlPoint {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SimpleControlPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleControlPoint {
        SimpleControlPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimpleControlPoint>(
                "SimpleControlPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimpleControlPoint {
        static instance: ::protobuf::rt::LazyV2<SimpleControlPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleControlPoint::new)
    }
}

impl ::protobuf::Clear for SimpleControlPoint {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleControlPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleControlPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct QuadraticControlPoint {
    // message fields
    pub c0a: f64,
    pub c0b: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuadraticControlPoint {
    fn default() -> &'a QuadraticControlPoint {
        <QuadraticControlPoint as ::protobuf::Message>::default_instance()
    }
}

impl QuadraticControlPoint {
    pub fn new() -> QuadraticControlPoint {
        ::std::default::Default::default()
    }

    // double c0a = 1;


    pub fn get_c0a(&self) -> f64 {
        self.c0a
    }
    pub fn clear_c0a(&mut self) {
        self.c0a = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c0a(&mut self, v: f64) {
        self.c0a = v;
    }

    // double c0b = 2;


    pub fn get_c0b(&self) -> f64 {
        self.c0b
    }
    pub fn clear_c0b(&mut self) {
        self.c0b = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c0b(&mut self, v: f64) {
        self.c0b = v;
    }
}

impl ::protobuf::Message for QuadraticControlPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c0a = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c0b = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.c0a != 0. {
            my_size += 9;
        }
        if self.c0b != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.c0a != 0. {
            os.write_double(1, self.c0a)?;
        }
        if self.c0b != 0. {
            os.write_double(2, self.c0b)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuadraticControlPoint {
        QuadraticControlPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c0a",
                |m: &QuadraticControlPoint| { &m.c0a },
                |m: &mut QuadraticControlPoint| { &mut m.c0a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c0b",
                |m: &QuadraticControlPoint| { &m.c0b },
                |m: &mut QuadraticControlPoint| { &mut m.c0b },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuadraticControlPoint>(
                "QuadraticControlPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuadraticControlPoint {
        static instance: ::protobuf::rt::LazyV2<QuadraticControlPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuadraticControlPoint::new)
    }
}

impl ::protobuf::Clear for QuadraticControlPoint {
    fn clear(&mut self) {
        self.c0a = 0.;
        self.c0b = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuadraticControlPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuadraticControlPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CubicControlPoint {
    // message fields
    pub c0a: f64,
    pub c0b: f64,
    pub c1a: f64,
    pub c1b: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CubicControlPoint {
    fn default() -> &'a CubicControlPoint {
        <CubicControlPoint as ::protobuf::Message>::default_instance()
    }
}

impl CubicControlPoint {
    pub fn new() -> CubicControlPoint {
        ::std::default::Default::default()
    }

    // double c0a = 1;


    pub fn get_c0a(&self) -> f64 {
        self.c0a
    }
    pub fn clear_c0a(&mut self) {
        self.c0a = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c0a(&mut self, v: f64) {
        self.c0a = v;
    }

    // double c0b = 2;


    pub fn get_c0b(&self) -> f64 {
        self.c0b
    }
    pub fn clear_c0b(&mut self) {
        self.c0b = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c0b(&mut self, v: f64) {
        self.c0b = v;
    }

    // double c1a = 3;


    pub fn get_c1a(&self) -> f64 {
        self.c1a
    }
    pub fn clear_c1a(&mut self) {
        self.c1a = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c1a(&mut self, v: f64) {
        self.c1a = v;
    }

    // double c1b = 4;


    pub fn get_c1b(&self) -> f64 {
        self.c1b
    }
    pub fn clear_c1b(&mut self) {
        self.c1b = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c1b(&mut self, v: f64) {
        self.c1b = v;
    }
}

impl ::protobuf::Message for CubicControlPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c0a = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c0b = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c1a = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.c1b = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.c0a != 0. {
            my_size += 9;
        }
        if self.c0b != 0. {
            my_size += 9;
        }
        if self.c1a != 0. {
            my_size += 9;
        }
        if self.c1b != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.c0a != 0. {
            os.write_double(1, self.c0a)?;
        }
        if self.c0b != 0. {
            os.write_double(2, self.c0b)?;
        }
        if self.c1a != 0. {
            os.write_double(3, self.c1a)?;
        }
        if self.c1b != 0. {
            os.write_double(4, self.c1b)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CubicControlPoint {
        CubicControlPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c0a",
                |m: &CubicControlPoint| { &m.c0a },
                |m: &mut CubicControlPoint| { &mut m.c0a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c0b",
                |m: &CubicControlPoint| { &m.c0b },
                |m: &mut CubicControlPoint| { &mut m.c0b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c1a",
                |m: &CubicControlPoint| { &m.c1a },
                |m: &mut CubicControlPoint| { &mut m.c1a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "c1b",
                |m: &CubicControlPoint| { &m.c1b },
                |m: &mut CubicControlPoint| { &mut m.c1b },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CubicControlPoint>(
                "CubicControlPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CubicControlPoint {
        static instance: ::protobuf::rt::LazyV2<CubicControlPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CubicControlPoint::new)
    }
}

impl ::protobuf::Clear for CubicControlPoint {
    fn clear(&mut self) {
        self.c0a = 0.;
        self.c0b = 0.;
        self.c1a = 0.;
        self.c1b = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CubicControlPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CubicControlPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\reffects.proto\x12\rmizer.effects\x1a\x0efixtures.proto\x1a\x0fsequen\
    cer.proto\"\x13\n\x11GetEffectsRequest\"&\n\x10AddEffectRequest\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\"\xa9\x01\n\x17UpdateEffectStepRe\
    quest\x12\x1b\n\teffect_id\x18\x01\x20\x01(\rR\x08effectId\x12#\n\rchann\
    el_index\x18\x02\x20\x01(\rR\x0cchannelIndex\x12\x1d\n\nstep_index\x18\
    \x03\x20\x01(\rR\tstepIndex\x12-\n\x04step\x18\x04\x20\x01(\x0b2\x19.miz\
    er.effects.EffectStepR\x04step\"u\n\x17AddEffectChannelRequest\x12\x1b\n\
    \teffect_id\x18\x01\x20\x01(\rR\x08effectId\x12=\n\x07control\x18\x02\
    \x20\x01(\x0b2#.mizer.fixtures.FixtureFaderControlR\x07control\"^\n\x1aD\
    eleteEffectChannelRequest\x12\x1b\n\teffect_id\x18\x01\x20\x01(\rR\x08ef\
    fectId\x12#\n\rchannel_index\x18\x02\x20\x01(\rR\x0cchannelIndex\"\x87\
    \x01\n\x14AddEffectStepRequest\x12\x1b\n\teffect_id\x18\x01\x20\x01(\rR\
    \x08effectId\x12#\n\rchannel_index\x18\x02\x20\x01(\rR\x0cchannelIndex\
    \x12-\n\x04step\x18\x03\x20\x01(\x0b2\x19.mizer.effects.EffectStepR\x04s\
    tep\"z\n\x17DeleteEffectStepRequest\x12\x1b\n\teffect_id\x18\x01\x20\x01\
    (\rR\x08effectId\x12#\n\rchannel_index\x18\x02\x20\x01(\rR\x0cchannelInd\
    ex\x12\x1d\n\nstep_index\x18\x03\x20\x01(\rR\tstepIndex\":\n\x07Effects\
    \x12/\n\x07effects\x18\x01\x20\x03(\x0b2\x15.mizer.effects.EffectR\x07ef\
    fects\"f\n\x06Effect\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\
    \x04name\x18\x02\x20\x01(\tR\x04name\x128\n\x08channels\x18\x03\x20\x03(\
    \x0b2\x1c.mizer.effects.EffectChannelR\x08channels\"z\n\rEffectChannel\
    \x128\n\x07control\x18\x01\x20\x01(\x0e2\x1e.mizer.fixtures.FixtureContr\
    olR\x07control\x12/\n\x05steps\x18\x02\x20\x03(\x0b2\x19.mizer.effects.E\
    ffectStepR\x05steps\"\x8b\x02\n\nEffectStep\x12/\n\x05value\x18\x01\x20\
    \x01(\x0b2\x19.mizer.sequencer.CueValueR\x05value\x12;\n\x06simple\x18\
    \x02\x20\x01(\x0b2!.mizer.effects.SimpleControlPointH\0R\x06simple\x12D\
    \n\tquadratic\x18\x03\x20\x01(\x0b2$.mizer.effects.QuadraticControlPoint\
    H\0R\tquadratic\x128\n\x05cubic\x18\x04\x20\x01(\x0b2\x20.mizer.effects.\
    CubicControlPointH\0R\x05cubicB\x0f\n\rcontrol_point\"\x14\n\x12SimpleCo\
    ntrolPoint\";\n\x15QuadraticControlPoint\x12\x10\n\x03c0a\x18\x01\x20\
    \x01(\x01R\x03c0a\x12\x10\n\x03c0b\x18\x02\x20\x01(\x01R\x03c0b\"[\n\x11\
    CubicControlPoint\x12\x10\n\x03c0a\x18\x01\x20\x01(\x01R\x03c0a\x12\x10\
    \n\x03c0b\x18\x02\x20\x01(\x01R\x03c0b\x12\x10\n\x03c1a\x18\x03\x20\x01(\
    \x01R\x03c1a\x12\x10\n\x03c1b\x18\x04\x20\x01(\x01R\x03c1b2\xc6\x04\n\nE\
    ffectsApi\x12H\n\nGetEffects\x12\x20.mizer.effects.GetEffectsRequest\x1a\
    \x16.mizer.effects.Effects\"\0\x12E\n\tAddEffect\x12\x1f.mizer.effects.A\
    ddEffectRequest\x1a\x15.mizer.effects.Effect\"\0\x12S\n\x10AddEffectChan\
    nel\x12&.mizer.effects.AddEffectChannelRequest\x1a\x15.mizer.effects.Eff\
    ect\"\0\x12Y\n\x13DeleteEffectChannel\x12).mizer.effects.DeleteEffectCha\
    nnelRequest\x1a\x15.mizer.effects.Effect\"\0\x12S\n\x10UpdateEffectStep\
    \x12&.mizer.effects.UpdateEffectStepRequest\x1a\x15.mizer.effects.Effect\
    \"\0\x12M\n\rAddEffectStep\x12#.mizer.effects.AddEffectStepRequest\x1a\
    \x15.mizer.effects.Effect\"\0\x12S\n\x10DeleteEffectStep\x12&.mizer.effe\
    cts.DeleteEffectStepRequest\x1a\x15.mizer.effects.Effect\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
