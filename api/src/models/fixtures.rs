// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `fixtures.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddFixturesRequest {
    // message fields
    pub request: ::protobuf::SingularPtrField<AddFixtureRequest>,
    pub count: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddFixturesRequest {
    fn default() -> &'a AddFixturesRequest {
        <AddFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddFixturesRequest {
    pub fn new() -> AddFixturesRequest {
        ::std::default::Default::default()
    }

    // .mizer.fixtures.AddFixtureRequest request = 1;


    pub fn get_request(&self) -> &AddFixtureRequest {
        self.request.as_ref().unwrap_or_else(|| <AddFixtureRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: AddFixtureRequest) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut AddFixtureRequest {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> AddFixtureRequest {
        self.request.take().unwrap_or_else(|| AddFixtureRequest::new())
    }

    // uint32 count = 2;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }
}

impl ::protobuf::Message for AddFixturesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.count != 0 {
            os.write_uint32(2, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddFixturesRequest {
        AddFixturesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddFixtureRequest>>(
                "request",
                |m: &AddFixturesRequest| { &m.request },
                |m: &mut AddFixturesRequest| { &mut m.request },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &AddFixturesRequest| { &m.count },
                |m: &mut AddFixturesRequest| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddFixturesRequest>(
                "AddFixturesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddFixturesRequest {
        static instance: ::protobuf::rt::LazyV2<AddFixturesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddFixturesRequest::new)
    }
}

impl ::protobuf::Clear for AddFixturesRequest {
    fn clear(&mut self) {
        self.request.clear();
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddFixturesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AddFixtureRequest {
    // message fields
    pub definitionId: ::std::string::String,
    pub mode: ::std::string::String,
    pub id: u32,
    pub channel: u32,
    pub universe: u32,
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddFixtureRequest {
    fn default() -> &'a AddFixtureRequest {
        <AddFixtureRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddFixtureRequest {
    pub fn new() -> AddFixtureRequest {
        ::std::default::Default::default()
    }

    // string definitionId = 1;


    pub fn get_definitionId(&self) -> &str {
        &self.definitionId
    }
    pub fn clear_definitionId(&mut self) {
        self.definitionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_definitionId(&mut self, v: ::std::string::String) {
        self.definitionId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_definitionId(&mut self) -> &mut ::std::string::String {
        &mut self.definitionId
    }

    // Take field
    pub fn take_definitionId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.definitionId, ::std::string::String::new())
    }

    // string mode = 2;


    pub fn get_mode(&self) -> &str {
        &self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: ::std::string::String) {
        self.mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode(&mut self) -> &mut ::std::string::String {
        &mut self.mode
    }

    // Take field
    pub fn take_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mode, ::std::string::String::new())
    }

    // uint32 id = 3;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // uint32 channel = 4;


    pub fn get_channel(&self) -> u32 {
        self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: u32) {
        self.channel = v;
    }

    // uint32 universe = 5;


    pub fn get_universe(&self) -> u32 {
        self.universe
    }
    pub fn clear_universe(&mut self) {
        self.universe = 0;
    }

    // Param is passed by value, moved
    pub fn set_universe(&mut self, v: u32) {
        self.universe = v;
    }

    // string name = 6;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AddFixtureRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.definitionId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mode)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.universe = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.definitionId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.definitionId);
        }
        if !self.mode.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mode);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel != 0 {
            my_size += ::protobuf::rt::value_size(4, self.channel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.universe != 0 {
            my_size += ::protobuf::rt::value_size(5, self.universe, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.definitionId.is_empty() {
            os.write_string(1, &self.definitionId)?;
        }
        if !self.mode.is_empty() {
            os.write_string(2, &self.mode)?;
        }
        if self.id != 0 {
            os.write_uint32(3, self.id)?;
        }
        if self.channel != 0 {
            os.write_uint32(4, self.channel)?;
        }
        if self.universe != 0 {
            os.write_uint32(5, self.universe)?;
        }
        if !self.name.is_empty() {
            os.write_string(6, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddFixtureRequest {
        AddFixtureRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "definitionId",
                |m: &AddFixtureRequest| { &m.definitionId },
                |m: &mut AddFixtureRequest| { &mut m.definitionId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mode",
                |m: &AddFixtureRequest| { &m.mode },
                |m: &mut AddFixtureRequest| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &AddFixtureRequest| { &m.id },
                |m: &mut AddFixtureRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel",
                |m: &AddFixtureRequest| { &m.channel },
                |m: &mut AddFixtureRequest| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "universe",
                |m: &AddFixtureRequest| { &m.universe },
                |m: &mut AddFixtureRequest| { &mut m.universe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AddFixtureRequest| { &m.name },
                |m: &mut AddFixtureRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddFixtureRequest>(
                "AddFixtureRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddFixtureRequest {
        static instance: ::protobuf::rt::LazyV2<AddFixtureRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddFixtureRequest::new)
    }
}

impl ::protobuf::Clear for AddFixtureRequest {
    fn clear(&mut self) {
        self.definitionId.clear();
        self.mode.clear();
        self.id = 0;
        self.channel = 0;
        self.universe = 0;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddFixtureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddFixtureRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GetFixturesRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFixturesRequest {
    fn default() -> &'a GetFixturesRequest {
        <GetFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetFixturesRequest {
    pub fn new() -> GetFixturesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetFixturesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFixturesRequest {
        GetFixturesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetFixturesRequest>(
                "GetFixturesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetFixturesRequest {
        static instance: ::protobuf::rt::LazyV2<GetFixturesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetFixturesRequest::new)
    }
}

impl ::protobuf::Clear for GetFixturesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFixturesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DeleteFixturesRequest {
    // message fields
    pub fixtureIds: ::std::vec::Vec<u32>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteFixturesRequest {
    fn default() -> &'a DeleteFixturesRequest {
        <DeleteFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteFixturesRequest {
    pub fn new() -> DeleteFixturesRequest {
        ::std::default::Default::default()
    }

    // repeated uint32 fixtureIds = 1;


    pub fn get_fixtureIds(&self) -> &[u32] {
        &self.fixtureIds
    }
    pub fn clear_fixtureIds(&mut self) {
        self.fixtureIds.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtureIds(&mut self, v: ::std::vec::Vec<u32>) {
        self.fixtureIds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtureIds(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.fixtureIds
    }

    // Take field
    pub fn take_fixtureIds(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.fixtureIds, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteFixturesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.fixtureIds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtureIds {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtureIds {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteFixturesRequest {
        DeleteFixturesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fixtureIds",
                |m: &DeleteFixturesRequest| { &m.fixtureIds },
                |m: &mut DeleteFixturesRequest| { &mut m.fixtureIds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteFixturesRequest>(
                "DeleteFixturesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteFixturesRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteFixturesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteFixturesRequest::new)
    }
}

impl ::protobuf::Clear for DeleteFixturesRequest {
    fn clear(&mut self) {
        self.fixtureIds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteFixturesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UpdateFixtureRequest {
    // message fields
    pub fixtureId: u32,
    // message oneof groups
    pub _invert_pan: ::std::option::Option<UpdateFixtureRequest_oneof__invert_pan>,
    pub _invert_tilt: ::std::option::Option<UpdateFixtureRequest_oneof__invert_tilt>,
    pub _name: ::std::option::Option<UpdateFixtureRequest_oneof__name>,
    pub _address: ::std::option::Option<UpdateFixtureRequest_oneof__address>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateFixtureRequest {
    fn default() -> &'a UpdateFixtureRequest {
        <UpdateFixtureRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UpdateFixtureRequest_oneof__invert_pan {
    invert_pan(bool),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UpdateFixtureRequest_oneof__invert_tilt {
    invert_tilt(bool),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UpdateFixtureRequest_oneof__name {
    name(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum UpdateFixtureRequest_oneof__address {
    address(FixtureAddress),
}

impl UpdateFixtureRequest {
    pub fn new() -> UpdateFixtureRequest {
        ::std::default::Default::default()
    }

    // uint32 fixtureId = 1;


    pub fn get_fixtureId(&self) -> u32 {
        self.fixtureId
    }
    pub fn clear_fixtureId(&mut self) {
        self.fixtureId = 0;
    }

    // Param is passed by value, moved
    pub fn set_fixtureId(&mut self, v: u32) {
        self.fixtureId = v;
    }

    // bool invert_pan = 2;


    pub fn get_invert_pan(&self) -> bool {
        match self._invert_pan {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_pan::invert_pan(v)) => v,
            _ => false,
        }
    }
    pub fn clear_invert_pan(&mut self) {
        self._invert_pan = ::std::option::Option::None;
    }

    pub fn has_invert_pan(&self) -> bool {
        match self._invert_pan {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_pan::invert_pan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_invert_pan(&mut self, v: bool) {
        self._invert_pan = ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_pan::invert_pan(v))
    }

    // bool invert_tilt = 3;


    pub fn get_invert_tilt(&self) -> bool {
        match self._invert_tilt {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(v)) => v,
            _ => false,
        }
    }
    pub fn clear_invert_tilt(&mut self) {
        self._invert_tilt = ::std::option::Option::None;
    }

    pub fn has_invert_tilt(&self) -> bool {
        match self._invert_tilt {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_invert_tilt(&mut self, v: bool) {
        self._invert_tilt = ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(v))
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        match self._name {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_name(&mut self) {
        self._name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self._name {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self._name = ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(_)) = self._name {
        } else {
            self._name = ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(::std::string::String::new()));
        }
        match self._name {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self._name.take() {
                ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .mizer.fixtures.FixtureAddress address = 5;


    pub fn get_address(&self) -> &FixtureAddress {
        match self._address {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(ref v)) => v,
            _ => <FixtureAddress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_address(&mut self) {
        self._address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        match self._address {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: FixtureAddress) {
        self._address = ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_address(&mut self) -> &mut FixtureAddress {
        if let ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(_)) = self._address {
        } else {
            self._address = ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(FixtureAddress::new()));
        }
        match self._address {
            ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_address(&mut self) -> FixtureAddress {
        if self.has_address() {
            match self._address.take() {
                ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(v)) => v,
                _ => panic!(),
            }
        } else {
            FixtureAddress::new()
        }
    }
}

impl ::protobuf::Message for UpdateFixtureRequest {
    fn is_initialized(&self) -> bool {
        if let Some(UpdateFixtureRequest_oneof__address::address(ref v)) = self._address {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fixtureId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._invert_pan = ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_pan::invert_pan(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._invert_tilt = ::std::option::Option::Some(UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(is.read_bool()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._name = ::std::option::Option::Some(UpdateFixtureRequest_oneof__name::name(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._address = ::std::option::Option::Some(UpdateFixtureRequest_oneof__address::address(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fixtureId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fixtureId, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self._invert_pan {
            match v {
                &UpdateFixtureRequest_oneof__invert_pan::invert_pan(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._invert_tilt {
            match v {
                &UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(v) => {
                    my_size += 2;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &UpdateFixtureRequest_oneof__name::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._address {
            match v {
                &UpdateFixtureRequest_oneof__address::address(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fixtureId != 0 {
            os.write_uint32(1, self.fixtureId)?;
        }
        if let ::std::option::Option::Some(ref v) = self._invert_pan {
            match v {
                &UpdateFixtureRequest_oneof__invert_pan::invert_pan(v) => {
                    os.write_bool(2, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._invert_tilt {
            match v {
                &UpdateFixtureRequest_oneof__invert_tilt::invert_tilt(v) => {
                    os.write_bool(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._name {
            match v {
                &UpdateFixtureRequest_oneof__name::name(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._address {
            match v {
                &UpdateFixtureRequest_oneof__address::address(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateFixtureRequest {
        UpdateFixtureRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fixtureId",
                |m: &UpdateFixtureRequest| { &m.fixtureId },
                |m: &mut UpdateFixtureRequest| { &mut m.fixtureId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "invert_pan",
                UpdateFixtureRequest::has_invert_pan,
                UpdateFixtureRequest::get_invert_pan,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "invert_tilt",
                UpdateFixtureRequest::has_invert_tilt,
                UpdateFixtureRequest::get_invert_tilt,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "name",
                UpdateFixtureRequest::has_name,
                UpdateFixtureRequest::get_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FixtureAddress>(
                "address",
                UpdateFixtureRequest::has_address,
                UpdateFixtureRequest::get_address,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateFixtureRequest>(
                "UpdateFixtureRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateFixtureRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateFixtureRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateFixtureRequest::new)
    }
}

impl ::protobuf::Clear for UpdateFixtureRequest {
    fn clear(&mut self) {
        self.fixtureId = 0;
        self._invert_pan = ::std::option::Option::None;
        self._invert_tilt = ::std::option::Option::None;
        self._name = ::std::option::Option::None;
        self._address = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateFixtureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateFixtureRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureAddress {
    // message fields
    pub universe: u32,
    pub channel: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureAddress {
    fn default() -> &'a FixtureAddress {
        <FixtureAddress as ::protobuf::Message>::default_instance()
    }
}

impl FixtureAddress {
    pub fn new() -> FixtureAddress {
        ::std::default::Default::default()
    }

    // uint32 universe = 1;


    pub fn get_universe(&self) -> u32 {
        self.universe
    }
    pub fn clear_universe(&mut self) {
        self.universe = 0;
    }

    // Param is passed by value, moved
    pub fn set_universe(&mut self, v: u32) {
        self.universe = v;
    }

    // uint32 channel = 2;


    pub fn get_channel(&self) -> u32 {
        self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: u32) {
        self.channel = v;
    }
}

impl ::protobuf::Message for FixtureAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.universe = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.universe != 0 {
            my_size += ::protobuf::rt::value_size(1, self.universe, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel != 0 {
            my_size += ::protobuf::rt::value_size(2, self.channel, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.universe != 0 {
            os.write_uint32(1, self.universe)?;
        }
        if self.channel != 0 {
            os.write_uint32(2, self.channel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureAddress {
        FixtureAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "universe",
                |m: &FixtureAddress| { &m.universe },
                |m: &mut FixtureAddress| { &mut m.universe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel",
                |m: &FixtureAddress| { &m.channel },
                |m: &mut FixtureAddress| { &mut m.channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureAddress>(
                "FixtureAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureAddress {
        static instance: ::protobuf::rt::LazyV2<FixtureAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureAddress::new)
    }
}

impl ::protobuf::Clear for FixtureAddress {
    fn clear(&mut self) {
        self.universe = 0;
        self.channel = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureId {
    // message oneof groups
    pub id: ::std::option::Option<FixtureId_oneof_id>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureId {
    fn default() -> &'a FixtureId {
        <FixtureId as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureId_oneof_id {
    fixture(u32),
    sub_fixture(SubFixtureId),
}

impl FixtureId {
    pub fn new() -> FixtureId {
        ::std::default::Default::default()
    }

    // uint32 fixture = 1;


    pub fn get_fixture(&self) -> u32 {
        match self.id {
            ::std::option::Option::Some(FixtureId_oneof_id::fixture(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_fixture(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_fixture(&self) -> bool {
        match self.id {
            ::std::option::Option::Some(FixtureId_oneof_id::fixture(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixture(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(FixtureId_oneof_id::fixture(v))
    }

    // .mizer.fixtures.SubFixtureId sub_fixture = 2;


    pub fn get_sub_fixture(&self) -> &SubFixtureId {
        match self.id {
            ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(ref v)) => v,
            _ => <SubFixtureId as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sub_fixture(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_sub_fixture(&self) -> bool {
        match self.id {
            ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sub_fixture(&mut self, v: SubFixtureId) {
        self.id = ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sub_fixture(&mut self) -> &mut SubFixtureId {
        if let ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(_)) = self.id {
        } else {
            self.id = ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(SubFixtureId::new()));
        }
        match self.id {
            ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sub_fixture(&mut self) -> SubFixtureId {
        if self.has_sub_fixture() {
            match self.id.take() {
                ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(v)) => v,
                _ => panic!(),
            }
        } else {
            SubFixtureId::new()
        }
    }
}

impl ::protobuf::Message for FixtureId {
    fn is_initialized(&self) -> bool {
        if let Some(FixtureId_oneof_id::sub_fixture(ref v)) = self.id {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = ::std::option::Option::Some(FixtureId_oneof_id::fixture(is.read_uint32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.id = ::std::option::Option::Some(FixtureId_oneof_id::sub_fixture(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.id {
            match v {
                &FixtureId_oneof_id::fixture(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &FixtureId_oneof_id::sub_fixture(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.id {
            match v {
                &FixtureId_oneof_id::fixture(v) => {
                    os.write_uint32(1, v)?;
                },
                &FixtureId_oneof_id::sub_fixture(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureId {
        FixtureId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "fixture",
                FixtureId::has_fixture,
                FixtureId::get_fixture,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SubFixtureId>(
                "sub_fixture",
                FixtureId::has_sub_fixture,
                FixtureId::get_sub_fixture,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureId>(
                "FixtureId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureId {
        static instance: ::protobuf::rt::LazyV2<FixtureId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureId::new)
    }
}

impl ::protobuf::Clear for FixtureId {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SubFixtureId {
    // message fields
    pub fixture_id: u32,
    pub child_id: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubFixtureId {
    fn default() -> &'a SubFixtureId {
        <SubFixtureId as ::protobuf::Message>::default_instance()
    }
}

impl SubFixtureId {
    pub fn new() -> SubFixtureId {
        ::std::default::Default::default()
    }

    // uint32 fixture_id = 1;


    pub fn get_fixture_id(&self) -> u32 {
        self.fixture_id
    }
    pub fn clear_fixture_id(&mut self) {
        self.fixture_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_fixture_id(&mut self, v: u32) {
        self.fixture_id = v;
    }

    // uint32 child_id = 2;


    pub fn get_child_id(&self) -> u32 {
        self.child_id
    }
    pub fn clear_child_id(&mut self) {
        self.child_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_child_id(&mut self, v: u32) {
        self.child_id = v;
    }
}

impl ::protobuf::Message for SubFixtureId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fixture_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.child_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fixture_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fixture_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.child_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.child_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fixture_id != 0 {
            os.write_uint32(1, self.fixture_id)?;
        }
        if self.child_id != 0 {
            os.write_uint32(2, self.child_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubFixtureId {
        SubFixtureId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fixture_id",
                |m: &SubFixtureId| { &m.fixture_id },
                |m: &mut SubFixtureId| { &mut m.fixture_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "child_id",
                |m: &SubFixtureId| { &m.child_id },
                |m: &mut SubFixtureId| { &mut m.child_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubFixtureId>(
                "SubFixtureId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubFixtureId {
        static instance: ::protobuf::rt::LazyV2<SubFixtureId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubFixtureId::new)
    }
}

impl ::protobuf::Clear for SubFixtureId {
    fn clear(&mut self) {
        self.fixture_id = 0;
        self.child_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubFixtureId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubFixtureId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Fixtures {
    // message fields
    pub fixtures: ::protobuf::RepeatedField<Fixture>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fixtures {
    fn default() -> &'a Fixtures {
        <Fixtures as ::protobuf::Message>::default_instance()
    }
}

impl Fixtures {
    pub fn new() -> Fixtures {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.Fixture fixtures = 1;


    pub fn get_fixtures(&self) -> &[Fixture] {
        &self.fixtures
    }
    pub fn clear_fixtures(&mut self) {
        self.fixtures.clear();
    }

    // Param is passed by value, moved
    pub fn set_fixtures(&mut self, v: ::protobuf::RepeatedField<Fixture>) {
        self.fixtures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fixtures(&mut self) -> &mut ::protobuf::RepeatedField<Fixture> {
        &mut self.fixtures
    }

    // Take field
    pub fn take_fixtures(&mut self) -> ::protobuf::RepeatedField<Fixture> {
        ::std::mem::replace(&mut self.fixtures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Fixtures {
    fn is_initialized(&self) -> bool {
        for v in &self.fixtures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fixtures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fixtures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fixtures {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fixtures {
        Fixtures::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Fixture>>(
                "fixtures",
                |m: &Fixtures| { &m.fixtures },
                |m: &mut Fixtures| { &mut m.fixtures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fixtures>(
                "Fixtures",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fixtures {
        static instance: ::protobuf::rt::LazyV2<Fixtures> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fixtures::new)
    }
}

impl ::protobuf::Clear for Fixtures {
    fn clear(&mut self) {
        self.fixtures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fixtures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixtures {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Fixture {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub model: ::std::string::String,
    pub mode: ::std::string::String,
    pub universe: u32,
    pub channel: u32,
    pub channel_count: u32,
    pub controls: ::protobuf::RepeatedField<FixtureControls>,
    pub children: ::protobuf::RepeatedField<SubFixture>,
    pub config: ::protobuf::SingularPtrField<FixtureConfig>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fixture {
    fn default() -> &'a Fixture {
        <Fixture as ::protobuf::Message>::default_instance()
    }
}

impl Fixture {
    pub fn new() -> Fixture {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string manufacturer = 3;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // string model = 4;


    pub fn get_model(&self) -> &str {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model, ::std::string::String::new())
    }

    // string mode = 5;


    pub fn get_mode(&self) -> &str {
        &self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: ::std::string::String) {
        self.mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode(&mut self) -> &mut ::std::string::String {
        &mut self.mode
    }

    // Take field
    pub fn take_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mode, ::std::string::String::new())
    }

    // uint32 universe = 6;


    pub fn get_universe(&self) -> u32 {
        self.universe
    }
    pub fn clear_universe(&mut self) {
        self.universe = 0;
    }

    // Param is passed by value, moved
    pub fn set_universe(&mut self, v: u32) {
        self.universe = v;
    }

    // uint32 channel = 7;


    pub fn get_channel(&self) -> u32 {
        self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: u32) {
        self.channel = v;
    }

    // uint32 channel_count = 8;


    pub fn get_channel_count(&self) -> u32 {
        self.channel_count
    }
    pub fn clear_channel_count(&mut self) {
        self.channel_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_count(&mut self, v: u32) {
        self.channel_count = v;
    }

    // repeated .mizer.fixtures.FixtureControls controls = 9;


    pub fn get_controls(&self) -> &[FixtureControls] {
        &self.controls
    }
    pub fn clear_controls(&mut self) {
        self.controls.clear();
    }

    // Param is passed by value, moved
    pub fn set_controls(&mut self, v: ::protobuf::RepeatedField<FixtureControls>) {
        self.controls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_controls(&mut self) -> &mut ::protobuf::RepeatedField<FixtureControls> {
        &mut self.controls
    }

    // Take field
    pub fn take_controls(&mut self) -> ::protobuf::RepeatedField<FixtureControls> {
        ::std::mem::replace(&mut self.controls, ::protobuf::RepeatedField::new())
    }

    // repeated .mizer.fixtures.SubFixture children = 10;


    pub fn get_children(&self) -> &[SubFixture] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::protobuf::RepeatedField<SubFixture>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::protobuf::RepeatedField<SubFixture> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::protobuf::RepeatedField<SubFixture> {
        ::std::mem::replace(&mut self.children, ::protobuf::RepeatedField::new())
    }

    // .mizer.fixtures.FixtureConfig config = 11;


    pub fn get_config(&self) -> &FixtureConfig {
        self.config.as_ref().unwrap_or_else(|| <FixtureConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: FixtureConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut FixtureConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> FixtureConfig {
        self.config.take().unwrap_or_else(|| FixtureConfig::new())
    }
}

impl ::protobuf::Message for Fixture {
    fn is_initialized(&self) -> bool {
        for v in &self.controls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.children {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mode)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.universe = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel_count = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.controls)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.children)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manufacturer);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.model);
        }
        if !self.mode.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.mode);
        }
        if self.universe != 0 {
            my_size += ::protobuf::rt::value_size(6, self.universe, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel != 0 {
            my_size += ::protobuf::rt::value_size(7, self.channel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.channel_count != 0 {
            my_size += ::protobuf::rt::value_size(8, self.channel_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.controls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(3, &self.manufacturer)?;
        }
        if !self.model.is_empty() {
            os.write_string(4, &self.model)?;
        }
        if !self.mode.is_empty() {
            os.write_string(5, &self.mode)?;
        }
        if self.universe != 0 {
            os.write_uint32(6, self.universe)?;
        }
        if self.channel != 0 {
            os.write_uint32(7, self.channel)?;
        }
        if self.channel_count != 0 {
            os.write_uint32(8, self.channel_count)?;
        }
        for v in &self.controls {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.children {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fixture {
        Fixture::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &Fixture| { &m.id },
                |m: &mut Fixture| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Fixture| { &m.name },
                |m: &mut Fixture| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "manufacturer",
                |m: &Fixture| { &m.manufacturer },
                |m: &mut Fixture| { &mut m.manufacturer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "model",
                |m: &Fixture| { &m.model },
                |m: &mut Fixture| { &mut m.model },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mode",
                |m: &Fixture| { &m.mode },
                |m: &mut Fixture| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "universe",
                |m: &Fixture| { &m.universe },
                |m: &mut Fixture| { &mut m.universe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel",
                |m: &Fixture| { &m.channel },
                |m: &mut Fixture| { &mut m.channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel_count",
                |m: &Fixture| { &m.channel_count },
                |m: &mut Fixture| { &mut m.channel_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureControls>>(
                "controls",
                |m: &Fixture| { &m.controls },
                |m: &mut Fixture| { &mut m.controls },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SubFixture>>(
                "children",
                |m: &Fixture| { &m.children },
                |m: &mut Fixture| { &mut m.children },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureConfig>>(
                "config",
                |m: &Fixture| { &m.config },
                |m: &mut Fixture| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fixture>(
                "Fixture",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fixture {
        static instance: ::protobuf::rt::LazyV2<Fixture> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fixture::new)
    }
}

impl ::protobuf::Clear for Fixture {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.manufacturer.clear();
        self.model.clear();
        self.mode.clear();
        self.universe = 0;
        self.channel = 0;
        self.channel_count = 0;
        self.controls.clear();
        self.children.clear();
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fixture {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixture {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureConfig {
    // message fields
    pub invert_pan: bool,
    pub invert_tilt: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureConfig {
    fn default() -> &'a FixtureConfig {
        <FixtureConfig as ::protobuf::Message>::default_instance()
    }
}

impl FixtureConfig {
    pub fn new() -> FixtureConfig {
        ::std::default::Default::default()
    }

    // bool invert_pan = 1;


    pub fn get_invert_pan(&self) -> bool {
        self.invert_pan
    }
    pub fn clear_invert_pan(&mut self) {
        self.invert_pan = false;
    }

    // Param is passed by value, moved
    pub fn set_invert_pan(&mut self, v: bool) {
        self.invert_pan = v;
    }

    // bool invert_tilt = 2;


    pub fn get_invert_tilt(&self) -> bool {
        self.invert_tilt
    }
    pub fn clear_invert_tilt(&mut self) {
        self.invert_tilt = false;
    }

    // Param is passed by value, moved
    pub fn set_invert_tilt(&mut self, v: bool) {
        self.invert_tilt = v;
    }
}

impl ::protobuf::Message for FixtureConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invert_pan = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invert_tilt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.invert_pan != false {
            my_size += 2;
        }
        if self.invert_tilt != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.invert_pan != false {
            os.write_bool(1, self.invert_pan)?;
        }
        if self.invert_tilt != false {
            os.write_bool(2, self.invert_tilt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureConfig {
        FixtureConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invert_pan",
                |m: &FixtureConfig| { &m.invert_pan },
                |m: &mut FixtureConfig| { &mut m.invert_pan },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invert_tilt",
                |m: &FixtureConfig| { &m.invert_tilt },
                |m: &mut FixtureConfig| { &mut m.invert_tilt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureConfig>(
                "FixtureConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureConfig {
        static instance: ::protobuf::rt::LazyV2<FixtureConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureConfig::new)
    }
}

impl ::protobuf::Clear for FixtureConfig {
    fn clear(&mut self) {
        self.invert_pan = false;
        self.invert_tilt = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SubFixture {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub controls: ::protobuf::RepeatedField<FixtureControls>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubFixture {
    fn default() -> &'a SubFixture {
        <SubFixture as ::protobuf::Message>::default_instance()
    }
}

impl SubFixture {
    pub fn new() -> SubFixture {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .mizer.fixtures.FixtureControls controls = 3;


    pub fn get_controls(&self) -> &[FixtureControls] {
        &self.controls
    }
    pub fn clear_controls(&mut self) {
        self.controls.clear();
    }

    // Param is passed by value, moved
    pub fn set_controls(&mut self, v: ::protobuf::RepeatedField<FixtureControls>) {
        self.controls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_controls(&mut self) -> &mut ::protobuf::RepeatedField<FixtureControls> {
        &mut self.controls
    }

    // Take field
    pub fn take_controls(&mut self) -> ::protobuf::RepeatedField<FixtureControls> {
        ::std::mem::replace(&mut self.controls, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SubFixture {
    fn is_initialized(&self) -> bool {
        for v in &self.controls {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.controls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.controls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.controls {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubFixture {
        SubFixture::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &SubFixture| { &m.id },
                |m: &mut SubFixture| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SubFixture| { &m.name },
                |m: &mut SubFixture| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureControls>>(
                "controls",
                |m: &SubFixture| { &m.controls },
                |m: &mut SubFixture| { &mut m.controls },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubFixture>(
                "SubFixture",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubFixture {
        static instance: ::protobuf::rt::LazyV2<SubFixture> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubFixture::new)
    }
}

impl ::protobuf::Clear for SubFixture {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.controls.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubFixture {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubFixture {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureControls {
    // message fields
    pub control: FixtureControl,
    // message oneof groups
    pub value: ::std::option::Option<FixtureControls_oneof_value>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureControls {
    fn default() -> &'a FixtureControls {
        <FixtureControls as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureControls_oneof_value {
    fader(FaderChannel),
    color_mixer(ColorMixerChannel),
    color_wheel(ColorWheelChannel),
    axis(AxisChannel),
    gobo(GoboChannel),
    generic(GenericChannel),
}

impl FixtureControls {
    pub fn new() -> FixtureControls {
        ::std::default::Default::default()
    }

    // .mizer.fixtures.FixtureControl control = 1;


    pub fn get_control(&self) -> FixtureControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = FixtureControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: FixtureControl) {
        self.control = v;
    }

    // .mizer.fixtures.FaderChannel fader = 2;


    pub fn get_fader(&self) -> &FaderChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::fader(ref v)) => v,
            _ => <FaderChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fader(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_fader(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::fader(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fader(&mut self, v: FaderChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::fader(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fader(&mut self) -> &mut FaderChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::fader(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::fader(FaderChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::fader(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fader(&mut self) -> FaderChannel {
        if self.has_fader() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::fader(v)) => v,
                _ => panic!(),
            }
        } else {
            FaderChannel::new()
        }
    }

    // .mizer.fixtures.ColorMixerChannel color_mixer = 3;


    pub fn get_color_mixer(&self) -> &ColorMixerChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(ref v)) => v,
            _ => <ColorMixerChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_color_mixer(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_color_mixer(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color_mixer(&mut self, v: ColorMixerChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_color_mixer(&mut self) -> &mut ColorMixerChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(ColorMixerChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_color_mixer(&mut self) -> ColorMixerChannel {
        if self.has_color_mixer() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(v)) => v,
                _ => panic!(),
            }
        } else {
            ColorMixerChannel::new()
        }
    }

    // .mizer.fixtures.ColorWheelChannel color_wheel = 4;


    pub fn get_color_wheel(&self) -> &ColorWheelChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(ref v)) => v,
            _ => <ColorWheelChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_color_wheel(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_color_wheel(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color_wheel(&mut self, v: ColorWheelChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_color_wheel(&mut self) -> &mut ColorWheelChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(ColorWheelChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_color_wheel(&mut self) -> ColorWheelChannel {
        if self.has_color_wheel() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(v)) => v,
                _ => panic!(),
            }
        } else {
            ColorWheelChannel::new()
        }
    }

    // .mizer.fixtures.AxisChannel axis = 5;


    pub fn get_axis(&self) -> &AxisChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::axis(ref v)) => v,
            _ => <AxisChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_axis(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_axis(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::axis(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_axis(&mut self, v: AxisChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::axis(v))
    }

    // Mutable pointer to the field.
    pub fn mut_axis(&mut self) -> &mut AxisChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::axis(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::axis(AxisChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::axis(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_axis(&mut self) -> AxisChannel {
        if self.has_axis() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::axis(v)) => v,
                _ => panic!(),
            }
        } else {
            AxisChannel::new()
        }
    }

    // .mizer.fixtures.GoboChannel gobo = 6;


    pub fn get_gobo(&self) -> &GoboChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::gobo(ref v)) => v,
            _ => <GoboChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_gobo(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_gobo(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::gobo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gobo(&mut self, v: GoboChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::gobo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gobo(&mut self) -> &mut GoboChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::gobo(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::gobo(GoboChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::gobo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gobo(&mut self) -> GoboChannel {
        if self.has_gobo() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::gobo(v)) => v,
                _ => panic!(),
            }
        } else {
            GoboChannel::new()
        }
    }

    // .mizer.fixtures.GenericChannel generic = 7;


    pub fn get_generic(&self) -> &GenericChannel {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::generic(ref v)) => v,
            _ => <GenericChannel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_generic(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_generic(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::generic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic(&mut self, v: GenericChannel) {
        self.value = ::std::option::Option::Some(FixtureControls_oneof_value::generic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic(&mut self) -> &mut GenericChannel {
        if let ::std::option::Option::Some(FixtureControls_oneof_value::generic(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(FixtureControls_oneof_value::generic(GenericChannel::new()));
        }
        match self.value {
            ::std::option::Option::Some(FixtureControls_oneof_value::generic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic(&mut self) -> GenericChannel {
        if self.has_generic() {
            match self.value.take() {
                ::std::option::Option::Some(FixtureControls_oneof_value::generic(v)) => v,
                _ => panic!(),
            }
        } else {
            GenericChannel::new()
        }
    }
}

impl ::protobuf::Message for FixtureControls {
    fn is_initialized(&self) -> bool {
        if let Some(FixtureControls_oneof_value::fader(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureControls_oneof_value::color_mixer(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureControls_oneof_value::color_wheel(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureControls_oneof_value::axis(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureControls_oneof_value::gobo(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureControls_oneof_value::generic(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::fader(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_mixer(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::color_wheel(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::axis(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::gobo(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(FixtureControls_oneof_value::generic(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.control != FixtureControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(1, self.control);
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &FixtureControls_oneof_value::fader(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureControls_oneof_value::color_mixer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureControls_oneof_value::color_wheel(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureControls_oneof_value::axis(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureControls_oneof_value::gobo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureControls_oneof_value::generic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.control != FixtureControl::INTENSITY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &FixtureControls_oneof_value::fader(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureControls_oneof_value::color_mixer(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureControls_oneof_value::color_wheel(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureControls_oneof_value::axis(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureControls_oneof_value::gobo(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureControls_oneof_value::generic(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureControls {
        FixtureControls::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FixtureControl>>(
                "control",
                |m: &FixtureControls| { &m.control },
                |m: &mut FixtureControls| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FaderChannel>(
                "fader",
                FixtureControls::has_fader,
                FixtureControls::get_fader,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ColorMixerChannel>(
                "color_mixer",
                FixtureControls::has_color_mixer,
                FixtureControls::get_color_mixer,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ColorWheelChannel>(
                "color_wheel",
                FixtureControls::has_color_wheel,
                FixtureControls::get_color_wheel,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AxisChannel>(
                "axis",
                FixtureControls::has_axis,
                FixtureControls::get_axis,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GoboChannel>(
                "gobo",
                FixtureControls::has_gobo,
                FixtureControls::get_gobo,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GenericChannel>(
                "generic",
                FixtureControls::has_generic,
                FixtureControls::get_generic,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureControls>(
                "FixtureControls",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureControls {
        static instance: ::protobuf::rt::LazyV2<FixtureControls> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureControls::new)
    }
}

impl ::protobuf::Clear for FixtureControls {
    fn clear(&mut self) {
        self.control = FixtureControl::INTENSITY;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureControls {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureControls {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FaderChannel {
    // message fields
    pub value: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaderChannel {
    fn default() -> &'a FaderChannel {
        <FaderChannel as ::protobuf::Message>::default_instance()
    }
}

impl FaderChannel {
    pub fn new() -> FaderChannel {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for FaderChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaderChannel {
        FaderChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &FaderChannel| { &m.value },
                |m: &mut FaderChannel| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaderChannel>(
                "FaderChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaderChannel {
        static instance: ::protobuf::rt::LazyV2<FaderChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaderChannel::new)
    }
}

impl ::protobuf::Clear for FaderChannel {
    fn clear(&mut self) {
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaderChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaderChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ColorMixerChannel {
    // message fields
    pub red: f64,
    pub green: f64,
    pub blue: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColorMixerChannel {
    fn default() -> &'a ColorMixerChannel {
        <ColorMixerChannel as ::protobuf::Message>::default_instance()
    }
}

impl ColorMixerChannel {
    pub fn new() -> ColorMixerChannel {
        ::std::default::Default::default()
    }

    // double red = 1;


    pub fn get_red(&self) -> f64 {
        self.red
    }
    pub fn clear_red(&mut self) {
        self.red = 0.;
    }

    // Param is passed by value, moved
    pub fn set_red(&mut self, v: f64) {
        self.red = v;
    }

    // double green = 2;


    pub fn get_green(&self) -> f64 {
        self.green
    }
    pub fn clear_green(&mut self) {
        self.green = 0.;
    }

    // Param is passed by value, moved
    pub fn set_green(&mut self, v: f64) {
        self.green = v;
    }

    // double blue = 3;


    pub fn get_blue(&self) -> f64 {
        self.blue
    }
    pub fn clear_blue(&mut self) {
        self.blue = 0.;
    }

    // Param is passed by value, moved
    pub fn set_blue(&mut self, v: f64) {
        self.blue = v;
    }
}

impl ::protobuf::Message for ColorMixerChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.red = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.green = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.blue = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.red != 0. {
            my_size += 9;
        }
        if self.green != 0. {
            my_size += 9;
        }
        if self.blue != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.red != 0. {
            os.write_double(1, self.red)?;
        }
        if self.green != 0. {
            os.write_double(2, self.green)?;
        }
        if self.blue != 0. {
            os.write_double(3, self.blue)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColorMixerChannel {
        ColorMixerChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "red",
                |m: &ColorMixerChannel| { &m.red },
                |m: &mut ColorMixerChannel| { &mut m.red },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "green",
                |m: &ColorMixerChannel| { &m.green },
                |m: &mut ColorMixerChannel| { &mut m.green },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "blue",
                |m: &ColorMixerChannel| { &m.blue },
                |m: &mut ColorMixerChannel| { &mut m.blue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColorMixerChannel>(
                "ColorMixerChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColorMixerChannel {
        static instance: ::protobuf::rt::LazyV2<ColorMixerChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColorMixerChannel::new)
    }
}

impl ::protobuf::Clear for ColorMixerChannel {
    fn clear(&mut self) {
        self.red = 0.;
        self.green = 0.;
        self.blue = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColorMixerChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColorMixerChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ColorWheelChannel {
    // message fields
    pub value: f64,
    pub colors: ::protobuf::RepeatedField<ColorWheelSlot>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColorWheelChannel {
    fn default() -> &'a ColorWheelChannel {
        <ColorWheelChannel as ::protobuf::Message>::default_instance()
    }
}

impl ColorWheelChannel {
    pub fn new() -> ColorWheelChannel {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // repeated .mizer.fixtures.ColorWheelSlot colors = 2;


    pub fn get_colors(&self) -> &[ColorWheelSlot] {
        &self.colors
    }
    pub fn clear_colors(&mut self) {
        self.colors.clear();
    }

    // Param is passed by value, moved
    pub fn set_colors(&mut self, v: ::protobuf::RepeatedField<ColorWheelSlot>) {
        self.colors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_colors(&mut self) -> &mut ::protobuf::RepeatedField<ColorWheelSlot> {
        &mut self.colors
    }

    // Take field
    pub fn take_colors(&mut self) -> ::protobuf::RepeatedField<ColorWheelSlot> {
        ::std::mem::replace(&mut self.colors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ColorWheelChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.colors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.colors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        for value in &self.colors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        for v in &self.colors {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColorWheelChannel {
        ColorWheelChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &ColorWheelChannel| { &m.value },
                |m: &mut ColorWheelChannel| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ColorWheelSlot>>(
                "colors",
                |m: &ColorWheelChannel| { &m.colors },
                |m: &mut ColorWheelChannel| { &mut m.colors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColorWheelChannel>(
                "ColorWheelChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColorWheelChannel {
        static instance: ::protobuf::rt::LazyV2<ColorWheelChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColorWheelChannel::new)
    }
}

impl ::protobuf::Clear for ColorWheelChannel {
    fn clear(&mut self) {
        self.value = 0.;
        self.colors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColorWheelChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColorWheelChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ColorWheelSlot {
    // message fields
    pub name: ::std::string::String,
    pub value: f64,
    pub colors: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ColorWheelSlot {
    fn default() -> &'a ColorWheelSlot {
        <ColorWheelSlot as ::protobuf::Message>::default_instance()
    }
}

impl ColorWheelSlot {
    pub fn new() -> ColorWheelSlot {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // repeated string colors = 3;


    pub fn get_colors(&self) -> &[::std::string::String] {
        &self.colors
    }
    pub fn clear_colors(&mut self) {
        self.colors.clear();
    }

    // Param is passed by value, moved
    pub fn set_colors(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.colors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_colors(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.colors
    }

    // Take field
    pub fn take_colors(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.colors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ColorWheelSlot {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.colors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0. {
            my_size += 9;
        }
        for value in &self.colors {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        for v in &self.colors {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ColorWheelSlot {
        ColorWheelSlot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ColorWheelSlot| { &m.name },
                |m: &mut ColorWheelSlot| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &ColorWheelSlot| { &m.value },
                |m: &mut ColorWheelSlot| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "colors",
                |m: &ColorWheelSlot| { &m.colors },
                |m: &mut ColorWheelSlot| { &mut m.colors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ColorWheelSlot>(
                "ColorWheelSlot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ColorWheelSlot {
        static instance: ::protobuf::rt::LazyV2<ColorWheelSlot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ColorWheelSlot::new)
    }
}

impl ::protobuf::Clear for ColorWheelSlot {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0.;
        self.colors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ColorWheelSlot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ColorWheelSlot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AxisChannel {
    // message fields
    pub value: f64,
    pub angle_from: f64,
    pub angle_to: f64,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AxisChannel {
    fn default() -> &'a AxisChannel {
        <AxisChannel as ::protobuf::Message>::default_instance()
    }
}

impl AxisChannel {
    pub fn new() -> AxisChannel {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // double angle_from = 2;


    pub fn get_angle_from(&self) -> f64 {
        self.angle_from
    }
    pub fn clear_angle_from(&mut self) {
        self.angle_from = 0.;
    }

    // Param is passed by value, moved
    pub fn set_angle_from(&mut self, v: f64) {
        self.angle_from = v;
    }

    // double angle_to = 3;


    pub fn get_angle_to(&self) -> f64 {
        self.angle_to
    }
    pub fn clear_angle_to(&mut self) {
        self.angle_to = 0.;
    }

    // Param is passed by value, moved
    pub fn set_angle_to(&mut self, v: f64) {
        self.angle_to = v;
    }
}

impl ::protobuf::Message for AxisChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.angle_from = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.angle_to = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        if self.angle_from != 0. {
            my_size += 9;
        }
        if self.angle_to != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if self.angle_from != 0. {
            os.write_double(2, self.angle_from)?;
        }
        if self.angle_to != 0. {
            os.write_double(3, self.angle_to)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AxisChannel {
        AxisChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &AxisChannel| { &m.value },
                |m: &mut AxisChannel| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "angle_from",
                |m: &AxisChannel| { &m.angle_from },
                |m: &mut AxisChannel| { &mut m.angle_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "angle_to",
                |m: &AxisChannel| { &m.angle_to },
                |m: &mut AxisChannel| { &mut m.angle_to },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AxisChannel>(
                "AxisChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AxisChannel {
        static instance: ::protobuf::rt::LazyV2<AxisChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AxisChannel::new)
    }
}

impl ::protobuf::Clear for AxisChannel {
    fn clear(&mut self) {
        self.value = 0.;
        self.angle_from = 0.;
        self.angle_to = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AxisChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AxisChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GoboChannel {
    // message fields
    pub value: f64,
    pub gobos: ::protobuf::RepeatedField<Gobo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GoboChannel {
    fn default() -> &'a GoboChannel {
        <GoboChannel as ::protobuf::Message>::default_instance()
    }
}

impl GoboChannel {
    pub fn new() -> GoboChannel {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // repeated .mizer.fixtures.Gobo gobos = 2;


    pub fn get_gobos(&self) -> &[Gobo] {
        &self.gobos
    }
    pub fn clear_gobos(&mut self) {
        self.gobos.clear();
    }

    // Param is passed by value, moved
    pub fn set_gobos(&mut self, v: ::protobuf::RepeatedField<Gobo>) {
        self.gobos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_gobos(&mut self) -> &mut ::protobuf::RepeatedField<Gobo> {
        &mut self.gobos
    }

    // Take field
    pub fn take_gobos(&mut self) -> ::protobuf::RepeatedField<Gobo> {
        ::std::mem::replace(&mut self.gobos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GoboChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.gobos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.gobos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        for value in &self.gobos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        for v in &self.gobos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GoboChannel {
        GoboChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &GoboChannel| { &m.value },
                |m: &mut GoboChannel| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gobo>>(
                "gobos",
                |m: &GoboChannel| { &m.gobos },
                |m: &mut GoboChannel| { &mut m.gobos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GoboChannel>(
                "GoboChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GoboChannel {
        static instance: ::protobuf::rt::LazyV2<GoboChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GoboChannel::new)
    }
}

impl ::protobuf::Clear for GoboChannel {
    fn clear(&mut self) {
        self.value = 0.;
        self.gobos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GoboChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GoboChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Gobo {
    // message fields
    pub name: ::std::string::String,
    pub value: f64,
    // message oneof groups
    pub image: ::std::option::Option<Gobo_oneof_image>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gobo {
    fn default() -> &'a Gobo {
        <Gobo as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Gobo_oneof_image {
    svg(::std::string::String),
    raster(::std::vec::Vec<u8>),
}

impl Gobo {
    pub fn new() -> Gobo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // string svg = 3;


    pub fn get_svg(&self) -> &str {
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::svg(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_svg(&mut self) {
        self.image = ::std::option::Option::None;
    }

    pub fn has_svg(&self) -> bool {
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::svg(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_svg(&mut self, v: ::std::string::String) {
        self.image = ::std::option::Option::Some(Gobo_oneof_image::svg(v))
    }

    // Mutable pointer to the field.
    pub fn mut_svg(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Gobo_oneof_image::svg(_)) = self.image {
        } else {
            self.image = ::std::option::Option::Some(Gobo_oneof_image::svg(::std::string::String::new()));
        }
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::svg(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_svg(&mut self) -> ::std::string::String {
        if self.has_svg() {
            match self.image.take() {
                ::std::option::Option::Some(Gobo_oneof_image::svg(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes raster = 4;


    pub fn get_raster(&self) -> &[u8] {
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::raster(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_raster(&mut self) {
        self.image = ::std::option::Option::None;
    }

    pub fn has_raster(&self) -> bool {
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::raster(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raster(&mut self, v: ::std::vec::Vec<u8>) {
        self.image = ::std::option::Option::Some(Gobo_oneof_image::raster(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raster(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Gobo_oneof_image::raster(_)) = self.image {
        } else {
            self.image = ::std::option::Option::Some(Gobo_oneof_image::raster(::std::vec::Vec::new()));
        }
        match self.image {
            ::std::option::Option::Some(Gobo_oneof_image::raster(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raster(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_raster() {
            match self.image.take() {
                ::std::option::Option::Some(Gobo_oneof_image::raster(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for Gobo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.image = ::std::option::Option::Some(Gobo_oneof_image::svg(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.image = ::std::option::Option::Some(Gobo_oneof_image::raster(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0. {
            my_size += 9;
        }
        if let ::std::option::Option::Some(ref v) = self.image {
            match v {
                &Gobo_oneof_image::svg(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &Gobo_oneof_image::raster(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        if let ::std::option::Option::Some(ref v) = self.image {
            match v {
                &Gobo_oneof_image::svg(ref v) => {
                    os.write_string(3, v)?;
                },
                &Gobo_oneof_image::raster(ref v) => {
                    os.write_bytes(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gobo {
        Gobo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Gobo| { &m.name },
                |m: &mut Gobo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &Gobo| { &m.value },
                |m: &mut Gobo| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "svg",
                Gobo::has_svg,
                Gobo::get_svg,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "raster",
                Gobo::has_raster,
                Gobo::get_raster,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Gobo>(
                "Gobo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Gobo {
        static instance: ::protobuf::rt::LazyV2<Gobo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gobo::new)
    }
}

impl ::protobuf::Clear for Gobo {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0.;
        self.image = ::std::option::Option::None;
        self.image = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gobo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gobo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GenericChannel {
    // message fields
    pub value: f64,
    pub name: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericChannel {
    fn default() -> &'a GenericChannel {
        <GenericChannel as ::protobuf::Message>::default_instance()
    }
}

impl GenericChannel {
    pub fn new() -> GenericChannel {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenericChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericChannel {
        GenericChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &GenericChannel| { &m.value },
                |m: &mut GenericChannel| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GenericChannel| { &m.name },
                |m: &mut GenericChannel| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenericChannel>(
                "GenericChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenericChannel {
        static instance: ::protobuf::rt::LazyV2<GenericChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericChannel::new)
    }
}

impl ::protobuf::Clear for GenericChannel {
    fn clear(&mut self) {
        self.value = 0.;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenericChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct GetFixtureDefinitionsRequest {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFixtureDefinitionsRequest {
    fn default() -> &'a GetFixtureDefinitionsRequest {
        <GetFixtureDefinitionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetFixtureDefinitionsRequest {
    pub fn new() -> GetFixtureDefinitionsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetFixtureDefinitionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFixtureDefinitionsRequest {
        GetFixtureDefinitionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetFixtureDefinitionsRequest>(
                "GetFixtureDefinitionsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetFixtureDefinitionsRequest {
        static instance: ::protobuf::rt::LazyV2<GetFixtureDefinitionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetFixtureDefinitionsRequest::new)
    }
}

impl ::protobuf::Clear for GetFixtureDefinitionsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetFixtureDefinitionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFixtureDefinitionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureDefinitions {
    // message fields
    pub definitions: ::protobuf::RepeatedField<FixtureDefinition>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureDefinitions {
    fn default() -> &'a FixtureDefinitions {
        <FixtureDefinitions as ::protobuf::Message>::default_instance()
    }
}

impl FixtureDefinitions {
    pub fn new() -> FixtureDefinitions {
        ::std::default::Default::default()
    }

    // repeated .mizer.fixtures.FixtureDefinition definitions = 1;


    pub fn get_definitions(&self) -> &[FixtureDefinition] {
        &self.definitions
    }
    pub fn clear_definitions(&mut self) {
        self.definitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_definitions(&mut self, v: ::protobuf::RepeatedField<FixtureDefinition>) {
        self.definitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_definitions(&mut self) -> &mut ::protobuf::RepeatedField<FixtureDefinition> {
        &mut self.definitions
    }

    // Take field
    pub fn take_definitions(&mut self) -> ::protobuf::RepeatedField<FixtureDefinition> {
        ::std::mem::replace(&mut self.definitions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FixtureDefinitions {
    fn is_initialized(&self) -> bool {
        for v in &self.definitions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.definitions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.definitions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.definitions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureDefinitions {
        FixtureDefinitions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureDefinition>>(
                "definitions",
                |m: &FixtureDefinitions| { &m.definitions },
                |m: &mut FixtureDefinitions| { &mut m.definitions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureDefinitions>(
                "FixtureDefinitions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureDefinitions {
        static instance: ::protobuf::rt::LazyV2<FixtureDefinitions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureDefinitions::new)
    }
}

impl ::protobuf::Clear for FixtureDefinitions {
    fn clear(&mut self) {
        self.definitions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureDefinitions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureDefinitions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureDefinition {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub manufacturer: ::std::string::String,
    pub modes: ::protobuf::RepeatedField<FixtureMode>,
    pub physical: ::protobuf::SingularPtrField<FixturePhysicalData>,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    pub provider: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureDefinition {
    fn default() -> &'a FixtureDefinition {
        <FixtureDefinition as ::protobuf::Message>::default_instance()
    }
}

impl FixtureDefinition {
    pub fn new() -> FixtureDefinition {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string manufacturer = 3;


    pub fn get_manufacturer(&self) -> &str {
        &self.manufacturer
    }
    pub fn clear_manufacturer(&mut self) {
        self.manufacturer.clear();
    }

    // Param is passed by value, moved
    pub fn set_manufacturer(&mut self, v: ::std::string::String) {
        self.manufacturer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manufacturer(&mut self) -> &mut ::std::string::String {
        &mut self.manufacturer
    }

    // Take field
    pub fn take_manufacturer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manufacturer, ::std::string::String::new())
    }

    // repeated .mizer.fixtures.FixtureMode modes = 4;


    pub fn get_modes(&self) -> &[FixtureMode] {
        &self.modes
    }
    pub fn clear_modes(&mut self) {
        self.modes.clear();
    }

    // Param is passed by value, moved
    pub fn set_modes(&mut self, v: ::protobuf::RepeatedField<FixtureMode>) {
        self.modes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_modes(&mut self) -> &mut ::protobuf::RepeatedField<FixtureMode> {
        &mut self.modes
    }

    // Take field
    pub fn take_modes(&mut self) -> ::protobuf::RepeatedField<FixtureMode> {
        ::std::mem::replace(&mut self.modes, ::protobuf::RepeatedField::new())
    }

    // .mizer.fixtures.FixturePhysicalData physical = 5;


    pub fn get_physical(&self) -> &FixturePhysicalData {
        self.physical.as_ref().unwrap_or_else(|| <FixturePhysicalData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_physical(&mut self) {
        self.physical.clear();
    }

    pub fn has_physical(&self) -> bool {
        self.physical.is_some()
    }

    // Param is passed by value, moved
    pub fn set_physical(&mut self, v: FixturePhysicalData) {
        self.physical = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_physical(&mut self) -> &mut FixturePhysicalData {
        if self.physical.is_none() {
            self.physical.set_default();
        }
        self.physical.as_mut().unwrap()
    }

    // Take field
    pub fn take_physical(&mut self) -> FixturePhysicalData {
        self.physical.take().unwrap_or_else(|| FixturePhysicalData::new())
    }

    // repeated string tags = 6;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }

    // string provider = 7;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FixtureDefinition {
    fn is_initialized(&self) -> bool {
        for v in &self.modes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.physical {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manufacturer)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.modes)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.physical)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.manufacturer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.manufacturer);
        }
        for value in &self.modes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.physical.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.provider);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.manufacturer.is_empty() {
            os.write_string(3, &self.manufacturer)?;
        }
        for v in &self.modes {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.physical.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tags {
            os.write_string(6, &v)?;
        };
        if !self.provider.is_empty() {
            os.write_string(7, &self.provider)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureDefinition {
        FixtureDefinition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &FixtureDefinition| { &m.id },
                |m: &mut FixtureDefinition| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FixtureDefinition| { &m.name },
                |m: &mut FixtureDefinition| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "manufacturer",
                |m: &FixtureDefinition| { &m.manufacturer },
                |m: &mut FixtureDefinition| { &mut m.manufacturer },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureMode>>(
                "modes",
                |m: &FixtureDefinition| { &m.modes },
                |m: &mut FixtureDefinition| { &mut m.modes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixturePhysicalData>>(
                "physical",
                |m: &FixtureDefinition| { &m.physical },
                |m: &mut FixtureDefinition| { &mut m.physical },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &FixtureDefinition| { &m.tags },
                |m: &mut FixtureDefinition| { &mut m.tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider",
                |m: &FixtureDefinition| { &m.provider },
                |m: &mut FixtureDefinition| { &mut m.provider },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureDefinition>(
                "FixtureDefinition",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureDefinition {
        static instance: ::protobuf::rt::LazyV2<FixtureDefinition> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureDefinition::new)
    }
}

impl ::protobuf::Clear for FixtureDefinition {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.manufacturer.clear();
        self.modes.clear();
        self.physical.clear();
        self.tags.clear();
        self.provider.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureDefinition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureMode {
    // message fields
    pub name: ::std::string::String,
    pub channels: ::protobuf::RepeatedField<FixtureChannel>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureMode {
    fn default() -> &'a FixtureMode {
        <FixtureMode as ::protobuf::Message>::default_instance()
    }
}

impl FixtureMode {
    pub fn new() -> FixtureMode {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .mizer.fixtures.FixtureChannel channels = 2;


    pub fn get_channels(&self) -> &[FixtureChannel] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::protobuf::RepeatedField<FixtureChannel>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::protobuf::RepeatedField<FixtureChannel> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::protobuf::RepeatedField<FixtureChannel> {
        ::std::mem::replace(&mut self.channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FixtureMode {
    fn is_initialized(&self) -> bool {
        for v in &self.channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.channels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureMode {
        FixtureMode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FixtureMode| { &m.name },
                |m: &mut FixtureMode| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FixtureChannel>>(
                "channels",
                |m: &FixtureMode| { &m.channels },
                |m: &mut FixtureMode| { &mut m.channels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureMode>(
                "FixtureMode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureMode {
        static instance: ::protobuf::rt::LazyV2<FixtureMode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureMode::new)
    }
}

impl ::protobuf::Clear for FixtureMode {
    fn clear(&mut self) {
        self.name.clear();
        self.channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureChannel {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub resolution: ::std::option::Option<FixtureChannel_oneof_resolution>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureChannel {
    fn default() -> &'a FixtureChannel {
        <FixtureChannel as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureChannel_oneof_resolution {
    coarse(FixtureChannel_CoarseResolution),
    fine(FixtureChannel_FineResolution),
    finest(FixtureChannel_FinestResolution),
}

impl FixtureChannel {
    pub fn new() -> FixtureChannel {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .mizer.fixtures.FixtureChannel.CoarseResolution coarse = 2;


    pub fn get_coarse(&self) -> &FixtureChannel_CoarseResolution {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(ref v)) => v,
            _ => <FixtureChannel_CoarseResolution as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_coarse(&mut self) {
        self.resolution = ::std::option::Option::None;
    }

    pub fn has_coarse(&self) -> bool {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_coarse(&mut self, v: FixtureChannel_CoarseResolution) {
        self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_coarse(&mut self) -> &mut FixtureChannel_CoarseResolution {
        if let ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(_)) = self.resolution {
        } else {
            self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(FixtureChannel_CoarseResolution::new()));
        }
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_coarse(&mut self) -> FixtureChannel_CoarseResolution {
        if self.has_coarse() {
            match self.resolution.take() {
                ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(v)) => v,
                _ => panic!(),
            }
        } else {
            FixtureChannel_CoarseResolution::new()
        }
    }

    // .mizer.fixtures.FixtureChannel.FineResolution fine = 3;


    pub fn get_fine(&self) -> &FixtureChannel_FineResolution {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(ref v)) => v,
            _ => <FixtureChannel_FineResolution as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fine(&mut self) {
        self.resolution = ::std::option::Option::None;
    }

    pub fn has_fine(&self) -> bool {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fine(&mut self, v: FixtureChannel_FineResolution) {
        self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fine(&mut self) -> &mut FixtureChannel_FineResolution {
        if let ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(_)) = self.resolution {
        } else {
            self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(FixtureChannel_FineResolution::new()));
        }
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fine(&mut self) -> FixtureChannel_FineResolution {
        if self.has_fine() {
            match self.resolution.take() {
                ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(v)) => v,
                _ => panic!(),
            }
        } else {
            FixtureChannel_FineResolution::new()
        }
    }

    // .mizer.fixtures.FixtureChannel.FinestResolution finest = 4;


    pub fn get_finest(&self) -> &FixtureChannel_FinestResolution {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(ref v)) => v,
            _ => <FixtureChannel_FinestResolution as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_finest(&mut self) {
        self.resolution = ::std::option::Option::None;
    }

    pub fn has_finest(&self) -> bool {
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_finest(&mut self, v: FixtureChannel_FinestResolution) {
        self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_finest(&mut self) -> &mut FixtureChannel_FinestResolution {
        if let ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(_)) = self.resolution {
        } else {
            self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(FixtureChannel_FinestResolution::new()));
        }
        match self.resolution {
            ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_finest(&mut self) -> FixtureChannel_FinestResolution {
        if self.has_finest() {
            match self.resolution.take() {
                ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(v)) => v,
                _ => panic!(),
            }
        } else {
            FixtureChannel_FinestResolution::new()
        }
    }
}

impl ::protobuf::Message for FixtureChannel {
    fn is_initialized(&self) -> bool {
        if let Some(FixtureChannel_oneof_resolution::coarse(ref v)) = self.resolution {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureChannel_oneof_resolution::fine(ref v)) = self.resolution {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FixtureChannel_oneof_resolution::finest(ref v)) = self.resolution {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::coarse(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::fine(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resolution = ::std::option::Option::Some(FixtureChannel_oneof_resolution::finest(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.resolution {
            match v {
                &FixtureChannel_oneof_resolution::coarse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureChannel_oneof_resolution::fine(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FixtureChannel_oneof_resolution::finest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.resolution {
            match v {
                &FixtureChannel_oneof_resolution::coarse(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureChannel_oneof_resolution::fine(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FixtureChannel_oneof_resolution::finest(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureChannel {
        FixtureChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FixtureChannel| { &m.name },
                |m: &mut FixtureChannel| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FixtureChannel_CoarseResolution>(
                "coarse",
                FixtureChannel::has_coarse,
                FixtureChannel::get_coarse,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FixtureChannel_FineResolution>(
                "fine",
                FixtureChannel::has_fine,
                FixtureChannel::get_fine,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FixtureChannel_FinestResolution>(
                "finest",
                FixtureChannel::has_finest,
                FixtureChannel::get_finest,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureChannel>(
                "FixtureChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureChannel {
        static instance: ::protobuf::rt::LazyV2<FixtureChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureChannel::new)
    }
}

impl ::protobuf::Clear for FixtureChannel {
    fn clear(&mut self) {
        self.name.clear();
        self.resolution = ::std::option::Option::None;
        self.resolution = ::std::option::Option::None;
        self.resolution = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureChannel_CoarseResolution {
    // message fields
    pub channel: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureChannel_CoarseResolution {
    fn default() -> &'a FixtureChannel_CoarseResolution {
        <FixtureChannel_CoarseResolution as ::protobuf::Message>::default_instance()
    }
}

impl FixtureChannel_CoarseResolution {
    pub fn new() -> FixtureChannel_CoarseResolution {
        ::std::default::Default::default()
    }

    // uint32 channel = 1;


    pub fn get_channel(&self) -> u32 {
        self.channel
    }
    pub fn clear_channel(&mut self) {
        self.channel = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel(&mut self, v: u32) {
        self.channel = v;
    }
}

impl ::protobuf::Message for FixtureChannel_CoarseResolution {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.channel = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.channel != 0 {
            my_size += ::protobuf::rt::value_size(1, self.channel, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.channel != 0 {
            os.write_uint32(1, self.channel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureChannel_CoarseResolution {
        FixtureChannel_CoarseResolution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "channel",
                |m: &FixtureChannel_CoarseResolution| { &m.channel },
                |m: &mut FixtureChannel_CoarseResolution| { &mut m.channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureChannel_CoarseResolution>(
                "FixtureChannel.CoarseResolution",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureChannel_CoarseResolution {
        static instance: ::protobuf::rt::LazyV2<FixtureChannel_CoarseResolution> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureChannel_CoarseResolution::new)
    }
}

impl ::protobuf::Clear for FixtureChannel_CoarseResolution {
    fn clear(&mut self) {
        self.channel = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureChannel_CoarseResolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureChannel_CoarseResolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureChannel_FineResolution {
    // message fields
    pub fineChannel: u32,
    pub coarseChannel: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureChannel_FineResolution {
    fn default() -> &'a FixtureChannel_FineResolution {
        <FixtureChannel_FineResolution as ::protobuf::Message>::default_instance()
    }
}

impl FixtureChannel_FineResolution {
    pub fn new() -> FixtureChannel_FineResolution {
        ::std::default::Default::default()
    }

    // uint32 fineChannel = 1;


    pub fn get_fineChannel(&self) -> u32 {
        self.fineChannel
    }
    pub fn clear_fineChannel(&mut self) {
        self.fineChannel = 0;
    }

    // Param is passed by value, moved
    pub fn set_fineChannel(&mut self, v: u32) {
        self.fineChannel = v;
    }

    // uint32 coarseChannel = 2;


    pub fn get_coarseChannel(&self) -> u32 {
        self.coarseChannel
    }
    pub fn clear_coarseChannel(&mut self) {
        self.coarseChannel = 0;
    }

    // Param is passed by value, moved
    pub fn set_coarseChannel(&mut self, v: u32) {
        self.coarseChannel = v;
    }
}

impl ::protobuf::Message for FixtureChannel_FineResolution {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fineChannel = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.coarseChannel = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fineChannel != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fineChannel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.coarseChannel != 0 {
            my_size += ::protobuf::rt::value_size(2, self.coarseChannel, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fineChannel != 0 {
            os.write_uint32(1, self.fineChannel)?;
        }
        if self.coarseChannel != 0 {
            os.write_uint32(2, self.coarseChannel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureChannel_FineResolution {
        FixtureChannel_FineResolution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fineChannel",
                |m: &FixtureChannel_FineResolution| { &m.fineChannel },
                |m: &mut FixtureChannel_FineResolution| { &mut m.fineChannel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "coarseChannel",
                |m: &FixtureChannel_FineResolution| { &m.coarseChannel },
                |m: &mut FixtureChannel_FineResolution| { &mut m.coarseChannel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureChannel_FineResolution>(
                "FixtureChannel.FineResolution",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureChannel_FineResolution {
        static instance: ::protobuf::rt::LazyV2<FixtureChannel_FineResolution> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureChannel_FineResolution::new)
    }
}

impl ::protobuf::Clear for FixtureChannel_FineResolution {
    fn clear(&mut self) {
        self.fineChannel = 0;
        self.coarseChannel = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureChannel_FineResolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureChannel_FineResolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureChannel_FinestResolution {
    // message fields
    pub finestChannel: u32,
    pub fineChannel: u32,
    pub coarseChannel: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureChannel_FinestResolution {
    fn default() -> &'a FixtureChannel_FinestResolution {
        <FixtureChannel_FinestResolution as ::protobuf::Message>::default_instance()
    }
}

impl FixtureChannel_FinestResolution {
    pub fn new() -> FixtureChannel_FinestResolution {
        ::std::default::Default::default()
    }

    // uint32 finestChannel = 1;


    pub fn get_finestChannel(&self) -> u32 {
        self.finestChannel
    }
    pub fn clear_finestChannel(&mut self) {
        self.finestChannel = 0;
    }

    // Param is passed by value, moved
    pub fn set_finestChannel(&mut self, v: u32) {
        self.finestChannel = v;
    }

    // uint32 fineChannel = 2;


    pub fn get_fineChannel(&self) -> u32 {
        self.fineChannel
    }
    pub fn clear_fineChannel(&mut self) {
        self.fineChannel = 0;
    }

    // Param is passed by value, moved
    pub fn set_fineChannel(&mut self, v: u32) {
        self.fineChannel = v;
    }

    // uint32 coarseChannel = 3;


    pub fn get_coarseChannel(&self) -> u32 {
        self.coarseChannel
    }
    pub fn clear_coarseChannel(&mut self) {
        self.coarseChannel = 0;
    }

    // Param is passed by value, moved
    pub fn set_coarseChannel(&mut self, v: u32) {
        self.coarseChannel = v;
    }
}

impl ::protobuf::Message for FixtureChannel_FinestResolution {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.finestChannel = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fineChannel = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.coarseChannel = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.finestChannel != 0 {
            my_size += ::protobuf::rt::value_size(1, self.finestChannel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fineChannel != 0 {
            my_size += ::protobuf::rt::value_size(2, self.fineChannel, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.coarseChannel != 0 {
            my_size += ::protobuf::rt::value_size(3, self.coarseChannel, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.finestChannel != 0 {
            os.write_uint32(1, self.finestChannel)?;
        }
        if self.fineChannel != 0 {
            os.write_uint32(2, self.fineChannel)?;
        }
        if self.coarseChannel != 0 {
            os.write_uint32(3, self.coarseChannel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureChannel_FinestResolution {
        FixtureChannel_FinestResolution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "finestChannel",
                |m: &FixtureChannel_FinestResolution| { &m.finestChannel },
                |m: &mut FixtureChannel_FinestResolution| { &mut m.finestChannel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fineChannel",
                |m: &FixtureChannel_FinestResolution| { &m.fineChannel },
                |m: &mut FixtureChannel_FinestResolution| { &mut m.fineChannel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "coarseChannel",
                |m: &FixtureChannel_FinestResolution| { &m.coarseChannel },
                |m: &mut FixtureChannel_FinestResolution| { &mut m.coarseChannel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureChannel_FinestResolution>(
                "FixtureChannel.FinestResolution",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureChannel_FinestResolution {
        static instance: ::protobuf::rt::LazyV2<FixtureChannel_FinestResolution> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureChannel_FinestResolution::new)
    }
}

impl ::protobuf::Clear for FixtureChannel_FinestResolution {
    fn clear(&mut self) {
        self.finestChannel = 0;
        self.fineChannel = 0;
        self.coarseChannel = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureChannel_FinestResolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureChannel_FinestResolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixturePhysicalData {
    // message fields
    pub width: f32,
    pub height: f32,
    pub depth: f32,
    pub weight: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixturePhysicalData {
    fn default() -> &'a FixturePhysicalData {
        <FixturePhysicalData as ::protobuf::Message>::default_instance()
    }
}

impl FixturePhysicalData {
    pub fn new() -> FixturePhysicalData {
        ::std::default::Default::default()
    }

    // float width = 1;


    pub fn get_width(&self) -> f32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0.;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: f32) {
        self.width = v;
    }

    // float height = 2;


    pub fn get_height(&self) -> f32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0.;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: f32) {
        self.height = v;
    }

    // float depth = 3;


    pub fn get_depth(&self) -> f32 {
        self.depth
    }
    pub fn clear_depth(&mut self) {
        self.depth = 0.;
    }

    // Param is passed by value, moved
    pub fn set_depth(&mut self, v: f32) {
        self.depth = v;
    }

    // float weight = 4;


    pub fn get_weight(&self) -> f32 {
        self.weight
    }
    pub fn clear_weight(&mut self) {
        self.weight = 0.;
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: f32) {
        self.weight = v;
    }
}

impl ::protobuf::Message for FixturePhysicalData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.width = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.depth = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.weight = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.width != 0. {
            my_size += 5;
        }
        if self.height != 0. {
            my_size += 5;
        }
        if self.depth != 0. {
            my_size += 5;
        }
        if self.weight != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.width != 0. {
            os.write_float(1, self.width)?;
        }
        if self.height != 0. {
            os.write_float(2, self.height)?;
        }
        if self.depth != 0. {
            os.write_float(3, self.depth)?;
        }
        if self.weight != 0. {
            os.write_float(4, self.weight)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixturePhysicalData {
        FixturePhysicalData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "width",
                |m: &FixturePhysicalData| { &m.width },
                |m: &mut FixturePhysicalData| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "height",
                |m: &FixturePhysicalData| { &m.height },
                |m: &mut FixturePhysicalData| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "depth",
                |m: &FixturePhysicalData| { &m.depth },
                |m: &mut FixturePhysicalData| { &mut m.depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "weight",
                |m: &FixturePhysicalData| { &m.weight },
                |m: &mut FixturePhysicalData| { &mut m.weight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixturePhysicalData>(
                "FixturePhysicalData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixturePhysicalData {
        static instance: ::protobuf::rt::LazyV2<FixturePhysicalData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixturePhysicalData::new)
    }
}

impl ::protobuf::Clear for FixturePhysicalData {
    fn clear(&mut self) {
        self.width = 0.;
        self.height = 0.;
        self.depth = 0.;
        self.weight = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixturePhysicalData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixturePhysicalData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FixtureFaderControl {
    // message fields
    pub control: FixtureControl,
    // message oneof groups
    pub _color_mixer_channel: ::std::option::Option<FixtureFaderControl_oneof__color_mixer_channel>,
    pub _generic_channel: ::std::option::Option<FixtureFaderControl_oneof__generic_channel>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FixtureFaderControl {
    fn default() -> &'a FixtureFaderControl {
        <FixtureFaderControl as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureFaderControl_oneof__color_mixer_channel {
    color_mixer_channel(FixtureFaderControl_ColorMixerControlChannel),
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureFaderControl_oneof__generic_channel {
    generic_channel(::std::string::String),
}

impl FixtureFaderControl {
    pub fn new() -> FixtureFaderControl {
        ::std::default::Default::default()
    }

    // .mizer.fixtures.FixtureControl control = 1;


    pub fn get_control(&self) -> FixtureControl {
        self.control
    }
    pub fn clear_control(&mut self) {
        self.control = FixtureControl::INTENSITY;
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: FixtureControl) {
        self.control = v;
    }

    // .mizer.fixtures.FixtureFaderControl.ColorMixerControlChannel color_mixer_channel = 2;


    pub fn get_color_mixer_channel(&self) -> FixtureFaderControl_ColorMixerControlChannel {
        match self._color_mixer_channel {
            ::std::option::Option::Some(FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(v)) => v,
            _ => FixtureFaderControl_ColorMixerControlChannel::RED,
        }
    }
    pub fn clear_color_mixer_channel(&mut self) {
        self._color_mixer_channel = ::std::option::Option::None;
    }

    pub fn has_color_mixer_channel(&self) -> bool {
        match self._color_mixer_channel {
            ::std::option::Option::Some(FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_color_mixer_channel(&mut self, v: FixtureFaderControl_ColorMixerControlChannel) {
        self._color_mixer_channel = ::std::option::Option::Some(FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(v))
    }

    // string generic_channel = 3;


    pub fn get_generic_channel(&self) -> &str {
        match self._generic_channel {
            ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_generic_channel(&mut self) {
        self._generic_channel = ::std::option::Option::None;
    }

    pub fn has_generic_channel(&self) -> bool {
        match self._generic_channel {
            ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic_channel(&mut self, v: ::std::string::String) {
        self._generic_channel = ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic_channel(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(_)) = self._generic_channel {
        } else {
            self._generic_channel = ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(::std::string::String::new()));
        }
        match self._generic_channel {
            ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic_channel(&mut self) -> ::std::string::String {
        if self.has_generic_channel() {
            match self._generic_channel.take() {
                ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for FixtureFaderControl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.control, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._color_mixer_channel = ::std::option::Option::Some(FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(is.read_enum()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._generic_channel = ::std::option::Option::Some(FixtureFaderControl_oneof__generic_channel::generic_channel(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.control != FixtureControl::INTENSITY {
            my_size += ::protobuf::rt::enum_size(1, self.control);
        }
        if let ::std::option::Option::Some(ref v) = self._color_mixer_channel {
            match v {
                &FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._generic_channel {
            match v {
                &FixtureFaderControl_oneof__generic_channel::generic_channel(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.control != FixtureControl::INTENSITY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.control))?;
        }
        if let ::std::option::Option::Some(ref v) = self._color_mixer_channel {
            match v {
                &FixtureFaderControl_oneof__color_mixer_channel::color_mixer_channel(v) => {
                    os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._generic_channel {
            match v {
                &FixtureFaderControl_oneof__generic_channel::generic_channel(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FixtureFaderControl {
        FixtureFaderControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FixtureControl>>(
                "control",
                |m: &FixtureFaderControl| { &m.control },
                |m: &mut FixtureFaderControl| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, FixtureFaderControl_ColorMixerControlChannel>(
                "color_mixer_channel",
                FixtureFaderControl::has_color_mixer_channel,
                FixtureFaderControl::get_color_mixer_channel,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "generic_channel",
                FixtureFaderControl::has_generic_channel,
                FixtureFaderControl::get_generic_channel,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FixtureFaderControl>(
                "FixtureFaderControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FixtureFaderControl {
        static instance: ::protobuf::rt::LazyV2<FixtureFaderControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FixtureFaderControl::new)
    }
}

impl ::protobuf::Clear for FixtureFaderControl {
    fn clear(&mut self) {
        self.control = FixtureControl::INTENSITY;
        self._color_mixer_channel = ::std::option::Option::None;
        self._generic_channel = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FixtureFaderControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureFaderControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureFaderControl_ColorMixerControlChannel {
    RED = 0,
    GREEN = 1,
    BLUE = 2,
}

impl ::protobuf::ProtobufEnum for FixtureFaderControl_ColorMixerControlChannel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FixtureFaderControl_ColorMixerControlChannel> {
        match value {
            0 => ::std::option::Option::Some(FixtureFaderControl_ColorMixerControlChannel::RED),
            1 => ::std::option::Option::Some(FixtureFaderControl_ColorMixerControlChannel::GREEN),
            2 => ::std::option::Option::Some(FixtureFaderControl_ColorMixerControlChannel::BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FixtureFaderControl_ColorMixerControlChannel] = &[
            FixtureFaderControl_ColorMixerControlChannel::RED,
            FixtureFaderControl_ColorMixerControlChannel::GREEN,
            FixtureFaderControl_ColorMixerControlChannel::BLUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FixtureFaderControl_ColorMixerControlChannel>("FixtureFaderControl.ColorMixerControlChannel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FixtureFaderControl_ColorMixerControlChannel {
}

impl ::std::default::Default for FixtureFaderControl_ColorMixerControlChannel {
    fn default() -> Self {
        FixtureFaderControl_ColorMixerControlChannel::RED
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureFaderControl_ColorMixerControlChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FixtureControl {
    INTENSITY = 0,
    SHUTTER = 1,
    COLOR_MIXER = 2,
    COLOR_WHEEL = 3,
    PAN = 4,
    TILT = 5,
    FOCUS = 6,
    ZOOM = 7,
    PRISM = 8,
    IRIS = 9,
    FROST = 10,
    GOBO = 11,
    GENERIC = 12,
}

impl ::protobuf::ProtobufEnum for FixtureControl {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FixtureControl> {
        match value {
            0 => ::std::option::Option::Some(FixtureControl::INTENSITY),
            1 => ::std::option::Option::Some(FixtureControl::SHUTTER),
            2 => ::std::option::Option::Some(FixtureControl::COLOR_MIXER),
            3 => ::std::option::Option::Some(FixtureControl::COLOR_WHEEL),
            4 => ::std::option::Option::Some(FixtureControl::PAN),
            5 => ::std::option::Option::Some(FixtureControl::TILT),
            6 => ::std::option::Option::Some(FixtureControl::FOCUS),
            7 => ::std::option::Option::Some(FixtureControl::ZOOM),
            8 => ::std::option::Option::Some(FixtureControl::PRISM),
            9 => ::std::option::Option::Some(FixtureControl::IRIS),
            10 => ::std::option::Option::Some(FixtureControl::FROST),
            11 => ::std::option::Option::Some(FixtureControl::GOBO),
            12 => ::std::option::Option::Some(FixtureControl::GENERIC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FixtureControl] = &[
            FixtureControl::INTENSITY,
            FixtureControl::SHUTTER,
            FixtureControl::COLOR_MIXER,
            FixtureControl::COLOR_WHEEL,
            FixtureControl::PAN,
            FixtureControl::TILT,
            FixtureControl::FOCUS,
            FixtureControl::ZOOM,
            FixtureControl::PRISM,
            FixtureControl::IRIS,
            FixtureControl::FROST,
            FixtureControl::GOBO,
            FixtureControl::GENERIC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FixtureControl>("FixtureControl", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FixtureControl {
}

impl ::std::default::Default for FixtureControl {
    fn default() -> Self {
        FixtureControl::INTENSITY
    }
}

impl ::protobuf::reflect::ProtobufValue for FixtureControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0efixtures.proto\x12\x0emizer.fixtures\"g\n\x12AddFixturesRequest\
    \x12;\n\x07request\x18\x01\x20\x01(\x0b2!.mizer.fixtures.AddFixtureReque\
    stR\x07request\x12\x14\n\x05count\x18\x02\x20\x01(\rR\x05count\"\xa5\x01\
    \n\x11AddFixtureRequest\x12\"\n\x0cdefinitionId\x18\x01\x20\x01(\tR\x0cd\
    efinitionId\x12\x12\n\x04mode\x18\x02\x20\x01(\tR\x04mode\x12\x0e\n\x02i\
    d\x18\x03\x20\x01(\rR\x02id\x12\x18\n\x07channel\x18\x04\x20\x01(\rR\x07\
    channel\x12\x1a\n\x08universe\x18\x05\x20\x01(\rR\x08universe\x12\x12\n\
    \x04name\x18\x06\x20\x01(\tR\x04name\"\x14\n\x12GetFixturesRequest\"7\n\
    \x15DeleteFixturesRequest\x12\x1e\n\nfixtureIds\x18\x01\x20\x03(\rR\nfix\
    tureIds\"\x8a\x02\n\x14UpdateFixtureRequest\x12\x1c\n\tfixtureId\x18\x01\
    \x20\x01(\rR\tfixtureId\x12\"\n\ninvert_pan\x18\x02\x20\x01(\x08H\0R\tin\
    vertPan\x88\x01\x01\x12$\n\x0binvert_tilt\x18\x03\x20\x01(\x08H\x01R\nin\
    vertTilt\x88\x01\x01\x12\x17\n\x04name\x18\x04\x20\x01(\tH\x02R\x04name\
    \x88\x01\x01\x12=\n\x07address\x18\x05\x20\x01(\x0b2\x1e.mizer.fixtures.\
    FixtureAddressH\x03R\x07address\x88\x01\x01B\r\n\x0b_invert_panB\x0e\n\
    \x0c_invert_tiltB\x07\n\x05_nameB\n\n\x08_address\"F\n\x0eFixtureAddress\
    \x12\x1a\n\x08universe\x18\x01\x20\x01(\rR\x08universe\x12\x18\n\x07chan\
    nel\x18\x02\x20\x01(\rR\x07channel\"n\n\tFixtureId\x12\x1a\n\x07fixture\
    \x18\x01\x20\x01(\rH\0R\x07fixture\x12?\n\x0bsub_fixture\x18\x02\x20\x01\
    (\x0b2\x1c.mizer.fixtures.SubFixtureIdH\0R\nsubFixtureB\x04\n\x02id\"H\n\
    \x0cSubFixtureId\x12\x1d\n\nfixture_id\x18\x01\x20\x01(\rR\tfixtureId\
    \x12\x19\n\x08child_id\x18\x02\x20\x01(\rR\x07childId\"?\n\x08Fixtures\
    \x123\n\x08fixtures\x18\x01\x20\x03(\x0b2\x17.mizer.fixtures.FixtureR\
    \x08fixtures\"\x82\x03\n\x07Fixture\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\
    \x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\"\n\x0cmanufact\
    urer\x18\x03\x20\x01(\tR\x0cmanufacturer\x12\x14\n\x05model\x18\x04\x20\
    \x01(\tR\x05model\x12\x12\n\x04mode\x18\x05\x20\x01(\tR\x04mode\x12\x1a\
    \n\x08universe\x18\x06\x20\x01(\rR\x08universe\x12\x18\n\x07channel\x18\
    \x07\x20\x01(\rR\x07channel\x12#\n\rchannel_count\x18\x08\x20\x01(\rR\
    \x0cchannelCount\x12;\n\x08controls\x18\t\x20\x03(\x0b2\x1f.mizer.fixtur\
    es.FixtureControlsR\x08controls\x126\n\x08children\x18\n\x20\x03(\x0b2\
    \x1a.mizer.fixtures.SubFixtureR\x08children\x125\n\x06config\x18\x0b\x20\
    \x01(\x0b2\x1d.mizer.fixtures.FixtureConfigR\x06config\"O\n\rFixtureConf\
    ig\x12\x1d\n\ninvert_pan\x18\x01\x20\x01(\x08R\tinvertPan\x12\x1f\n\x0bi\
    nvert_tilt\x18\x02\x20\x01(\x08R\ninvertTilt\"m\n\nSubFixture\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12;\n\x08controls\x18\x03\x20\x03(\x0b2\x1f.mizer.fixtures.Fix\
    tureControlsR\x08controls\"\xb8\x03\n\x0fFixtureControls\x128\n\x07contr\
    ol\x18\x01\x20\x01(\x0e2\x1e.mizer.fixtures.FixtureControlR\x07control\
    \x124\n\x05fader\x18\x02\x20\x01(\x0b2\x1c.mizer.fixtures.FaderChannelH\
    \0R\x05fader\x12D\n\x0bcolor_mixer\x18\x03\x20\x01(\x0b2!.mizer.fixtures\
    .ColorMixerChannelH\0R\ncolorMixer\x12D\n\x0bcolor_wheel\x18\x04\x20\x01\
    (\x0b2!.mizer.fixtures.ColorWheelChannelH\0R\ncolorWheel\x121\n\x04axis\
    \x18\x05\x20\x01(\x0b2\x1b.mizer.fixtures.AxisChannelH\0R\x04axis\x121\n\
    \x04gobo\x18\x06\x20\x01(\x0b2\x1b.mizer.fixtures.GoboChannelH\0R\x04gob\
    o\x12:\n\x07generic\x18\x07\x20\x01(\x0b2\x1e.mizer.fixtures.GenericChan\
    nelH\0R\x07genericB\x07\n\x05value\"$\n\x0cFaderChannel\x12\x14\n\x05val\
    ue\x18\x01\x20\x01(\x01R\x05value\"O\n\x11ColorMixerChannel\x12\x10\n\
    \x03red\x18\x01\x20\x01(\x01R\x03red\x12\x14\n\x05green\x18\x02\x20\x01(\
    \x01R\x05green\x12\x12\n\x04blue\x18\x03\x20\x01(\x01R\x04blue\"a\n\x11C\
    olorWheelChannel\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\x126\
    \n\x06colors\x18\x02\x20\x03(\x0b2\x1e.mizer.fixtures.ColorWheelSlotR\
    \x06colors\"R\n\x0eColorWheelSlot\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x01R\x05value\x12\x16\n\x06\
    colors\x18\x03\x20\x03(\tR\x06colors\"]\n\x0bAxisChannel\x12\x14\n\x05va\
    lue\x18\x01\x20\x01(\x01R\x05value\x12\x1d\n\nangle_from\x18\x02\x20\x01\
    (\x01R\tangleFrom\x12\x19\n\x08angle_to\x18\x03\x20\x01(\x01R\x07angleTo\
    \"O\n\x0bGoboChannel\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value\
    \x12*\n\x05gobos\x18\x02\x20\x03(\x0b2\x14.mizer.fixtures.GoboR\x05gobos\
    \"g\n\x04Gobo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\
    \x05value\x18\x02\x20\x01(\x01R\x05value\x12\x12\n\x03svg\x18\x03\x20\
    \x01(\tH\0R\x03svg\x12\x18\n\x06raster\x18\x04\x20\x01(\x0cH\0R\x06raste\
    rB\x07\n\x05image\":\n\x0eGenericChannel\x12\x14\n\x05value\x18\x01\x20\
    \x01(\x01R\x05value\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"\x1e\
    \n\x1cGetFixtureDefinitionsRequest\"Y\n\x12FixtureDefinitions\x12C\n\x0b\
    definitions\x18\x01\x20\x03(\x0b2!.mizer.fixtures.FixtureDefinitionR\x0b\
    definitions\"\xff\x01\n\x11FixtureDefinition\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\"\n\x0c\
    manufacturer\x18\x03\x20\x01(\tR\x0cmanufacturer\x121\n\x05modes\x18\x04\
    \x20\x03(\x0b2\x1b.mizer.fixtures.FixtureModeR\x05modes\x12?\n\x08physic\
    al\x18\x05\x20\x01(\x0b2#.mizer.fixtures.FixturePhysicalDataR\x08physica\
    l\x12\x12\n\x04tags\x18\x06\x20\x03(\tR\x04tags\x12\x1a\n\x08provider\
    \x18\x07\x20\x01(\tR\x08provider\"]\n\x0bFixtureMode\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12:\n\x08channels\x18\x02\x20\x03(\x0b2\
    \x1e.mizer.fixtures.FixtureChannelR\x08channels\"\x98\x04\n\x0eFixtureCh\
    annel\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12I\n\x06coarse\x18\
    \x02\x20\x01(\x0b2/.mizer.fixtures.FixtureChannel.CoarseResolutionH\0R\
    \x06coarse\x12C\n\x04fine\x18\x03\x20\x01(\x0b2-.mizer.fixtures.FixtureC\
    hannel.FineResolutionH\0R\x04fine\x12I\n\x06finest\x18\x04\x20\x01(\x0b2\
    /.mizer.fixtures.FixtureChannel.FinestResolutionH\0R\x06finest\x1a,\n\
    \x10CoarseResolution\x12\x18\n\x07channel\x18\x01\x20\x01(\rR\x07channel\
    \x1aX\n\x0eFineResolution\x12\x20\n\x0bfineChannel\x18\x01\x20\x01(\rR\
    \x0bfineChannel\x12$\n\rcoarseChannel\x18\x02\x20\x01(\rR\rcoarseChannel\
    \x1a\x80\x01\n\x10FinestResolution\x12$\n\rfinestChannel\x18\x01\x20\x01\
    (\rR\rfinestChannel\x12\x20\n\x0bfineChannel\x18\x02\x20\x01(\rR\x0bfine\
    Channel\x12$\n\rcoarseChannel\x18\x03\x20\x01(\rR\rcoarseChannelB\x0c\n\
    \nresolution\"q\n\x13FixturePhysicalData\x12\x14\n\x05width\x18\x01\x20\
    \x01(\x02R\x05width\x12\x16\n\x06height\x18\x02\x20\x01(\x02R\x06height\
    \x12\x14\n\x05depth\x18\x03\x20\x01(\x02R\x05depth\x12\x16\n\x06weight\
    \x18\x04\x20\x01(\x02R\x06weight\"\xd6\x02\n\x13FixtureFaderControl\x128\
    \n\x07control\x18\x01\x20\x01(\x0e2\x1e.mizer.fixtures.FixtureControlR\
    \x07control\x12q\n\x13color_mixer_channel\x18\x02\x20\x01(\x0e2<.mizer.f\
    ixtures.FixtureFaderControl.ColorMixerControlChannelH\0R\x11colorMixerCh\
    annel\x88\x01\x01\x12,\n\x0fgeneric_channel\x18\x03\x20\x01(\tH\x01R\x0e\
    genericChannel\x88\x01\x01\"8\n\x18ColorMixerControlChannel\x12\x07\n\
    \x03RED\x10\0\x12\t\n\x05GREEN\x10\x01\x12\x08\n\x04BLUE\x10\x02B\x16\n\
    \x14_color_mixer_channelB\x12\n\x10_generic_channel*\xad\x01\n\x0eFixtur\
    eControl\x12\r\n\tINTENSITY\x10\0\x12\x0b\n\x07SHUTTER\x10\x01\x12\x0f\n\
    \x0bCOLOR_MIXER\x10\x02\x12\x0f\n\x0bCOLOR_WHEEL\x10\x03\x12\x07\n\x03PA\
    N\x10\x04\x12\x08\n\x04TILT\x10\x05\x12\t\n\x05FOCUS\x10\x06\x12\x08\n\
    \x04ZOOM\x10\x07\x12\t\n\x05PRISM\x10\x08\x12\x08\n\x04IRIS\x10\t\x12\t\
    \n\x05FROST\x10\n\x12\x08\n\x04GOBO\x10\x0b\x12\x0b\n\x07GENERIC\x10\x0c\
    2\xc0\x03\n\x0bFixturesApi\x12M\n\x0bGetFixtures\x12\".mizer.fixtures.Ge\
    tFixturesRequest\x1a\x18.mizer.fixtures.Fixtures\"\0\x12k\n\x15GetFixtur\
    eDefinitions\x12,.mizer.fixtures.GetFixtureDefinitionsRequest\x1a\".mize\
    r.fixtures.FixtureDefinitions\"\0\x12M\n\x0bAddFixtures\x12\".mizer.fixt\
    ures.AddFixturesRequest\x1a\x18.mizer.fixtures.Fixtures\"\0\x12S\n\x0eDe\
    leteFixtures\x12%.mizer.fixtures.DeleteFixturesRequest\x1a\x18.mizer.fix\
    tures.Fixtures\"\0\x12Q\n\rUpdateFixture\x12$.mizer.fixtures.UpdateFixtu\
    reRequest\x1a\x18.mizer.fixtures.Fixtures\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
