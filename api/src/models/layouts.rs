// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `layouts.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.LayoutResponse)
pub struct LayoutResponse {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.LayoutResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LayoutResponse {
    fn default() -> &'a LayoutResponse {
        <LayoutResponse as ::protobuf::Message>::default_instance()
    }
}

impl LayoutResponse {
    pub fn new() -> LayoutResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LayoutResponse>(
            "LayoutResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LayoutResponse {
    const NAME: &'static str = "LayoutResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LayoutResponse {
        LayoutResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LayoutResponse {
        static instance: LayoutResponse = LayoutResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LayoutResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LayoutResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LayoutResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LayoutResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.GetLayoutsRequest)
pub struct GetLayoutsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.GetLayoutsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetLayoutsRequest {
    fn default() -> &'a GetLayoutsRequest {
        <GetLayoutsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetLayoutsRequest {
    pub fn new() -> GetLayoutsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetLayoutsRequest>(
            "GetLayoutsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetLayoutsRequest {
    const NAME: &'static str = "GetLayoutsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetLayoutsRequest {
        GetLayoutsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetLayoutsRequest {
        static instance: GetLayoutsRequest = GetLayoutsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetLayoutsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetLayoutsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetLayoutsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLayoutsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.AddLayoutRequest)
pub struct AddLayoutRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.AddLayoutRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.AddLayoutRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddLayoutRequest {
    fn default() -> &'a AddLayoutRequest {
        <AddLayoutRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddLayoutRequest {
    pub fn new() -> AddLayoutRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AddLayoutRequest| { &m.name },
            |m: &mut AddLayoutRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddLayoutRequest>(
            "AddLayoutRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddLayoutRequest {
    const NAME: &'static str = "AddLayoutRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddLayoutRequest {
        AddLayoutRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddLayoutRequest {
        static instance: AddLayoutRequest = AddLayoutRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddLayoutRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddLayoutRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddLayoutRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddLayoutRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.RemoveLayoutRequest)
pub struct RemoveLayoutRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.RemoveLayoutRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.RemoveLayoutRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoveLayoutRequest {
    fn default() -> &'a RemoveLayoutRequest {
        <RemoveLayoutRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveLayoutRequest {
    pub fn new() -> RemoveLayoutRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RemoveLayoutRequest| { &m.id },
            |m: &mut RemoveLayoutRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoveLayoutRequest>(
            "RemoveLayoutRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoveLayoutRequest {
    const NAME: &'static str = "RemoveLayoutRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoveLayoutRequest {
        RemoveLayoutRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoveLayoutRequest {
        static instance: RemoveLayoutRequest = RemoveLayoutRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoveLayoutRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoveLayoutRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoveLayoutRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveLayoutRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.RenameLayoutRequest)
pub struct RenameLayoutRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.RenameLayoutRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.RenameLayoutRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.RenameLayoutRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RenameLayoutRequest {
    fn default() -> &'a RenameLayoutRequest {
        <RenameLayoutRequest as ::protobuf::Message>::default_instance()
    }
}

impl RenameLayoutRequest {
    pub fn new() -> RenameLayoutRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RenameLayoutRequest| { &m.id },
            |m: &mut RenameLayoutRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &RenameLayoutRequest| { &m.name },
            |m: &mut RenameLayoutRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RenameLayoutRequest>(
            "RenameLayoutRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RenameLayoutRequest {
    const NAME: &'static str = "RenameLayoutRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RenameLayoutRequest {
        RenameLayoutRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RenameLayoutRequest {
        static instance: RenameLayoutRequest = RenameLayoutRequest {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RenameLayoutRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RenameLayoutRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RenameLayoutRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RenameLayoutRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.RenameControlRequest)
pub struct RenameControlRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.RenameControlRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.RenameControlRequest.control_id)
    pub control_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.RenameControlRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.RenameControlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RenameControlRequest {
    fn default() -> &'a RenameControlRequest {
        <RenameControlRequest as ::protobuf::Message>::default_instance()
    }
}

impl RenameControlRequest {
    pub fn new() -> RenameControlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &RenameControlRequest| { &m.layout_id },
            |m: &mut RenameControlRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_id",
            |m: &RenameControlRequest| { &m.control_id },
            |m: &mut RenameControlRequest| { &mut m.control_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &RenameControlRequest| { &m.name },
            |m: &mut RenameControlRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RenameControlRequest>(
            "RenameControlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RenameControlRequest {
    const NAME: &'static str = "RenameControlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.control_id = is.read_string()?;
                },
                26 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.control_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.control_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.control_id.is_empty() {
            os.write_string(2, &self.control_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RenameControlRequest {
        RenameControlRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.control_id.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RenameControlRequest {
        static instance: RenameControlRequest = RenameControlRequest {
            layout_id: ::std::string::String::new(),
            control_id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RenameControlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RenameControlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RenameControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RenameControlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MoveControlRequest)
pub struct MoveControlRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.MoveControlRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MoveControlRequest.control_id)
    pub control_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MoveControlRequest.position)
    pub position: ::protobuf::MessageField<ControlPosition>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MoveControlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MoveControlRequest {
    fn default() -> &'a MoveControlRequest {
        <MoveControlRequest as ::protobuf::Message>::default_instance()
    }
}

impl MoveControlRequest {
    pub fn new() -> MoveControlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &MoveControlRequest| { &m.layout_id },
            |m: &mut MoveControlRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_id",
            |m: &MoveControlRequest| { &m.control_id },
            |m: &mut MoveControlRequest| { &mut m.control_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlPosition>(
            "position",
            |m: &MoveControlRequest| { &m.position },
            |m: &mut MoveControlRequest| { &mut m.position },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MoveControlRequest>(
            "MoveControlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MoveControlRequest {
    const NAME: &'static str = "MoveControlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.control_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.control_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.control_id);
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.control_id.is_empty() {
            os.write_string(2, &self.control_id)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MoveControlRequest {
        MoveControlRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.control_id.clear();
        self.position.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MoveControlRequest {
        static instance: MoveControlRequest = MoveControlRequest {
            layout_id: ::std::string::String::new(),
            control_id: ::std::string::String::new(),
            position: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MoveControlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MoveControlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MoveControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveControlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.UpdateControlDecorationRequest)
pub struct UpdateControlDecorationRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.UpdateControlDecorationRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.UpdateControlDecorationRequest.control_id)
    pub control_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.UpdateControlDecorationRequest.decorations)
    pub decorations: ::protobuf::MessageField<ControlDecorations>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.UpdateControlDecorationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateControlDecorationRequest {
    fn default() -> &'a UpdateControlDecorationRequest {
        <UpdateControlDecorationRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateControlDecorationRequest {
    pub fn new() -> UpdateControlDecorationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &UpdateControlDecorationRequest| { &m.layout_id },
            |m: &mut UpdateControlDecorationRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_id",
            |m: &UpdateControlDecorationRequest| { &m.control_id },
            |m: &mut UpdateControlDecorationRequest| { &mut m.control_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlDecorations>(
            "decorations",
            |m: &UpdateControlDecorationRequest| { &m.decorations },
            |m: &mut UpdateControlDecorationRequest| { &mut m.decorations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateControlDecorationRequest>(
            "UpdateControlDecorationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateControlDecorationRequest {
    const NAME: &'static str = "UpdateControlDecorationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.control_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.decorations)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.control_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.control_id);
        }
        if let Some(v) = self.decorations.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.control_id.is_empty() {
            os.write_string(2, &self.control_id)?;
        }
        if let Some(v) = self.decorations.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateControlDecorationRequest {
        UpdateControlDecorationRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.control_id.clear();
        self.decorations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateControlDecorationRequest {
        static instance: UpdateControlDecorationRequest = UpdateControlDecorationRequest {
            layout_id: ::std::string::String::new(),
            control_id: ::std::string::String::new(),
            decorations: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateControlDecorationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateControlDecorationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateControlDecorationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateControlDecorationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.UpdateControlBehaviorRequest)
pub struct UpdateControlBehaviorRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.UpdateControlBehaviorRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.UpdateControlBehaviorRequest.control_id)
    pub control_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.UpdateControlBehaviorRequest.behavior)
    pub behavior: ::protobuf::MessageField<ControlBehavior>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.UpdateControlBehaviorRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateControlBehaviorRequest {
    fn default() -> &'a UpdateControlBehaviorRequest {
        <UpdateControlBehaviorRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateControlBehaviorRequest {
    pub fn new() -> UpdateControlBehaviorRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &UpdateControlBehaviorRequest| { &m.layout_id },
            |m: &mut UpdateControlBehaviorRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_id",
            |m: &UpdateControlBehaviorRequest| { &m.control_id },
            |m: &mut UpdateControlBehaviorRequest| { &mut m.control_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlBehavior>(
            "behavior",
            |m: &UpdateControlBehaviorRequest| { &m.behavior },
            |m: &mut UpdateControlBehaviorRequest| { &mut m.behavior },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateControlBehaviorRequest>(
            "UpdateControlBehaviorRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateControlBehaviorRequest {
    const NAME: &'static str = "UpdateControlBehaviorRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.control_id = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.behavior)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.control_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.control_id);
        }
        if let Some(v) = self.behavior.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.control_id.is_empty() {
            os.write_string(2, &self.control_id)?;
        }
        if let Some(v) = self.behavior.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateControlBehaviorRequest {
        UpdateControlBehaviorRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.control_id.clear();
        self.behavior.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateControlBehaviorRequest {
        static instance: UpdateControlBehaviorRequest = UpdateControlBehaviorRequest {
            layout_id: ::std::string::String::new(),
            control_id: ::std::string::String::new(),
            behavior: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateControlBehaviorRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateControlBehaviorRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateControlBehaviorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateControlBehaviorRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.RemoveControlRequest)
pub struct RemoveControlRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.RemoveControlRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.RemoveControlRequest.control_id)
    pub control_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.RemoveControlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemoveControlRequest {
    fn default() -> &'a RemoveControlRequest {
        <RemoveControlRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveControlRequest {
    pub fn new() -> RemoveControlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &RemoveControlRequest| { &m.layout_id },
            |m: &mut RemoveControlRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_id",
            |m: &RemoveControlRequest| { &m.control_id },
            |m: &mut RemoveControlRequest| { &mut m.control_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemoveControlRequest>(
            "RemoveControlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemoveControlRequest {
    const NAME: &'static str = "RemoveControlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.control_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.control_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.control_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.control_id.is_empty() {
            os.write_string(2, &self.control_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemoveControlRequest {
        RemoveControlRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.control_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemoveControlRequest {
        static instance: RemoveControlRequest = RemoveControlRequest {
            layout_id: ::std::string::String::new(),
            control_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemoveControlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemoveControlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemoveControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveControlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.AddControlRequest)
pub struct AddControlRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.AddControlRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.AddControlRequest.node_type)
    pub node_type: ::protobuf::EnumOrUnknown<super::nodes::node::NodeType>,
    // @@protoc_insertion_point(field:mizer.AddControlRequest.position)
    pub position: ::protobuf::MessageField<ControlPosition>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.AddControlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddControlRequest {
    fn default() -> &'a AddControlRequest {
        <AddControlRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddControlRequest {
    pub fn new() -> AddControlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &AddControlRequest| { &m.layout_id },
            |m: &mut AddControlRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node_type",
            |m: &AddControlRequest| { &m.node_type },
            |m: &mut AddControlRequest| { &mut m.node_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlPosition>(
            "position",
            |m: &AddControlRequest| { &m.position },
            |m: &mut AddControlRequest| { &mut m.position },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddControlRequest>(
            "AddControlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddControlRequest {
    const NAME: &'static str = "AddControlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                16 => {
                    self.node_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if self.node_type != ::protobuf::EnumOrUnknown::new(super::nodes::node::NodeType::FADER) {
            my_size += ::protobuf::rt::int32_size(2, self.node_type.value());
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if self.node_type != ::protobuf::EnumOrUnknown::new(super::nodes::node::NodeType::FADER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.node_type))?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddControlRequest {
        AddControlRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.node_type = ::protobuf::EnumOrUnknown::new(super::nodes::node::NodeType::FADER);
        self.position.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddControlRequest {
        static instance: AddControlRequest = AddControlRequest {
            layout_id: ::std::string::String::new(),
            node_type: ::protobuf::EnumOrUnknown::from_i32(0),
            position: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddControlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddControlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddControlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.AddExistingControlRequest)
pub struct AddExistingControlRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.AddExistingControlRequest.layout_id)
    pub layout_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.AddExistingControlRequest.node)
    pub node: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.AddExistingControlRequest.position)
    pub position: ::protobuf::MessageField<ControlPosition>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.AddExistingControlRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddExistingControlRequest {
    fn default() -> &'a AddExistingControlRequest {
        <AddExistingControlRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddExistingControlRequest {
    pub fn new() -> AddExistingControlRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layout_id",
            |m: &AddExistingControlRequest| { &m.layout_id },
            |m: &mut AddExistingControlRequest| { &mut m.layout_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node",
            |m: &AddExistingControlRequest| { &m.node },
            |m: &mut AddExistingControlRequest| { &mut m.node },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlPosition>(
            "position",
            |m: &AddExistingControlRequest| { &m.position },
            |m: &mut AddExistingControlRequest| { &mut m.position },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddExistingControlRequest>(
            "AddExistingControlRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddExistingControlRequest {
    const NAME: &'static str = "AddExistingControlRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout_id = is.read_string()?;
                },
                18 => {
                    self.node = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.layout_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.layout_id);
        }
        if !self.node.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.node);
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.layout_id.is_empty() {
            os.write_string(1, &self.layout_id)?;
        }
        if !self.node.is_empty() {
            os.write_string(2, &self.node)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddExistingControlRequest {
        AddExistingControlRequest::new()
    }

    fn clear(&mut self) {
        self.layout_id.clear();
        self.node.clear();
        self.position.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddExistingControlRequest {
        static instance: AddExistingControlRequest = AddExistingControlRequest {
            layout_id: ::std::string::String::new(),
            node: ::std::string::String::new(),
            position: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddExistingControlRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddExistingControlRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddExistingControlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddExistingControlRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.Layouts)
pub struct Layouts {
    // message fields
    // @@protoc_insertion_point(field:mizer.Layouts.layouts)
    pub layouts: ::std::vec::Vec<Layout>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.Layouts.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Layouts {
    fn default() -> &'a Layouts {
        <Layouts as ::protobuf::Message>::default_instance()
    }
}

impl Layouts {
    pub fn new() -> Layouts {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "layouts",
            |m: &Layouts| { &m.layouts },
            |m: &mut Layouts| { &mut m.layouts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Layouts>(
            "Layouts",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Layouts {
    const NAME: &'static str = "Layouts";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layouts.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.layouts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.layouts {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Layouts {
        Layouts::new()
    }

    fn clear(&mut self) {
        self.layouts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Layouts {
        static instance: Layouts = Layouts {
            layouts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Layouts {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Layouts").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Layouts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Layouts {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.Layout)
pub struct Layout {
    // message fields
    // @@protoc_insertion_point(field:mizer.Layout.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.Layout.controls)
    pub controls: ::std::vec::Vec<LayoutControl>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.Layout.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Layout {
    fn default() -> &'a Layout {
        <Layout as ::protobuf::Message>::default_instance()
    }
}

impl Layout {
    pub fn new() -> Layout {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Layout| { &m.id },
            |m: &mut Layout| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "controls",
            |m: &Layout| { &m.controls },
            |m: &mut Layout| { &mut m.controls },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Layout>(
            "Layout",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Layout {
    const NAME: &'static str = "Layout";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.controls.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.controls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.controls {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Layout {
        Layout::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.controls.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Layout {
        static instance: Layout = Layout {
            id: ::std::string::String::new(),
            controls: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Layout {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Layout").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Layout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Layout {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.LayoutControl)
pub struct LayoutControl {
    // message fields
    // @@protoc_insertion_point(field:mizer.LayoutControl.node)
    pub node: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.LayoutControl.position)
    pub position: ::protobuf::MessageField<ControlPosition>,
    // @@protoc_insertion_point(field:mizer.LayoutControl.size)
    pub size: ::protobuf::MessageField<ControlSize>,
    // @@protoc_insertion_point(field:mizer.LayoutControl.label)
    pub label: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.LayoutControl.decoration)
    pub decoration: ::protobuf::MessageField<ControlDecorations>,
    // @@protoc_insertion_point(field:mizer.LayoutControl.behavior)
    pub behavior: ::protobuf::MessageField<ControlBehavior>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.LayoutControl.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LayoutControl {
    fn default() -> &'a LayoutControl {
        <LayoutControl as ::protobuf::Message>::default_instance()
    }
}

impl LayoutControl {
    pub fn new() -> LayoutControl {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node",
            |m: &LayoutControl| { &m.node },
            |m: &mut LayoutControl| { &mut m.node },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlPosition>(
            "position",
            |m: &LayoutControl| { &m.position },
            |m: &mut LayoutControl| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlSize>(
            "size",
            |m: &LayoutControl| { &m.size },
            |m: &mut LayoutControl| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label",
            |m: &LayoutControl| { &m.label },
            |m: &mut LayoutControl| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlDecorations>(
            "decoration",
            |m: &LayoutControl| { &m.decoration },
            |m: &mut LayoutControl| { &mut m.decoration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ControlBehavior>(
            "behavior",
            |m: &LayoutControl| { &m.behavior },
            |m: &mut LayoutControl| { &mut m.behavior },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LayoutControl>(
            "LayoutControl",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LayoutControl {
    const NAME: &'static str = "LayoutControl";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.size)?;
                },
                34 => {
                    self.label = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.decoration)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.behavior)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node);
        }
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.label);
        }
        if let Some(v) = self.decoration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.behavior.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node.is_empty() {
            os.write_string(1, &self.node)?;
        }
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.size.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if !self.label.is_empty() {
            os.write_string(4, &self.label)?;
        }
        if let Some(v) = self.decoration.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.behavior.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LayoutControl {
        LayoutControl::new()
    }

    fn clear(&mut self) {
        self.node.clear();
        self.position.clear();
        self.size.clear();
        self.label.clear();
        self.decoration.clear();
        self.behavior.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LayoutControl {
        static instance: LayoutControl = LayoutControl {
            node: ::std::string::String::new(),
            position: ::protobuf::MessageField::none(),
            size: ::protobuf::MessageField::none(),
            label: ::std::string::String::new(),
            decoration: ::protobuf::MessageField::none(),
            behavior: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LayoutControl {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LayoutControl").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LayoutControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LayoutControl {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.ControlPosition)
pub struct ControlPosition {
    // message fields
    // @@protoc_insertion_point(field:mizer.ControlPosition.x)
    pub x: u64,
    // @@protoc_insertion_point(field:mizer.ControlPosition.y)
    pub y: u64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.ControlPosition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlPosition {
    fn default() -> &'a ControlPosition {
        <ControlPosition as ::protobuf::Message>::default_instance()
    }
}

impl ControlPosition {
    pub fn new() -> ControlPosition {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &ControlPosition| { &m.x },
            |m: &mut ControlPosition| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &ControlPosition| { &m.y },
            |m: &mut ControlPosition| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControlPosition>(
            "ControlPosition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControlPosition {
    const NAME: &'static str = "ControlPosition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.x = is.read_uint64()?;
                },
                16 => {
                    self.y = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0 {
            os.write_uint64(1, self.x)?;
        }
        if self.y != 0 {
            os.write_uint64(2, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlPosition {
        ControlPosition::new()
    }

    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlPosition {
        static instance: ControlPosition = ControlPosition {
            x: 0,
            y: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControlPosition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControlPosition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControlPosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlPosition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.ControlSize)
pub struct ControlSize {
    // message fields
    // @@protoc_insertion_point(field:mizer.ControlSize.width)
    pub width: u64,
    // @@protoc_insertion_point(field:mizer.ControlSize.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.ControlSize.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlSize {
    fn default() -> &'a ControlSize {
        <ControlSize as ::protobuf::Message>::default_instance()
    }
}

impl ControlSize {
    pub fn new() -> ControlSize {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &ControlSize| { &m.width },
            |m: &mut ControlSize| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &ControlSize| { &m.height },
            |m: &mut ControlSize| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControlSize>(
            "ControlSize",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControlSize {
    const NAME: &'static str = "ControlSize";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.width = is.read_uint64()?;
                },
                16 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.width != 0 {
            os.write_uint64(1, self.width)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlSize {
        ControlSize::new()
    }

    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlSize {
        static instance: ControlSize = ControlSize {
            width: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControlSize {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControlSize").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControlSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlSize {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.ControlDecorations)
pub struct ControlDecorations {
    // message fields
    // @@protoc_insertion_point(field:mizer.ControlDecorations.has_color)
    pub has_color: bool,
    // @@protoc_insertion_point(field:mizer.ControlDecorations.color)
    pub color: ::protobuf::MessageField<Color>,
    // @@protoc_insertion_point(field:mizer.ControlDecorations.has_image)
    pub has_image: bool,
    // @@protoc_insertion_point(field:mizer.ControlDecorations.image)
    pub image: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.ControlDecorations.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlDecorations {
    fn default() -> &'a ControlDecorations {
        <ControlDecorations as ::protobuf::Message>::default_instance()
    }
}

impl ControlDecorations {
    pub fn new() -> ControlDecorations {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_color",
            |m: &ControlDecorations| { &m.has_color },
            |m: &mut ControlDecorations| { &mut m.has_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Color>(
            "color",
            |m: &ControlDecorations| { &m.color },
            |m: &mut ControlDecorations| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_image",
            |m: &ControlDecorations| { &m.has_image },
            |m: &mut ControlDecorations| { &mut m.has_image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &ControlDecorations| { &m.image },
            |m: &mut ControlDecorations| { &mut m.image },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControlDecorations>(
            "ControlDecorations",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControlDecorations {
    const NAME: &'static str = "ControlDecorations";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_color = is.read_bool()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.color)?;
                },
                24 => {
                    self.has_image = is.read_bool()?;
                },
                34 => {
                    self.image = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.has_color != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.has_image != false {
            my_size += 1 + 1;
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.image);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.has_color != false {
            os.write_bool(1, self.has_color)?;
        }
        if let Some(v) = self.color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.has_image != false {
            os.write_bool(3, self.has_image)?;
        }
        if !self.image.is_empty() {
            os.write_bytes(4, &self.image)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlDecorations {
        ControlDecorations::new()
    }

    fn clear(&mut self) {
        self.has_color = false;
        self.color.clear();
        self.has_image = false;
        self.image.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlDecorations {
        static instance: ControlDecorations = ControlDecorations {
            has_color: false,
            color: ::protobuf::MessageField::none(),
            has_image: false,
            image: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControlDecorations {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControlDecorations").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControlDecorations {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlDecorations {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.Color)
pub struct Color {
    // message fields
    // @@protoc_insertion_point(field:mizer.Color.red)
    pub red: f64,
    // @@protoc_insertion_point(field:mizer.Color.green)
    pub green: f64,
    // @@protoc_insertion_point(field:mizer.Color.blue)
    pub blue: f64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.Color.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Color {
    fn default() -> &'a Color {
        <Color as ::protobuf::Message>::default_instance()
    }
}

impl Color {
    pub fn new() -> Color {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "red",
            |m: &Color| { &m.red },
            |m: &mut Color| { &mut m.red },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "green",
            |m: &Color| { &m.green },
            |m: &mut Color| { &mut m.green },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "blue",
            |m: &Color| { &m.blue },
            |m: &mut Color| { &mut m.blue },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Color>(
            "Color",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Color {
    const NAME: &'static str = "Color";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.red = is.read_double()?;
                },
                17 => {
                    self.green = is.read_double()?;
                },
                25 => {
                    self.blue = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.red != 0. {
            my_size += 1 + 8;
        }
        if self.green != 0. {
            my_size += 1 + 8;
        }
        if self.blue != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.red != 0. {
            os.write_double(1, self.red)?;
        }
        if self.green != 0. {
            os.write_double(2, self.green)?;
        }
        if self.blue != 0. {
            os.write_double(3, self.blue)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Color {
        Color::new()
    }

    fn clear(&mut self) {
        self.red = 0.;
        self.green = 0.;
        self.blue = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Color {
        static instance: Color = Color {
            red: 0.,
            green: 0.,
            blue: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Color {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Color").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Color {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Color {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.ControlBehavior)
pub struct ControlBehavior {
    // message fields
    // @@protoc_insertion_point(field:mizer.ControlBehavior.sequencer)
    pub sequencer: ::protobuf::MessageField<SequencerControlBehavior>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.ControlBehavior.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlBehavior {
    fn default() -> &'a ControlBehavior {
        <ControlBehavior as ::protobuf::Message>::default_instance()
    }
}

impl ControlBehavior {
    pub fn new() -> ControlBehavior {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SequencerControlBehavior>(
            "sequencer",
            |m: &ControlBehavior| { &m.sequencer },
            |m: &mut ControlBehavior| { &mut m.sequencer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControlBehavior>(
            "ControlBehavior",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControlBehavior {
    const NAME: &'static str = "ControlBehavior";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sequencer)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sequencer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sequencer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlBehavior {
        ControlBehavior::new()
    }

    fn clear(&mut self) {
        self.sequencer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlBehavior {
        static instance: ControlBehavior = ControlBehavior {
            sequencer: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControlBehavior {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControlBehavior").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControlBehavior {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlBehavior {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.SequencerControlBehavior)
pub struct SequencerControlBehavior {
    // message fields
    // @@protoc_insertion_point(field:mizer.SequencerControlBehavior.click_behavior)
    pub click_behavior: ::protobuf::EnumOrUnknown<sequencer_control_behavior::ClickBehavior>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.SequencerControlBehavior.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SequencerControlBehavior {
    fn default() -> &'a SequencerControlBehavior {
        <SequencerControlBehavior as ::protobuf::Message>::default_instance()
    }
}

impl SequencerControlBehavior {
    pub fn new() -> SequencerControlBehavior {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "click_behavior",
            |m: &SequencerControlBehavior| { &m.click_behavior },
            |m: &mut SequencerControlBehavior| { &mut m.click_behavior },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SequencerControlBehavior>(
            "SequencerControlBehavior",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SequencerControlBehavior {
    const NAME: &'static str = "SequencerControlBehavior";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.click_behavior = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.click_behavior != ::protobuf::EnumOrUnknown::new(sequencer_control_behavior::ClickBehavior::GO_FORWARD) {
            my_size += ::protobuf::rt::int32_size(1, self.click_behavior.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.click_behavior != ::protobuf::EnumOrUnknown::new(sequencer_control_behavior::ClickBehavior::GO_FORWARD) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.click_behavior))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SequencerControlBehavior {
        SequencerControlBehavior::new()
    }

    fn clear(&mut self) {
        self.click_behavior = ::protobuf::EnumOrUnknown::new(sequencer_control_behavior::ClickBehavior::GO_FORWARD);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SequencerControlBehavior {
        static instance: SequencerControlBehavior = SequencerControlBehavior {
            click_behavior: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SequencerControlBehavior {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SequencerControlBehavior").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SequencerControlBehavior {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequencerControlBehavior {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SequencerControlBehavior`
pub mod sequencer_control_behavior {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:mizer.SequencerControlBehavior.ClickBehavior)
    pub enum ClickBehavior {
        // @@protoc_insertion_point(enum_value:mizer.SequencerControlBehavior.ClickBehavior.GO_FORWARD)
        GO_FORWARD = 0,
        // @@protoc_insertion_point(enum_value:mizer.SequencerControlBehavior.ClickBehavior.TOGGLE)
        TOGGLE = 1,
    }

    impl ::protobuf::Enum for ClickBehavior {
        const NAME: &'static str = "ClickBehavior";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ClickBehavior> {
            match value {
                0 => ::std::option::Option::Some(ClickBehavior::GO_FORWARD),
                1 => ::std::option::Option::Some(ClickBehavior::TOGGLE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ClickBehavior] = &[
            ClickBehavior::GO_FORWARD,
            ClickBehavior::TOGGLE,
        ];
    }

    impl ::protobuf::EnumFull for ClickBehavior {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("SequencerControlBehavior.ClickBehavior").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ClickBehavior {
        fn default() -> Self {
            ClickBehavior::GO_FORWARD
        }
    }

    impl ClickBehavior {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ClickBehavior>("SequencerControlBehavior.ClickBehavior")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.ReadFaderValueRequest)
pub struct ReadFaderValueRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.ReadFaderValueRequest.node)
    pub node: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.ReadFaderValueRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadFaderValueRequest {
    fn default() -> &'a ReadFaderValueRequest {
        <ReadFaderValueRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadFaderValueRequest {
    pub fn new() -> ReadFaderValueRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "node",
            |m: &ReadFaderValueRequest| { &m.node },
            |m: &mut ReadFaderValueRequest| { &mut m.node },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadFaderValueRequest>(
            "ReadFaderValueRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadFaderValueRequest {
    const NAME: &'static str = "ReadFaderValueRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.node = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.node.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.node);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.node.is_empty() {
            os.write_string(1, &self.node)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadFaderValueRequest {
        ReadFaderValueRequest::new()
    }

    fn clear(&mut self) {
        self.node.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadFaderValueRequest {
        static instance: ReadFaderValueRequest = ReadFaderValueRequest {
            node: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadFaderValueRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadFaderValueRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadFaderValueRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadFaderValueRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.FaderValueResponse)
pub struct FaderValueResponse {
    // message fields
    // @@protoc_insertion_point(field:mizer.FaderValueResponse.value)
    pub value: f64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.FaderValueResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FaderValueResponse {
    fn default() -> &'a FaderValueResponse {
        <FaderValueResponse as ::protobuf::Message>::default_instance()
    }
}

impl FaderValueResponse {
    pub fn new() -> FaderValueResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &FaderValueResponse| { &m.value },
            |m: &mut FaderValueResponse| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FaderValueResponse>(
            "FaderValueResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FaderValueResponse {
    const NAME: &'static str = "FaderValueResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.value = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FaderValueResponse {
        FaderValueResponse::new()
    }

    fn clear(&mut self) {
        self.value = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FaderValueResponse {
        static instance: FaderValueResponse = FaderValueResponse {
            value: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FaderValueResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FaderValueResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FaderValueResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaderValueResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rlayouts.proto\x12\x05mizer\x1a\x0bnodes.proto\"\x10\n\x0eLayoutRespo\
    nse\"\x13\n\x11GetLayoutsRequest\"&\n\x10AddLayoutRequest\x12\x12\n\x04n\
    ame\x18\x01\x20\x01(\tR\x04name\"%\n\x13RemoveLayoutRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\"9\n\x13RenameLayoutRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\"f\n\x14RenameControlRequest\x12\x1b\n\tlayout_id\x18\x01\x20\
    \x01(\tR\x08layoutId\x12\x1d\n\ncontrol_id\x18\x02\x20\x01(\tR\tcontrolI\
    d\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\"\x84\x01\n\x12MoveContr\
    olRequest\x12\x1b\n\tlayout_id\x18\x01\x20\x01(\tR\x08layoutId\x12\x1d\n\
    \ncontrol_id\x18\x02\x20\x01(\tR\tcontrolId\x122\n\x08position\x18\x03\
    \x20\x01(\x0b2\x16.mizer.ControlPositionR\x08position\"\x99\x01\n\x1eUpd\
    ateControlDecorationRequest\x12\x1b\n\tlayout_id\x18\x01\x20\x01(\tR\x08\
    layoutId\x12\x1d\n\ncontrol_id\x18\x02\x20\x01(\tR\tcontrolId\x12;\n\x0b\
    decorations\x18\x03\x20\x01(\x0b2\x19.mizer.ControlDecorationsR\x0bdecor\
    ations\"\x8e\x01\n\x1cUpdateControlBehaviorRequest\x12\x1b\n\tlayout_id\
    \x18\x01\x20\x01(\tR\x08layoutId\x12\x1d\n\ncontrol_id\x18\x02\x20\x01(\
    \tR\tcontrolId\x122\n\x08behavior\x18\x03\x20\x01(\x0b2\x16.mizer.Contro\
    lBehaviorR\x08behavior\"R\n\x14RemoveControlRequest\x12\x1b\n\tlayout_id\
    \x18\x01\x20\x01(\tR\x08layoutId\x12\x1d\n\ncontrol_id\x18\x02\x20\x01(\
    \tR\tcontrolId\"\x9d\x01\n\x11AddControlRequest\x12\x1b\n\tlayout_id\x18\
    \x01\x20\x01(\tR\x08layoutId\x127\n\tnode_type\x18\x02\x20\x01(\x0e2\x1a\
    .mizer.nodes.Node.NodeTypeR\x08nodeType\x122\n\x08position\x18\x03\x20\
    \x01(\x0b2\x16.mizer.ControlPositionR\x08position\"\x80\x01\n\x19AddExis\
    tingControlRequest\x12\x1b\n\tlayout_id\x18\x01\x20\x01(\tR\x08layoutId\
    \x12\x12\n\x04node\x18\x02\x20\x01(\tR\x04node\x122\n\x08position\x18\
    \x03\x20\x01(\x0b2\x16.mizer.ControlPositionR\x08position\"2\n\x07Layout\
    s\x12'\n\x07layouts\x18\x01\x20\x03(\x0b2\r.mizer.LayoutR\x07layouts\"J\
    \n\x06Layout\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x120\n\x08control\
    s\x18\x02\x20\x03(\x0b2\x14.mizer.LayoutControlR\x08controls\"\x84\x02\n\
    \rLayoutControl\x12\x12\n\x04node\x18\x01\x20\x01(\tR\x04node\x122\n\x08\
    position\x18\x02\x20\x01(\x0b2\x16.mizer.ControlPositionR\x08position\
    \x12&\n\x04size\x18\x03\x20\x01(\x0b2\x12.mizer.ControlSizeR\x04size\x12\
    \x14\n\x05label\x18\x04\x20\x01(\tR\x05label\x129\n\ndecoration\x18\x05\
    \x20\x01(\x0b2\x19.mizer.ControlDecorationsR\ndecoration\x122\n\x08behav\
    ior\x18\x06\x20\x01(\x0b2\x16.mizer.ControlBehaviorR\x08behavior\"-\n\
    \x0fControlPosition\x12\x0c\n\x01x\x18\x01\x20\x01(\x04R\x01x\x12\x0c\n\
    \x01y\x18\x02\x20\x01(\x04R\x01y\";\n\x0bControlSize\x12\x14\n\x05width\
    \x18\x01\x20\x01(\x04R\x05width\x12\x16\n\x06height\x18\x02\x20\x01(\x04\
    R\x06height\"\x88\x01\n\x12ControlDecorations\x12\x1b\n\thas_color\x18\
    \x01\x20\x01(\x08R\x08hasColor\x12\"\n\x05color\x18\x02\x20\x01(\x0b2\
    \x0c.mizer.ColorR\x05color\x12\x1b\n\thas_image\x18\x03\x20\x01(\x08R\
    \x08hasImage\x12\x14\n\x05image\x18\x04\x20\x01(\x0cR\x05image\"C\n\x05C\
    olor\x12\x10\n\x03red\x18\x01\x20\x01(\x01R\x03red\x12\x14\n\x05green\
    \x18\x02\x20\x01(\x01R\x05green\x12\x12\n\x04blue\x18\x03\x20\x01(\x01R\
    \x04blue\"P\n\x0fControlBehavior\x12=\n\tsequencer\x18\x01\x20\x01(\x0b2\
    \x1f.mizer.SequencerControlBehaviorR\tsequencer\"\x9d\x01\n\x18Sequencer\
    ControlBehavior\x12T\n\x0eclick_behavior\x18\x01\x20\x01(\x0e2-.mizer.Se\
    quencerControlBehavior.ClickBehaviorR\rclickBehavior\"+\n\rClickBehavior\
    \x12\x0e\n\nGO_FORWARD\x10\0\x12\n\n\x06TOGGLE\x10\x01\"+\n\x15ReadFader\
    ValueRequest\x12\x12\n\x04node\x18\x01\x20\x01(\tR\x04node\"*\n\x12Fader\
    ValueResponse\x12\x14\n\x05value\x18\x01\x20\x01(\x01R\x05value2\xc4\x06\
    \n\nLayoutsApi\x126\n\nGetLayouts\x12\x18.mizer.GetLayoutsRequest\x1a\
    \x0e.mizer.Layouts\x124\n\tAddLayout\x12\x17.mizer.AddLayoutRequest\x1a\
    \x0e.mizer.Layouts\x12:\n\x0cRemoveLayout\x12\x1a.mizer.RemoveLayoutRequ\
    est\x1a\x0e.mizer.Layouts\x12:\n\x0cRenameLayout\x12\x1a.mizer.RenameLay\
    outRequest\x1a\x0e.mizer.Layouts\x12C\n\rRenameControl\x12\x1b.mizer.Ren\
    ameControlRequest\x1a\x15.mizer.LayoutResponse\x12?\n\x0bMoveControl\x12\
    \x19.mizer.MoveControlRequest\x1a\x15.mizer.LayoutResponse\x12W\n\x17Upd\
    ateControlDecoration\x12%.mizer.UpdateControlDecorationRequest\x1a\x15.m\
    izer.LayoutResponse\x12S\n\x15UpdateControlBehavior\x12#.mizer.UpdateCon\
    trolBehaviorRequest\x1a\x15.mizer.LayoutResponse\x12C\n\rRemoveControl\
    \x12\x1b.mizer.RemoveControlRequest\x1a\x15.mizer.LayoutResponse\x12=\n\
    \nAddControl\x12\x18.mizer.AddControlRequest\x1a\x15.mizer.LayoutRespons\
    e\x12M\n\x12AddExistingControl\x12\x20.mizer.AddExistingControlRequest\
    \x1a\x15.mizer.LayoutResponse\x12I\n\x0eReadFaderValue\x12\x1c.mizer.Rea\
    dFaderValueRequest\x1a\x19.mizer.FaderValueResponseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::nodes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(23);
            messages.push(LayoutResponse::generated_message_descriptor_data());
            messages.push(GetLayoutsRequest::generated_message_descriptor_data());
            messages.push(AddLayoutRequest::generated_message_descriptor_data());
            messages.push(RemoveLayoutRequest::generated_message_descriptor_data());
            messages.push(RenameLayoutRequest::generated_message_descriptor_data());
            messages.push(RenameControlRequest::generated_message_descriptor_data());
            messages.push(MoveControlRequest::generated_message_descriptor_data());
            messages.push(UpdateControlDecorationRequest::generated_message_descriptor_data());
            messages.push(UpdateControlBehaviorRequest::generated_message_descriptor_data());
            messages.push(RemoveControlRequest::generated_message_descriptor_data());
            messages.push(AddControlRequest::generated_message_descriptor_data());
            messages.push(AddExistingControlRequest::generated_message_descriptor_data());
            messages.push(Layouts::generated_message_descriptor_data());
            messages.push(Layout::generated_message_descriptor_data());
            messages.push(LayoutControl::generated_message_descriptor_data());
            messages.push(ControlPosition::generated_message_descriptor_data());
            messages.push(ControlSize::generated_message_descriptor_data());
            messages.push(ControlDecorations::generated_message_descriptor_data());
            messages.push(Color::generated_message_descriptor_data());
            messages.push(ControlBehavior::generated_message_descriptor_data());
            messages.push(SequencerControlBehavior::generated_message_descriptor_data());
            messages.push(ReadFaderValueRequest::generated_message_descriptor_data());
            messages.push(FaderValueResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(sequencer_control_behavior::ClickBehavior::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
