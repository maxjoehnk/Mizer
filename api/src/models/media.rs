// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `media.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.GetMediaTags)
pub struct GetMediaTags {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.GetMediaTags.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMediaTags {
    fn default() -> &'a GetMediaTags {
        <GetMediaTags as ::protobuf::Message>::default_instance()
    }
}

impl GetMediaTags {
    pub fn new() -> GetMediaTags {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMediaTags>(
            "GetMediaTags",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMediaTags {
    const NAME: &'static str = "GetMediaTags";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMediaTags {
        GetMediaTags::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMediaTags {
        static instance: GetMediaTags = GetMediaTags {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMediaTags {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMediaTags").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMediaTags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMediaTags {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.GetMediaRequest)
pub struct GetMediaRequest {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.GetMediaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMediaRequest {
    fn default() -> &'a GetMediaRequest {
        <GetMediaRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMediaRequest {
    pub fn new() -> GetMediaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMediaRequest>(
            "GetMediaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMediaRequest {
    const NAME: &'static str = "GetMediaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMediaRequest {
        GetMediaRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMediaRequest {
        static instance: GetMediaRequest = GetMediaRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMediaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMediaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMediaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMediaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.CreateMediaTag)
pub struct CreateMediaTag {
    // message fields
    // @@protoc_insertion_point(field:mizer.CreateMediaTag.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.CreateMediaTag.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateMediaTag {
    fn default() -> &'a CreateMediaTag {
        <CreateMediaTag as ::protobuf::Message>::default_instance()
    }
}

impl CreateMediaTag {
    pub fn new() -> CreateMediaTag {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &CreateMediaTag| { &m.name },
            |m: &mut CreateMediaTag| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateMediaTag>(
            "CreateMediaTag",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateMediaTag {
    const NAME: &'static str = "CreateMediaTag";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateMediaTag {
        CreateMediaTag::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateMediaTag {
        static instance: CreateMediaTag = CreateMediaTag {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateMediaTag {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateMediaTag").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateMediaTag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMediaTag {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaTags)
pub struct MediaTags {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaTags.tags)
    pub tags: ::std::vec::Vec<MediaTag>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaTags.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaTags {
    fn default() -> &'a MediaTags {
        <MediaTags as ::protobuf::Message>::default_instance()
    }
}

impl MediaTags {
    pub fn new() -> MediaTags {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &MediaTags| { &m.tags },
            |m: &mut MediaTags| { &mut m.tags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaTags>(
            "MediaTags",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaTags {
    const NAME: &'static str = "MediaTags";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tags.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tags {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaTags {
        MediaTags::new()
    }

    fn clear(&mut self) {
        self.tags.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaTags {
        static instance: MediaTags = MediaTags {
            tags: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaTags {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaTags").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaTags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaTags {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaTag)
pub struct MediaTag {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaTag.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MediaTag.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaTag.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaTag {
    fn default() -> &'a MediaTag {
        <MediaTag as ::protobuf::Message>::default_instance()
    }
}

impl MediaTag {
    pub fn new() -> MediaTag {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MediaTag| { &m.id },
            |m: &mut MediaTag| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MediaTag| { &m.name },
            |m: &mut MediaTag| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaTag>(
            "MediaTag",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaTag {
    const NAME: &'static str = "MediaTag";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaTag {
        MediaTag::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaTag {
        static instance: MediaTag = MediaTag {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaTag {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaTag").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaTag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaTag {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaFiles)
pub struct MediaFiles {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaFiles.files)
    pub files: ::std::vec::Vec<MediaFile>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaFiles.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaFiles {
    fn default() -> &'a MediaFiles {
        <MediaFiles as ::protobuf::Message>::default_instance()
    }
}

impl MediaFiles {
    pub fn new() -> MediaFiles {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &MediaFiles| { &m.files },
            |m: &mut MediaFiles| { &mut m.files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaFiles>(
            "MediaFiles",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaFiles {
    const NAME: &'static str = "MediaFiles";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.files {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaFiles {
        MediaFiles::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaFiles {
        static instance: MediaFiles = MediaFiles {
            files: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaFiles {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaFiles").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaFiles {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaFiles {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaFile)
pub struct MediaFile {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaFile.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MediaFile.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MediaFile.type)
    pub type_: ::protobuf::EnumOrUnknown<MediaType>,
    // @@protoc_insertion_point(field:mizer.MediaFile.metadata)
    pub metadata: ::protobuf::MessageField<MediaMetadata>,
    // @@protoc_insertion_point(field:mizer.MediaFile.thumbnail_url)
    pub thumbnail_url: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MediaFile.content_url)
    pub content_url: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaFile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaFile {
    fn default() -> &'a MediaFile {
        <MediaFile as ::protobuf::Message>::default_instance()
    }
}

impl MediaFile {
    pub fn new() -> MediaFile {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MediaFile| { &m.id },
            |m: &mut MediaFile| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MediaFile| { &m.name },
            |m: &mut MediaFile| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MediaFile| { &m.type_ },
            |m: &mut MediaFile| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MediaMetadata>(
            "metadata",
            |m: &MediaFile| { &m.metadata },
            |m: &mut MediaFile| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thumbnail_url",
            |m: &MediaFile| { &m.thumbnail_url },
            |m: &mut MediaFile| { &mut m.thumbnail_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content_url",
            |m: &MediaFile| { &m.content_url },
            |m: &mut MediaFile| { &mut m.content_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaFile>(
            "MediaFile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaFile {
    const NAME: &'static str = "MediaFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                42 => {
                    self.thumbnail_url = is.read_string()?;
                },
                50 => {
                    self.content_url = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MediaType::IMAGE) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.thumbnail_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.thumbnail_url);
        }
        if !self.content_url.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.content_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MediaType::IMAGE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self.thumbnail_url.is_empty() {
            os.write_string(5, &self.thumbnail_url)?;
        }
        if !self.content_url.is_empty() {
            os.write_string(6, &self.content_url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaFile {
        MediaFile::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(MediaType::IMAGE);
        self.metadata.clear();
        self.thumbnail_url.clear();
        self.content_url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaFile {
        static instance: MediaFile = MediaFile {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            metadata: ::protobuf::MessageField::none(),
            thumbnail_url: ::std::string::String::new(),
            content_url: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaFile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaFile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaMetadata)
pub struct MediaMetadata {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaMetadata.source_path)
    pub source_path: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.file_size)
    pub file_size: u64,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.tags)
    pub tags: ::std::vec::Vec<MediaTag>,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.dimensions)
    pub dimensions: ::protobuf::MessageField<media_metadata::Dimensions>,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.duration)
    pub duration: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.framerate)
    pub framerate: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.album)
    pub album: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mizer.MediaMetadata.artist)
    pub artist: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaMetadata {
    fn default() -> &'a MediaMetadata {
        <MediaMetadata as ::protobuf::Message>::default_instance()
    }
}

impl MediaMetadata {
    pub fn new() -> MediaMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_path",
            |m: &MediaMetadata| { &m.source_path },
            |m: &mut MediaMetadata| { &mut m.source_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_size",
            |m: &MediaMetadata| { &m.file_size },
            |m: &mut MediaMetadata| { &mut m.file_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &MediaMetadata| { &m.tags },
            |m: &mut MediaMetadata| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, media_metadata::Dimensions>(
            "dimensions",
            |m: &MediaMetadata| { &m.dimensions },
            |m: &mut MediaMetadata| { &mut m.dimensions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "duration",
            |m: &MediaMetadata| { &m.duration },
            |m: &mut MediaMetadata| { &mut m.duration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "framerate",
            |m: &MediaMetadata| { &m.framerate },
            |m: &mut MediaMetadata| { &mut m.framerate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "album",
            |m: &MediaMetadata| { &m.album },
            |m: &mut MediaMetadata| { &mut m.album },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "artist",
            |m: &MediaMetadata| { &m.artist },
            |m: &mut MediaMetadata| { &mut m.artist },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaMetadata>(
            "MediaMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaMetadata {
    const NAME: &'static str = "MediaMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_path = is.read_string()?;
                },
                16 => {
                    self.file_size = is.read_uint64()?;
                },
                26 => {
                    self.tags.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dimensions)?;
                },
                40 => {
                    self.duration = ::std::option::Option::Some(is.read_uint64()?);
                },
                49 => {
                    self.framerate = ::std::option::Option::Some(is.read_double()?);
                },
                58 => {
                    self.album = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.artist = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.source_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.source_path);
        }
        if self.file_size != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.file_size);
        }
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.dimensions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.duration {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.framerate {
            my_size += 1 + 8;
        }
        if let Some(v) = self.album.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.artist.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.source_path.is_empty() {
            os.write_string(1, &self.source_path)?;
        }
        if self.file_size != 0 {
            os.write_uint64(2, self.file_size)?;
        }
        for v in &self.tags {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.dimensions.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.duration {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.framerate {
            os.write_double(6, v)?;
        }
        if let Some(v) = self.album.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.artist.as_ref() {
            os.write_string(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaMetadata {
        MediaMetadata::new()
    }

    fn clear(&mut self) {
        self.source_path.clear();
        self.file_size = 0;
        self.tags.clear();
        self.dimensions.clear();
        self.duration = ::std::option::Option::None;
        self.framerate = ::std::option::Option::None;
        self.album = ::std::option::Option::None;
        self.artist = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaMetadata {
        static instance: MediaMetadata = MediaMetadata {
            source_path: ::std::string::String::new(),
            file_size: 0,
            tags: ::std::vec::Vec::new(),
            dimensions: ::protobuf::MessageField::none(),
            duration: ::std::option::Option::None,
            framerate: ::std::option::Option::None,
            album: ::std::option::Option::None,
            artist: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MediaMetadata`
pub mod media_metadata {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:mizer.MediaMetadata.Dimensions)
    pub struct Dimensions {
        // message fields
        // @@protoc_insertion_point(field:mizer.MediaMetadata.Dimensions.width)
        pub width: u64,
        // @@protoc_insertion_point(field:mizer.MediaMetadata.Dimensions.height)
        pub height: u64,
        // special fields
        // @@protoc_insertion_point(special_field:mizer.MediaMetadata.Dimensions.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Dimensions {
        fn default() -> &'a Dimensions {
            <Dimensions as ::protobuf::Message>::default_instance()
        }
    }

    impl Dimensions {
        pub fn new() -> Dimensions {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "width",
                |m: &Dimensions| { &m.width },
                |m: &mut Dimensions| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "height",
                |m: &Dimensions| { &m.height },
                |m: &mut Dimensions| { &mut m.height },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dimensions>(
                "MediaMetadata.Dimensions",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Dimensions {
        const NAME: &'static str = "Dimensions";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.width = is.read_uint64()?;
                    },
                    16 => {
                        self.height = is.read_uint64()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.width != 0 {
                my_size += ::protobuf::rt::uint64_size(1, self.width);
            }
            if self.height != 0 {
                my_size += ::protobuf::rt::uint64_size(2, self.height);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.width != 0 {
                os.write_uint64(1, self.width)?;
            }
            if self.height != 0 {
                os.write_uint64(2, self.height)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Dimensions {
            Dimensions::new()
        }

        fn clear(&mut self) {
            self.width = 0;
            self.height = 0;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Dimensions {
            static instance: Dimensions = Dimensions {
                width: 0,
                height: 0,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Dimensions {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("MediaMetadata.Dimensions").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Dimensions {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Dimensions {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.GroupedMediaFiles)
pub struct GroupedMediaFiles {
    // message fields
    // @@protoc_insertion_point(field:mizer.GroupedMediaFiles.tags)
    pub tags: ::std::vec::Vec<MediaTagWithFiles>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.GroupedMediaFiles.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GroupedMediaFiles {
    fn default() -> &'a GroupedMediaFiles {
        <GroupedMediaFiles as ::protobuf::Message>::default_instance()
    }
}

impl GroupedMediaFiles {
    pub fn new() -> GroupedMediaFiles {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &GroupedMediaFiles| { &m.tags },
            |m: &mut GroupedMediaFiles| { &mut m.tags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GroupedMediaFiles>(
            "GroupedMediaFiles",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GroupedMediaFiles {
    const NAME: &'static str = "GroupedMediaFiles";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tags.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tags {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GroupedMediaFiles {
        GroupedMediaFiles::new()
    }

    fn clear(&mut self) {
        self.tags.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GroupedMediaFiles {
        static instance: GroupedMediaFiles = GroupedMediaFiles {
            tags: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GroupedMediaFiles {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GroupedMediaFiles").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GroupedMediaFiles {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupedMediaFiles {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.MediaTagWithFiles)
pub struct MediaTagWithFiles {
    // message fields
    // @@protoc_insertion_point(field:mizer.MediaTagWithFiles.tag)
    pub tag: ::protobuf::MessageField<MediaTag>,
    // @@protoc_insertion_point(field:mizer.MediaTagWithFiles.files)
    pub files: ::std::vec::Vec<MediaFile>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.MediaTagWithFiles.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MediaTagWithFiles {
    fn default() -> &'a MediaTagWithFiles {
        <MediaTagWithFiles as ::protobuf::Message>::default_instance()
    }
}

impl MediaTagWithFiles {
    pub fn new() -> MediaTagWithFiles {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MediaTag>(
            "tag",
            |m: &MediaTagWithFiles| { &m.tag },
            |m: &mut MediaTagWithFiles| { &mut m.tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &MediaTagWithFiles| { &m.files },
            |m: &mut MediaTagWithFiles| { &mut m.files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MediaTagWithFiles>(
            "MediaTagWithFiles",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MediaTagWithFiles {
    const NAME: &'static str = "MediaTagWithFiles";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tag)?;
                },
                18 => {
                    self.files.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tag.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tag.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.files {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MediaTagWithFiles {
        MediaTagWithFiles::new()
    }

    fn clear(&mut self) {
        self.tag.clear();
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MediaTagWithFiles {
        static instance: MediaTagWithFiles = MediaTagWithFiles {
            tag: ::protobuf::MessageField::none(),
            files: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MediaTagWithFiles {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MediaTagWithFiles").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MediaTagWithFiles {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MediaTagWithFiles {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:mizer.MediaType)
pub enum MediaType {
    // @@protoc_insertion_point(enum_value:mizer.MediaType.IMAGE)
    IMAGE = 0,
    // @@protoc_insertion_point(enum_value:mizer.MediaType.AUDIO)
    AUDIO = 1,
    // @@protoc_insertion_point(enum_value:mizer.MediaType.VIDEO)
    VIDEO = 2,
    // @@protoc_insertion_point(enum_value:mizer.MediaType.VECTOR)
    VECTOR = 3,
}

impl ::protobuf::Enum for MediaType {
    const NAME: &'static str = "MediaType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MediaType> {
        match value {
            0 => ::std::option::Option::Some(MediaType::IMAGE),
            1 => ::std::option::Option::Some(MediaType::AUDIO),
            2 => ::std::option::Option::Some(MediaType::VIDEO),
            3 => ::std::option::Option::Some(MediaType::VECTOR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MediaType] = &[
        MediaType::IMAGE,
        MediaType::AUDIO,
        MediaType::VIDEO,
        MediaType::VECTOR,
    ];
}

impl ::protobuf::EnumFull for MediaType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MediaType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MediaType {
    fn default() -> Self {
        MediaType::IMAGE
    }
}

impl MediaType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MediaType>("MediaType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bmedia.proto\x12\x05mizer\"\x0e\n\x0cGetMediaTags\"\x11\n\x0fGetMed\
    iaRequest\"$\n\x0eCreateMediaTag\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\"0\n\tMediaTags\x12#\n\x04tags\x18\x01\x20\x03(\x0b2\x0f.mizer.\
    MediaTagR\x04tags\".\n\x08MediaTag\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"4\n\nMediaFiles\
    \x12&\n\x05files\x18\x01\x20\x03(\x0b2\x10.mizer.MediaFileR\x05files\"\
    \xcd\x01\n\tMediaFile\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\
    \n\x04name\x18\x02\x20\x01(\tR\x04name\x12$\n\x04type\x18\x03\x20\x01(\
    \x0e2\x10.mizer.MediaTypeR\x04type\x120\n\x08metadata\x18\x04\x20\x01(\
    \x0b2\x14.mizer.MediaMetadataR\x08metadata\x12#\n\rthumbnail_url\x18\x05\
    \x20\x01(\tR\x0cthumbnailUrl\x12\x1f\n\x0bcontent_url\x18\x06\x20\x01(\t\
    R\ncontentUrl\"\xaf\x03\n\rMediaMetadata\x12\x1f\n\x0bsource_path\x18\
    \x01\x20\x01(\tR\nsourcePath\x12\x1b\n\tfile_size\x18\x02\x20\x01(\x04R\
    \x08fileSize\x12#\n\x04tags\x18\x03\x20\x03(\x0b2\x0f.mizer.MediaTagR\
    \x04tags\x12D\n\ndimensions\x18\x04\x20\x01(\x0b2\x1f.mizer.MediaMetadat\
    a.DimensionsH\0R\ndimensions\x88\x01\x01\x12\x1f\n\x08duration\x18\x05\
    \x20\x01(\x04H\x01R\x08duration\x88\x01\x01\x12!\n\tframerate\x18\x06\
    \x20\x01(\x01H\x02R\tframerate\x88\x01\x01\x12\x19\n\x05album\x18\x07\
    \x20\x01(\tH\x03R\x05album\x88\x01\x01\x12\x1b\n\x06artist\x18\x08\x20\
    \x01(\tH\x04R\x06artist\x88\x01\x01\x1a:\n\nDimensions\x12\x14\n\x05widt\
    h\x18\x01\x20\x01(\x04R\x05width\x12\x16\n\x06height\x18\x02\x20\x01(\
    \x04R\x06heightB\r\n\x0b_dimensionsB\x0b\n\t_durationB\x0c\n\n_framerate\
    B\x08\n\x06_albumB\t\n\x07_artist\"A\n\x11GroupedMediaFiles\x12,\n\x04ta\
    gs\x18\x01\x20\x03(\x0b2\x18.mizer.MediaTagWithFilesR\x04tags\"^\n\x11Me\
    diaTagWithFiles\x12!\n\x03tag\x18\x01\x20\x01(\x0b2\x0f.mizer.MediaTagR\
    \x03tag\x12&\n\x05files\x18\x02\x20\x03(\x0b2\x10.mizer.MediaFileR\x05fi\
    les*8\n\tMediaType\x12\t\n\x05IMAGE\x10\0\x12\t\n\x05AUDIO\x10\x01\x12\t\
    \n\x05VIDEO\x10\x02\x12\n\n\x06VECTOR\x10\x032\xb9\x01\n\x08MediaApi\x12\
    3\n\tCreateTag\x12\x15.mizer.CreateMediaTag\x1a\x0f.mizer.MediaTag\x12A\
    \n\x10GetTagsWithMedia\x12\x13.mizer.GetMediaTags\x1a\x18.mizer.GroupedM\
    ediaFiles\x125\n\x08GetMedia\x12\x16.mizer.GetMediaRequest\x1a\x11.mizer\
    .MediaFilesb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(GetMediaTags::generated_message_descriptor_data());
            messages.push(GetMediaRequest::generated_message_descriptor_data());
            messages.push(CreateMediaTag::generated_message_descriptor_data());
            messages.push(MediaTags::generated_message_descriptor_data());
            messages.push(MediaTag::generated_message_descriptor_data());
            messages.push(MediaFiles::generated_message_descriptor_data());
            messages.push(MediaFile::generated_message_descriptor_data());
            messages.push(MediaMetadata::generated_message_descriptor_data());
            messages.push(GroupedMediaFiles::generated_message_descriptor_data());
            messages.push(MediaTagWithFiles::generated_message_descriptor_data());
            messages.push(media_metadata::Dimensions::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MediaType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
