// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `plans.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.PlansRequest)
pub struct PlansRequest {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.PlansRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlansRequest {
    fn default() -> &'a PlansRequest {
        <PlansRequest as ::protobuf::Message>::default_instance()
    }
}

impl PlansRequest {
    pub fn new() -> PlansRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlansRequest>(
            "PlansRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlansRequest {
    const NAME: &'static str = "PlansRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlansRequest {
        PlansRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlansRequest {
        static instance: PlansRequest = PlansRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlansRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlansRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlansRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlansRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.AddPlanRequest)
pub struct AddPlanRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.AddPlanRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.AddPlanRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddPlanRequest {
    fn default() -> &'a AddPlanRequest {
        <AddPlanRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddPlanRequest {
    pub fn new() -> AddPlanRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &AddPlanRequest| { &m.name },
            |m: &mut AddPlanRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddPlanRequest>(
            "AddPlanRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddPlanRequest {
    const NAME: &'static str = "AddPlanRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddPlanRequest {
        AddPlanRequest::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddPlanRequest {
        static instance: AddPlanRequest = AddPlanRequest {
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddPlanRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddPlanRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddPlanRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddPlanRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.RemovePlanRequest)
pub struct RemovePlanRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.RemovePlanRequest.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.RemovePlanRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RemovePlanRequest {
    fn default() -> &'a RemovePlanRequest {
        <RemovePlanRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemovePlanRequest {
    pub fn new() -> RemovePlanRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RemovePlanRequest| { &m.id },
            |m: &mut RemovePlanRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RemovePlanRequest>(
            "RemovePlanRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RemovePlanRequest {
    const NAME: &'static str = "RemovePlanRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RemovePlanRequest {
        RemovePlanRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RemovePlanRequest {
        static instance: RemovePlanRequest = RemovePlanRequest {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RemovePlanRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RemovePlanRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RemovePlanRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemovePlanRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.RenamePlanRequest)
pub struct RenamePlanRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.RenamePlanRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.plan.RenamePlanRequest.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.RenamePlanRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RenamePlanRequest {
    fn default() -> &'a RenamePlanRequest {
        <RenamePlanRequest as ::protobuf::Message>::default_instance()
    }
}

impl RenamePlanRequest {
    pub fn new() -> RenamePlanRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RenamePlanRequest| { &m.id },
            |m: &mut RenamePlanRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &RenamePlanRequest| { &m.name },
            |m: &mut RenamePlanRequest| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RenamePlanRequest>(
            "RenamePlanRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RenamePlanRequest {
    const NAME: &'static str = "RenamePlanRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RenamePlanRequest {
        RenamePlanRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RenamePlanRequest {
        static instance: RenamePlanRequest = RenamePlanRequest {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RenamePlanRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RenamePlanRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RenamePlanRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RenamePlanRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.MoveFixturesRequest)
pub struct MoveFixturesRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.MoveFixturesRequest.plan_id)
    pub plan_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.plan.MoveFixturesRequest.x)
    pub x: i32,
    // @@protoc_insertion_point(field:mizer.plan.MoveFixturesRequest.y)
    pub y: i32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.MoveFixturesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MoveFixturesRequest {
    fn default() -> &'a MoveFixturesRequest {
        <MoveFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl MoveFixturesRequest {
    pub fn new() -> MoveFixturesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plan_id",
            |m: &MoveFixturesRequest| { &m.plan_id },
            |m: &mut MoveFixturesRequest| { &mut m.plan_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &MoveFixturesRequest| { &m.x },
            |m: &mut MoveFixturesRequest| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &MoveFixturesRequest| { &m.y },
            |m: &mut MoveFixturesRequest| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MoveFixturesRequest>(
            "MoveFixturesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MoveFixturesRequest {
    const NAME: &'static str = "MoveFixturesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plan_id = is.read_string()?;
                },
                16 => {
                    self.x = is.read_int32()?;
                },
                24 => {
                    self.y = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plan_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plan_id);
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plan_id.is_empty() {
            os.write_string(1, &self.plan_id)?;
        }
        if self.x != 0 {
            os.write_int32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(3, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MoveFixturesRequest {
        MoveFixturesRequest::new()
    }

    fn clear(&mut self) {
        self.plan_id.clear();
        self.x = 0;
        self.y = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MoveFixturesRequest {
        static instance: MoveFixturesRequest = MoveFixturesRequest {
            plan_id: ::std::string::String::new(),
            x: 0,
            y: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MoveFixturesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MoveFixturesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MoveFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveFixturesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.AlignFixturesRequest)
pub struct AlignFixturesRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.AlignFixturesRequest.plan_id)
    pub plan_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.plan.AlignFixturesRequest.direction)
    pub direction: ::protobuf::EnumOrUnknown<align_fixtures_request::AlignDirection>,
    // @@protoc_insertion_point(field:mizer.plan.AlignFixturesRequest.groups)
    pub groups: u32,
    // @@protoc_insertion_point(field:mizer.plan.AlignFixturesRequest.row_gap)
    pub row_gap: u32,
    // @@protoc_insertion_point(field:mizer.plan.AlignFixturesRequest.column_gap)
    pub column_gap: u32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.AlignFixturesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AlignFixturesRequest {
    fn default() -> &'a AlignFixturesRequest {
        <AlignFixturesRequest as ::protobuf::Message>::default_instance()
    }
}

impl AlignFixturesRequest {
    pub fn new() -> AlignFixturesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plan_id",
            |m: &AlignFixturesRequest| { &m.plan_id },
            |m: &mut AlignFixturesRequest| { &mut m.plan_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &AlignFixturesRequest| { &m.direction },
            |m: &mut AlignFixturesRequest| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "groups",
            |m: &AlignFixturesRequest| { &m.groups },
            |m: &mut AlignFixturesRequest| { &mut m.groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row_gap",
            |m: &AlignFixturesRequest| { &m.row_gap },
            |m: &mut AlignFixturesRequest| { &mut m.row_gap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "column_gap",
            |m: &AlignFixturesRequest| { &m.column_gap },
            |m: &mut AlignFixturesRequest| { &mut m.column_gap },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AlignFixturesRequest>(
            "AlignFixturesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AlignFixturesRequest {
    const NAME: &'static str = "AlignFixturesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plan_id = is.read_string()?;
                },
                16 => {
                    self.direction = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.groups = is.read_uint32()?;
                },
                32 => {
                    self.row_gap = is.read_uint32()?;
                },
                40 => {
                    self.column_gap = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plan_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plan_id);
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(align_fixtures_request::AlignDirection::LEFT_TO_RIGHT) {
            my_size += ::protobuf::rt::int32_size(2, self.direction.value());
        }
        if self.groups != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.groups);
        }
        if self.row_gap != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.row_gap);
        }
        if self.column_gap != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.column_gap);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plan_id.is_empty() {
            os.write_string(1, &self.plan_id)?;
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(align_fixtures_request::AlignDirection::LEFT_TO_RIGHT) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.direction))?;
        }
        if self.groups != 0 {
            os.write_uint32(3, self.groups)?;
        }
        if self.row_gap != 0 {
            os.write_uint32(4, self.row_gap)?;
        }
        if self.column_gap != 0 {
            os.write_uint32(5, self.column_gap)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AlignFixturesRequest {
        AlignFixturesRequest::new()
    }

    fn clear(&mut self) {
        self.plan_id.clear();
        self.direction = ::protobuf::EnumOrUnknown::new(align_fixtures_request::AlignDirection::LEFT_TO_RIGHT);
        self.groups = 0;
        self.row_gap = 0;
        self.column_gap = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AlignFixturesRequest {
        static instance: AlignFixturesRequest = AlignFixturesRequest {
            plan_id: ::std::string::String::new(),
            direction: ::protobuf::EnumOrUnknown::from_i32(0),
            groups: 0,
            row_gap: 0,
            column_gap: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AlignFixturesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AlignFixturesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AlignFixturesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlignFixturesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AlignFixturesRequest`
pub mod align_fixtures_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:mizer.plan.AlignFixturesRequest.AlignDirection)
    pub enum AlignDirection {
        // @@protoc_insertion_point(enum_value:mizer.plan.AlignFixturesRequest.AlignDirection.LEFT_TO_RIGHT)
        LEFT_TO_RIGHT = 0,
        // @@protoc_insertion_point(enum_value:mizer.plan.AlignFixturesRequest.AlignDirection.TOP_TO_BOTTOM)
        TOP_TO_BOTTOM = 1,
    }

    impl ::protobuf::Enum for AlignDirection {
        const NAME: &'static str = "AlignDirection";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<AlignDirection> {
            match value {
                0 => ::std::option::Option::Some(AlignDirection::LEFT_TO_RIGHT),
                1 => ::std::option::Option::Some(AlignDirection::TOP_TO_BOTTOM),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [AlignDirection] = &[
            AlignDirection::LEFT_TO_RIGHT,
            AlignDirection::TOP_TO_BOTTOM,
        ];
    }

    impl ::protobuf::EnumFull for AlignDirection {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("AlignFixturesRequest.AlignDirection").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for AlignDirection {
        fn default() -> Self {
            AlignDirection::LEFT_TO_RIGHT
        }
    }

    impl AlignDirection {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AlignDirection>("AlignFixturesRequest.AlignDirection")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.MoveFixtureRequest)
pub struct MoveFixtureRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.MoveFixtureRequest.plan_id)
    pub plan_id: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.plan.MoveFixtureRequest.fixture_id)
    pub fixture_id: ::protobuf::MessageField<super::fixtures::FixtureId>,
    // @@protoc_insertion_point(field:mizer.plan.MoveFixtureRequest.x)
    pub x: i32,
    // @@protoc_insertion_point(field:mizer.plan.MoveFixtureRequest.y)
    pub y: i32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.MoveFixtureRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MoveFixtureRequest {
    fn default() -> &'a MoveFixtureRequest {
        <MoveFixtureRequest as ::protobuf::Message>::default_instance()
    }
}

impl MoveFixtureRequest {
    pub fn new() -> MoveFixtureRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plan_id",
            |m: &MoveFixtureRequest| { &m.plan_id },
            |m: &mut MoveFixtureRequest| { &mut m.plan_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::fixtures::FixtureId>(
            "fixture_id",
            |m: &MoveFixtureRequest| { &m.fixture_id },
            |m: &mut MoveFixtureRequest| { &mut m.fixture_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &MoveFixtureRequest| { &m.x },
            |m: &mut MoveFixtureRequest| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &MoveFixtureRequest| { &m.y },
            |m: &mut MoveFixtureRequest| { &mut m.y },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MoveFixtureRequest>(
            "MoveFixtureRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MoveFixtureRequest {
    const NAME: &'static str = "MoveFixtureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plan_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.fixture_id)?;
                },
                24 => {
                    self.x = is.read_int32()?;
                },
                32 => {
                    self.y = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.plan_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.plan_id);
        }
        if let Some(v) = self.fixture_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.y);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.plan_id.is_empty() {
            os.write_string(1, &self.plan_id)?;
        }
        if let Some(v) = self.fixture_id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.x != 0 {
            os.write_int32(3, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(4, self.y)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MoveFixtureRequest {
        MoveFixtureRequest::new()
    }

    fn clear(&mut self) {
        self.plan_id.clear();
        self.fixture_id.clear();
        self.x = 0;
        self.y = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MoveFixtureRequest {
        static instance: MoveFixtureRequest = MoveFixtureRequest {
            plan_id: ::std::string::String::new(),
            fixture_id: ::protobuf::MessageField::none(),
            x: 0,
            y: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MoveFixtureRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MoveFixtureRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MoveFixtureRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveFixtureRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.Plans)
pub struct Plans {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.Plans.plans)
    pub plans: ::std::vec::Vec<Plan>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.Plans.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Plans {
    fn default() -> &'a Plans {
        <Plans as ::protobuf::Message>::default_instance()
    }
}

impl Plans {
    pub fn new() -> Plans {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "plans",
            |m: &Plans| { &m.plans },
            |m: &mut Plans| { &mut m.plans },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Plans>(
            "Plans",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Plans {
    const NAME: &'static str = "Plans";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.plans.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.plans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.plans {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Plans {
        Plans::new()
    }

    fn clear(&mut self) {
        self.plans.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Plans {
        static instance: Plans = Plans {
            plans: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Plans {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Plans").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Plans {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plans {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.Plan)
pub struct Plan {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.Plan.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:mizer.plan.Plan.positions)
    pub positions: ::std::vec::Vec<FixturePosition>,
    // @@protoc_insertion_point(field:mizer.plan.Plan.screens)
    pub screens: ::std::vec::Vec<PlanScreen>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.Plan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Plan {
    fn default() -> &'a Plan {
        <Plan as ::protobuf::Message>::default_instance()
    }
}

impl Plan {
    pub fn new() -> Plan {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Plan| { &m.name },
            |m: &mut Plan| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "positions",
            |m: &Plan| { &m.positions },
            |m: &mut Plan| { &mut m.positions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "screens",
            |m: &Plan| { &m.screens },
            |m: &mut Plan| { &mut m.screens },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Plan>(
            "Plan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Plan {
    const NAME: &'static str = "Plan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.positions.push(is.read_message()?);
                },
                26 => {
                    self.screens.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.positions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.screens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.positions {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.screens {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Plan {
        Plan::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.positions.clear();
        self.screens.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Plan {
        static instance: Plan = Plan {
            name: ::std::string::String::new(),
            positions: ::std::vec::Vec::new(),
            screens: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Plan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Plan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Plan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.FixturePosition)
pub struct FixturePosition {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.FixturePosition.id)
    pub id: ::protobuf::MessageField<super::fixtures::FixtureId>,
    // @@protoc_insertion_point(field:mizer.plan.FixturePosition.x)
    pub x: i32,
    // @@protoc_insertion_point(field:mizer.plan.FixturePosition.y)
    pub y: i32,
    // @@protoc_insertion_point(field:mizer.plan.FixturePosition.width)
    pub width: u32,
    // @@protoc_insertion_point(field:mizer.plan.FixturePosition.height)
    pub height: u32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.FixturePosition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FixturePosition {
    fn default() -> &'a FixturePosition {
        <FixturePosition as ::protobuf::Message>::default_instance()
    }
}

impl FixturePosition {
    pub fn new() -> FixturePosition {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::fixtures::FixtureId>(
            "id",
            |m: &FixturePosition| { &m.id },
            |m: &mut FixturePosition| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &FixturePosition| { &m.x },
            |m: &mut FixturePosition| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &FixturePosition| { &m.y },
            |m: &mut FixturePosition| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &FixturePosition| { &m.width },
            |m: &mut FixturePosition| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &FixturePosition| { &m.height },
            |m: &mut FixturePosition| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FixturePosition>(
            "FixturePosition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FixturePosition {
    const NAME: &'static str = "FixturePosition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                16 => {
                    self.x = is.read_int32()?;
                },
                24 => {
                    self.y = is.read_int32()?;
                },
                32 => {
                    self.width = is.read_uint32()?;
                },
                40 => {
                    self.height = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.y);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.x != 0 {
            os.write_int32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(3, self.y)?;
        }
        if self.width != 0 {
            os.write_uint32(4, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(5, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FixturePosition {
        FixturePosition::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.x = 0;
        self.y = 0;
        self.width = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FixturePosition {
        static instance: FixturePosition = FixturePosition {
            id: ::protobuf::MessageField::none(),
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FixturePosition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FixturePosition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FixturePosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FixturePosition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.plan.PlanScreen)
pub struct PlanScreen {
    // message fields
    // @@protoc_insertion_point(field:mizer.plan.PlanScreen.id)
    pub id: u32,
    // @@protoc_insertion_point(field:mizer.plan.PlanScreen.x)
    pub x: i32,
    // @@protoc_insertion_point(field:mizer.plan.PlanScreen.y)
    pub y: i32,
    // @@protoc_insertion_point(field:mizer.plan.PlanScreen.width)
    pub width: u32,
    // @@protoc_insertion_point(field:mizer.plan.PlanScreen.height)
    pub height: u32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.plan.PlanScreen.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlanScreen {
    fn default() -> &'a PlanScreen {
        <PlanScreen as ::protobuf::Message>::default_instance()
    }
}

impl PlanScreen {
    pub fn new() -> PlanScreen {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PlanScreen| { &m.id },
            |m: &mut PlanScreen| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &PlanScreen| { &m.x },
            |m: &mut PlanScreen| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &PlanScreen| { &m.y },
            |m: &mut PlanScreen| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &PlanScreen| { &m.width },
            |m: &mut PlanScreen| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &PlanScreen| { &m.height },
            |m: &mut PlanScreen| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlanScreen>(
            "PlanScreen",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlanScreen {
    const NAME: &'static str = "PlanScreen";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.x = is.read_int32()?;
                },
                24 => {
                    self.y = is.read_int32()?;
                },
                32 => {
                    self.width = is.read_uint32()?;
                },
                40 => {
                    self.height = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.x);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.y);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.x != 0 {
            os.write_int32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(3, self.y)?;
        }
        if self.width != 0 {
            os.write_uint32(4, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(5, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlanScreen {
        PlanScreen::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.x = 0;
        self.y = 0;
        self.width = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlanScreen {
        static instance: PlanScreen = PlanScreen {
            id: 0,
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlanScreen {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlanScreen").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlanScreen {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlanScreen {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bplans.proto\x12\nmizer.plan\x1a\x0efixtures.proto\"\x0e\n\x0cPlans\
    Request\"$\n\x0eAddPlanRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04\
    name\"#\n\x11RemovePlanRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \"7\n\x11RenamePlanRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"J\n\x13MoveFixturesRequest\
    \x12\x17\n\x07plan_id\x18\x01\x20\x01(\tR\x06planId\x12\x0c\n\x01x\x18\
    \x02\x20\x01(\x05R\x01x\x12\x0c\n\x01y\x18\x03\x20\x01(\x05R\x01y\"\x86\
    \x02\n\x14AlignFixturesRequest\x12\x17\n\x07plan_id\x18\x01\x20\x01(\tR\
    \x06planId\x12M\n\tdirection\x18\x02\x20\x01(\x0e2/.mizer.plan.AlignFixt\
    uresRequest.AlignDirectionR\tdirection\x12\x16\n\x06groups\x18\x03\x20\
    \x01(\rR\x06groups\x12\x17\n\x07row_gap\x18\x04\x20\x01(\rR\x06rowGap\
    \x12\x1d\n\ncolumn_gap\x18\x05\x20\x01(\rR\tcolumnGap\"6\n\x0eAlignDirec\
    tion\x12\x11\n\rLEFT_TO_RIGHT\x10\0\x12\x11\n\rTOP_TO_BOTTOM\x10\x01\"\
    \x83\x01\n\x12MoveFixtureRequest\x12\x17\n\x07plan_id\x18\x01\x20\x01(\t\
    R\x06planId\x128\n\nfixture_id\x18\x02\x20\x01(\x0b2\x19.mizer.fixtures.\
    FixtureIdR\tfixtureId\x12\x0c\n\x01x\x18\x03\x20\x01(\x05R\x01x\x12\x0c\
    \n\x01y\x18\x04\x20\x01(\x05R\x01y\"/\n\x05Plans\x12&\n\x05plans\x18\x01\
    \x20\x03(\x0b2\x10.mizer.plan.PlanR\x05plans\"\x87\x01\n\x04Plan\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x129\n\tpositions\x18\x02\x20\x03\
    (\x0b2\x1b.mizer.plan.FixturePositionR\tpositions\x120\n\x07screens\x18\
    \x03\x20\x03(\x0b2\x16.mizer.plan.PlanScreenR\x07screens\"\x86\x01\n\x0f\
    FixturePosition\x12)\n\x02id\x18\x01\x20\x01(\x0b2\x19.mizer.fixtures.Fi\
    xtureIdR\x02id\x12\x0c\n\x01x\x18\x02\x20\x01(\x05R\x01x\x12\x0c\n\x01y\
    \x18\x03\x20\x01(\x05R\x01y\x12\x14\n\x05width\x18\x04\x20\x01(\rR\x05wi\
    dth\x12\x16\n\x06height\x18\x05\x20\x01(\rR\x06height\"f\n\nPlanScreen\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x0c\n\x01x\x18\x02\x20\
    \x01(\x05R\x01x\x12\x0c\n\x01y\x18\x03\x20\x01(\x05R\x01y\x12\x14\n\x05w\
    idth\x18\x04\x20\x01(\rR\x05width\x12\x16\n\x06height\x18\x05\x20\x01(\r\
    R\x06height2\xc9\x03\n\x08PlansApi\x127\n\x08GetPlans\x12\x18.mizer.plan\
    .PlansRequest\x1a\x11.mizer.plan.Plans\x128\n\x07AddPlan\x12\x1a.mizer.p\
    lan.AddPlanRequest\x1a\x11.mizer.plan.Plans\x12>\n\nRemovePlan\x12\x1d.m\
    izer.plan.RemovePlanRequest\x1a\x11.mizer.plan.Plans\x12>\n\nRenamePlan\
    \x12\x1d.mizer.plan.RenamePlanRequest\x1a\x11.mizer.plan.Plans\x12B\n\
    \x0cMoveFixtures\x12\x1f.mizer.plan.MoveFixturesRequest\x1a\x11.mizer.pl\
    an.Plans\x12@\n\x0bMoveFixture\x12\x1e.mizer.plan.MoveFixtureRequest\x1a\
    \x11.mizer.plan.Plans\x12D\n\rAlignFixtures\x12\x20.mizer.plan.AlignFixt\
    uresRequest\x1a\x11.mizer.plan.Plansb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::fixtures::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(PlansRequest::generated_message_descriptor_data());
            messages.push(AddPlanRequest::generated_message_descriptor_data());
            messages.push(RemovePlanRequest::generated_message_descriptor_data());
            messages.push(RenamePlanRequest::generated_message_descriptor_data());
            messages.push(MoveFixturesRequest::generated_message_descriptor_data());
            messages.push(AlignFixturesRequest::generated_message_descriptor_data());
            messages.push(MoveFixtureRequest::generated_message_descriptor_data());
            messages.push(Plans::generated_message_descriptor_data());
            messages.push(Plan::generated_message_descriptor_data());
            messages.push(FixturePosition::generated_message_descriptor_data());
            messages.push(PlanScreen::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(align_fixtures_request::AlignDirection::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
