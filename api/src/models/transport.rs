// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `transport.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.SubscribeTransportRequest)
pub struct SubscribeTransportRequest {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.SubscribeTransportRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscribeTransportRequest {
    fn default() -> &'a SubscribeTransportRequest {
        <SubscribeTransportRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeTransportRequest {
    pub fn new() -> SubscribeTransportRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscribeTransportRequest>(
            "SubscribeTransportRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscribeTransportRequest {
    const NAME: &'static str = "SubscribeTransportRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscribeTransportRequest {
        SubscribeTransportRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscribeTransportRequest {
        static instance: SubscribeTransportRequest = SubscribeTransportRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscribeTransportRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscribeTransportRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscribeTransportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeTransportRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.Transport)
pub struct Transport {
    // message fields
    // @@protoc_insertion_point(field:mizer.Transport.state)
    pub state: ::protobuf::EnumOrUnknown<TransportState>,
    // @@protoc_insertion_point(field:mizer.Transport.speed)
    pub speed: f64,
    // @@protoc_insertion_point(field:mizer.Transport.timecode)
    pub timecode: ::protobuf::MessageField<Timecode>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.Transport.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transport {
    fn default() -> &'a Transport {
        <Transport as ::protobuf::Message>::default_instance()
    }
}

impl Transport {
    pub fn new() -> Transport {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &Transport| { &m.state },
            |m: &mut Transport| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed",
            |m: &Transport| { &m.speed },
            |m: &mut Transport| { &mut m.speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Timecode>(
            "timecode",
            |m: &Transport| { &m.timecode },
            |m: &mut Transport| { &mut m.timecode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transport>(
            "Transport",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transport {
    const NAME: &'static str = "Transport";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.speed = is.read_double()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timecode)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(TransportState::STOPPED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        if self.speed != 0. {
            my_size += 1 + 8;
        }
        if let Some(v) = self.timecode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(TransportState::STOPPED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.speed != 0. {
            os.write_double(2, self.speed)?;
        }
        if let Some(v) = self.timecode.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transport {
        Transport::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(TransportState::STOPPED);
        self.speed = 0.;
        self.timecode.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transport {
        static instance: Transport = Transport {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            speed: 0.,
            timecode: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transport {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transport").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transport {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.Timecode)
pub struct Timecode {
    // message fields
    // @@protoc_insertion_point(field:mizer.Timecode.frames)
    pub frames: u64,
    // @@protoc_insertion_point(field:mizer.Timecode.seconds)
    pub seconds: u64,
    // @@protoc_insertion_point(field:mizer.Timecode.minutes)
    pub minutes: u64,
    // @@protoc_insertion_point(field:mizer.Timecode.hours)
    pub hours: u64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.Timecode.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Timecode {
    fn default() -> &'a Timecode {
        <Timecode as ::protobuf::Message>::default_instance()
    }
}

impl Timecode {
    pub fn new() -> Timecode {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "frames",
            |m: &Timecode| { &m.frames },
            |m: &mut Timecode| { &mut m.frames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seconds",
            |m: &Timecode| { &m.seconds },
            |m: &mut Timecode| { &mut m.seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minutes",
            |m: &Timecode| { &m.minutes },
            |m: &mut Timecode| { &mut m.minutes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hours",
            |m: &Timecode| { &m.hours },
            |m: &mut Timecode| { &mut m.hours },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Timecode>(
            "Timecode",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Timecode {
    const NAME: &'static str = "Timecode";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.frames = is.read_uint64()?;
                },
                16 => {
                    self.seconds = is.read_uint64()?;
                },
                24 => {
                    self.minutes = is.read_uint64()?;
                },
                32 => {
                    self.hours = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.frames != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.frames);
        }
        if self.seconds != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.seconds);
        }
        if self.minutes != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.minutes);
        }
        if self.hours != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.hours);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.frames != 0 {
            os.write_uint64(1, self.frames)?;
        }
        if self.seconds != 0 {
            os.write_uint64(2, self.seconds)?;
        }
        if self.minutes != 0 {
            os.write_uint64(3, self.minutes)?;
        }
        if self.hours != 0 {
            os.write_uint64(4, self.hours)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Timecode {
        Timecode::new()
    }

    fn clear(&mut self) {
        self.frames = 0;
        self.seconds = 0;
        self.minutes = 0;
        self.hours = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Timecode {
        static instance: Timecode = Timecode {
            frames: 0,
            seconds: 0,
            minutes: 0,
            hours: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Timecode {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Timecode").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Timecode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Timecode {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.SetTransportRequest)
pub struct SetTransportRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.SetTransportRequest.state)
    pub state: ::protobuf::EnumOrUnknown<TransportState>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.SetTransportRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetTransportRequest {
    fn default() -> &'a SetTransportRequest {
        <SetTransportRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetTransportRequest {
    pub fn new() -> SetTransportRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &SetTransportRequest| { &m.state },
            |m: &mut SetTransportRequest| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetTransportRequest>(
            "SetTransportRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetTransportRequest {
    const NAME: &'static str = "SetTransportRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(TransportState::STOPPED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(TransportState::STOPPED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetTransportRequest {
        SetTransportRequest::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(TransportState::STOPPED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetTransportRequest {
        static instance: SetTransportRequest = SetTransportRequest {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetTransportRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetTransportRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetTransportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetTransportRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.SetBpmRequest)
pub struct SetBpmRequest {
    // message fields
    // @@protoc_insertion_point(field:mizer.SetBpmRequest.bpm)
    pub bpm: f64,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.SetBpmRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetBpmRequest {
    fn default() -> &'a SetBpmRequest {
        <SetBpmRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetBpmRequest {
    pub fn new() -> SetBpmRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bpm",
            |m: &SetBpmRequest| { &m.bpm },
            |m: &mut SetBpmRequest| { &mut m.bpm },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetBpmRequest>(
            "SetBpmRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetBpmRequest {
    const NAME: &'static str = "SetBpmRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.bpm = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.bpm != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.bpm != 0. {
            os.write_double(1, self.bpm)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetBpmRequest {
        SetBpmRequest::new()
    }

    fn clear(&mut self) {
        self.bpm = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetBpmRequest {
        static instance: SetBpmRequest = SetBpmRequest {
            bpm: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetBpmRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetBpmRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetBpmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetBpmRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:mizer.TransportState)
pub enum TransportState {
    // @@protoc_insertion_point(enum_value:mizer.TransportState.STOPPED)
    STOPPED = 0,
    // @@protoc_insertion_point(enum_value:mizer.TransportState.PAUSED)
    PAUSED = 1,
    // @@protoc_insertion_point(enum_value:mizer.TransportState.PLAYING)
    PLAYING = 2,
}

impl ::protobuf::Enum for TransportState {
    const NAME: &'static str = "TransportState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransportState> {
        match value {
            0 => ::std::option::Option::Some(TransportState::STOPPED),
            1 => ::std::option::Option::Some(TransportState::PAUSED),
            2 => ::std::option::Option::Some(TransportState::PLAYING),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TransportState] = &[
        TransportState::STOPPED,
        TransportState::PAUSED,
        TransportState::PLAYING,
    ];
}

impl ::protobuf::EnumFull for TransportState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TransportState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TransportState {
    fn default() -> Self {
        TransportState::STOPPED
    }
}

impl TransportState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TransportState>("TransportState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftransport.proto\x12\x05mizer\"\x1b\n\x19SubscribeTransportRequest\
    \"{\n\tTransport\x12+\n\x05state\x18\x01\x20\x01(\x0e2\x15.mizer.Transpo\
    rtStateR\x05state\x12\x14\n\x05speed\x18\x02\x20\x01(\x01R\x05speed\x12+\
    \n\x08timecode\x18\x03\x20\x01(\x0b2\x0f.mizer.TimecodeR\x08timecode\"l\
    \n\x08Timecode\x12\x16\n\x06frames\x18\x01\x20\x01(\x04R\x06frames\x12\
    \x18\n\x07seconds\x18\x02\x20\x01(\x04R\x07seconds\x12\x18\n\x07minutes\
    \x18\x03\x20\x01(\x04R\x07minutes\x12\x14\n\x05hours\x18\x04\x20\x01(\
    \x04R\x05hours\"B\n\x13SetTransportRequest\x12+\n\x05state\x18\x01\x20\
    \x01(\x0e2\x15.mizer.TransportStateR\x05state\"!\n\rSetBpmRequest\x12\
    \x10\n\x03bpm\x18\x01\x20\x01(\x01R\x03bpm*6\n\x0eTransportState\x12\x0b\
    \n\x07STOPPED\x10\0\x12\n\n\x06PAUSED\x10\x01\x12\x0b\n\x07PLAYING\x10\
    \x022\xc4\x01\n\x0cTransportApi\x12H\n\x12SubscribeTransport\x12\x20.miz\
    er.SubscribeTransportRequest\x1a\x10.mizer.Transport\x128\n\x08SetState\
    \x12\x1a.mizer.SetTransportRequest\x1a\x10.mizer.Transport\x120\n\x06Set\
    Bpm\x12\x14.mizer.SetBpmRequest\x1a\x10.mizer.Transportb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(SubscribeTransportRequest::generated_message_descriptor_data());
            messages.push(Transport::generated_message_descriptor_data());
            messages.push(Timecode::generated_message_descriptor_data());
            messages.push(SetTransportRequest::generated_message_descriptor_data());
            messages.push(SetBpmRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TransportState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
