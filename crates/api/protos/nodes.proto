syntax = "proto3";

package mizer.nodes;

import "media.proto";

message AddNodeRequest {
  string type = 1;
  NodePosition position = 2;
  optional string parent = 3;
}

message DuplicateNodeRequest {
  string path = 1;
  optional string parent = 2;
}

message DisconnectPortRequest {
  string path = 1;
  string port = 2;
}

message WriteControl {
  string path = 1;
  string port = 2;
  double value = 3;
}

message UpdateNodeSettingRequest {
  string path = 1;
  NodeSetting setting = 2;
}

message MoveNodeRequest {
  string path = 1;
  NodePosition position = 2;
}

message ShowNodeRequest {
  string path = 1;
  NodePosition position = 2;
  optional string parent = 3;
}

message RenameNodeRequest {
  string path = 1;
  string new_name = 2;
}

message GroupNodesRequest {
  repeated string nodes = 1;
  optional string parent = 2;
}

message DeleteNodeRequest {
  string path = 1;
}

message HideNodeRequest {
  string path = 1;
}

message Nodes {
  repeated Node nodes = 1;
  repeated NodeConnection channels = 2;
  // Flat list of all nodes
  repeated Node all_nodes = 3;
}

message AvailableNodes {
  repeated AvailableNode nodes = 1;
}

message AvailableNode {
  string type = 1;
  string name = 2;
  NodeCategory category = 3;
  string description = 4;
}

message NodeConnection {
  string target_node = 1;
  Port target_port = 2;
  string source_node = 3;
  Port source_port = 4;
  ChannelProtocol protocol = 5;
}

message Node {
  enum NodePreviewType {
    NONE = 0;
    HISTORY = 1;
    WAVEFORM = 2;
    MULTIPLE = 3;
    TEXTURE = 4;
    TIMECODE = 5;
    DATA = 6;
    COLOR = 7;
  }

  string type = 1;
  string path = 2;
  repeated Port inputs = 3;
  repeated Port outputs = 4;
  NodeDesigner designer = 5;
  NodePreviewType preview = 6;
  NodeConfig config = 7;
  repeated NodeSetting settings = 8;
  NodeDetails details = 9;
}

message NodeDetails {
  string node_type_name = 1;
  string display_name = 2;
  bool has_custom_name = 3;
  NodeCategory category = 4;
}

enum NodeCategory {
  NODE_CATEGORY_NONE = 0;
  NODE_CATEGORY_STANDARD = 1;
  NODE_CATEGORY_CONNECTIONS = 2;
  NODE_CATEGORY_CONVERSIONS = 3;
  NODE_CATEGORY_CONTROLS = 4;
  NODE_CATEGORY_DATA = 5;
  NODE_CATEGORY_COLOR = 6;
  NODE_CATEGORY_AUDIO = 7;
  NODE_CATEGORY_VIDEO = 8;
  NODE_CATEGORY_LASER = 9;
  NODE_CATEGORY_PIXEL = 10;
  NODE_CATEGORY_VECTOR = 11;
}

message NodeConfig {
  oneof type {
    ContainerNodeConfig container_config = 45;
  }
}

message NodeSetting {
  string label = 1;
  string description = 2;
  bool disabled = 3;

  oneof value {
    TextValue text = 4;
    FloatValue float = 5;
    IntValue int = 6;
    BoolValue bool = 7;
    SelectValue select = 8;
    EnumValue enum = 9;
    IdValue id = 10;
    SplineValue spline = 11;
    MediaValue media = 12;
    UintValue uint = 13;
    StepSequencerValue step_sequencer = 14;
  }

  message TextValue {
    string value = 1;
    bool multiline = 2;
  }

  message FloatValue {
    double value = 1;
    optional double min = 2;
    optional double min_hint = 3;
    optional double max = 4;
    optional double max_hint = 5;
  }

  message IntValue {
    int32 value = 1;
    optional int32 min = 2;
    optional int32 min_hint = 3;
    optional int32 max = 4;
    optional int32 max_hint = 5;
  }

  message UintValue {
    uint32 value = 1;
    optional uint32 min = 2;
    optional uint32 min_hint = 3;
    optional uint32 max = 4;
    optional uint32 max_hint = 5;
  }

  message BoolValue {
    bool value = 1;
  }

  message SelectValue {
    string value = 1;
    repeated SelectVariant variants = 2;
  }

  message SelectVariant {
    oneof variant {
      SelectGroup group = 1;
      SelectItem item = 2;
    }

    message SelectGroup {
      string label = 1;
      repeated SelectVariant items = 2;
    }

    message SelectItem {
      string value = 1;
      string label = 2;
    }
  }

  message EnumValue {
    uint32 value = 1;
    repeated EnumVariant variants = 2;
  }

  message EnumVariant {
    uint32 value = 1;
    string label = 2;
  }

  message IdValue {
    uint32 value = 1;
    repeated IdVariant variants = 2;
  }

  message IdVariant {
    uint32 value = 1;
    string label = 2;
  }

  message SplineValue {
    repeated SplineStep steps = 1;

    message SplineStep {
      double x = 1;
      double y = 2;
      double c0a = 3;
      double c0b = 4;
      double c1a = 5;
      double c1b = 6;
    }
  }

  message MediaValue {
    string value = 1;
    repeated mizer.media.MediaType allowed_types = 2;
  }

  message StepSequencerValue {
    repeated bool steps = 1;
  }
}

message MidiNodeConfig {
  string device = 1;
  oneof binding {
    NoteBinding note_binding = 2;
    ControlBinding control_binding = 3;
  }

  message NoteBinding {
    uint32 channel = 1;
    MidiType type = 2;
    uint32 port = 3;
    uint32 range_from = 4;
    uint32 range_to = 5;

    enum MidiType {
      CC = 0;
      NOTE = 1;
    }
  }

  message ControlBinding {
    string page = 1;
    string control = 2;
  }
}

message ContainerNodeConfig {
  repeated Node nodes = 1;
}

message NodePosition {
  double x = 1;
  double y = 2;
}

message NodeDesigner {
  NodePosition position = 1;
  double scale = 2;
  bool hidden = 3;
}

enum ChannelProtocol {
  SINGLE = 0;
  MULTI = 1;
  TEXTURE = 2;
  VECTOR = 3;
  LASER = 4;
  POLY = 5;
  DATA = 6;
  MATERIAL = 7;
  COLOR = 9;
  CLOCK = 10;
}

message Port {
  string name = 1;
  ChannelProtocol protocol = 2;
  bool multiple = 3;
}
