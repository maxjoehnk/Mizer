// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `mappings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.MappingRequest)
pub struct MappingRequest {
    // message oneof groups
    pub binding: ::std::option::Option<mapping_request::Binding>,
    pub action: ::std::option::Option<mapping_request::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.MappingRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MappingRequest {
    fn default() -> &'a MappingRequest {
        <MappingRequest as ::protobuf::Message>::default_instance()
    }
}

impl MappingRequest {
    pub fn new() -> MappingRequest {
        ::std::default::Default::default()
    }

    // .mizer.mappings.MidiMapping midi = 1;

    pub fn midi(&self) -> &MidiMapping {
        match self.binding {
            ::std::option::Option::Some(mapping_request::Binding::Midi(ref v)) => v,
            _ => <MidiMapping as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_midi(&mut self) {
        self.binding = ::std::option::Option::None;
    }

    pub fn has_midi(&self) -> bool {
        match self.binding {
            ::std::option::Option::Some(mapping_request::Binding::Midi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_midi(&mut self, v: MidiMapping) {
        self.binding = ::std::option::Option::Some(mapping_request::Binding::Midi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_midi(&mut self) -> &mut MidiMapping {
        if let ::std::option::Option::Some(mapping_request::Binding::Midi(_)) = self.binding {
        } else {
            self.binding = ::std::option::Option::Some(mapping_request::Binding::Midi(MidiMapping::new()));
        }
        match self.binding {
            ::std::option::Option::Some(mapping_request::Binding::Midi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_midi(&mut self) -> MidiMapping {
        if self.has_midi() {
            match self.binding.take() {
                ::std::option::Option::Some(mapping_request::Binding::Midi(v)) => v,
                _ => panic!(),
            }
        } else {
            MidiMapping::new()
        }
    }

    // .mizer.mappings.SequencerGoAction sequencer_go = 10;

    pub fn sequencer_go(&self) -> &SequencerGoAction {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerGo(ref v)) => v,
            _ => <SequencerGoAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sequencer_go(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_sequencer_go(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerGo(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sequencer_go(&mut self, v: SequencerGoAction) {
        self.action = ::std::option::Option::Some(mapping_request::Action::SequencerGo(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sequencer_go(&mut self) -> &mut SequencerGoAction {
        if let ::std::option::Option::Some(mapping_request::Action::SequencerGo(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(mapping_request::Action::SequencerGo(SequencerGoAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerGo(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sequencer_go(&mut self) -> SequencerGoAction {
        if self.has_sequencer_go() {
            match self.action.take() {
                ::std::option::Option::Some(mapping_request::Action::SequencerGo(v)) => v,
                _ => panic!(),
            }
        } else {
            SequencerGoAction::new()
        }
    }

    // .mizer.mappings.SequencerStopAction sequencer_stop = 11;

    pub fn sequencer_stop(&self) -> &SequencerStopAction {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerStop(ref v)) => v,
            _ => <SequencerStopAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sequencer_stop(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_sequencer_stop(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerStop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sequencer_stop(&mut self, v: SequencerStopAction) {
        self.action = ::std::option::Option::Some(mapping_request::Action::SequencerStop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sequencer_stop(&mut self) -> &mut SequencerStopAction {
        if let ::std::option::Option::Some(mapping_request::Action::SequencerStop(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(mapping_request::Action::SequencerStop(SequencerStopAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::SequencerStop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sequencer_stop(&mut self) -> SequencerStopAction {
        if self.has_sequencer_stop() {
            match self.action.take() {
                ::std::option::Option::Some(mapping_request::Action::SequencerStop(v)) => v,
                _ => panic!(),
            }
        } else {
            SequencerStopAction::new()
        }
    }

    // .mizer.mappings.LayoutControlAction layout_control = 12;

    pub fn layout_control(&self) -> &LayoutControlAction {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::LayoutControl(ref v)) => v,
            _ => <LayoutControlAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_layout_control(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_layout_control(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::LayoutControl(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_layout_control(&mut self, v: LayoutControlAction) {
        self.action = ::std::option::Option::Some(mapping_request::Action::LayoutControl(v))
    }

    // Mutable pointer to the field.
    pub fn mut_layout_control(&mut self) -> &mut LayoutControlAction {
        if let ::std::option::Option::Some(mapping_request::Action::LayoutControl(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(mapping_request::Action::LayoutControl(LayoutControlAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::LayoutControl(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_layout_control(&mut self) -> LayoutControlAction {
        if self.has_layout_control() {
            match self.action.take() {
                ::std::option::Option::Some(mapping_request::Action::LayoutControl(v)) => v,
                _ => panic!(),
            }
        } else {
            LayoutControlAction::new()
        }
    }

    // .mizer.mappings.ProgrammerHighlightAction programmer_highlight = 13;

    pub fn programmer_highlight(&self) -> &ProgrammerHighlightAction {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(ref v)) => v,
            _ => <ProgrammerHighlightAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_programmer_highlight(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_programmer_highlight(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_programmer_highlight(&mut self, v: ProgrammerHighlightAction) {
        self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(v))
    }

    // Mutable pointer to the field.
    pub fn mut_programmer_highlight(&mut self) -> &mut ProgrammerHighlightAction {
        if let ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(ProgrammerHighlightAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_programmer_highlight(&mut self) -> ProgrammerHighlightAction {
        if self.has_programmer_highlight() {
            match self.action.take() {
                ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgrammerHighlightAction::new()
        }
    }

    // .mizer.mappings.ProgrammerClearAction programmer_clear = 14;

    pub fn programmer_clear(&self) -> &ProgrammerClearAction {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(ref v)) => v,
            _ => <ProgrammerClearAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_programmer_clear(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_programmer_clear(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_programmer_clear(&mut self, v: ProgrammerClearAction) {
        self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(v))
    }

    // Mutable pointer to the field.
    pub fn mut_programmer_clear(&mut self) -> &mut ProgrammerClearAction {
        if let ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(ProgrammerClearAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_programmer_clear(&mut self) -> ProgrammerClearAction {
        if self.has_programmer_clear() {
            match self.action.take() {
                ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(v)) => v,
                _ => panic!(),
            }
        } else {
            ProgrammerClearAction::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MidiMapping>(
            "midi",
            MappingRequest::has_midi,
            MappingRequest::midi,
            MappingRequest::mut_midi,
            MappingRequest::set_midi,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SequencerGoAction>(
            "sequencer_go",
            MappingRequest::has_sequencer_go,
            MappingRequest::sequencer_go,
            MappingRequest::mut_sequencer_go,
            MappingRequest::set_sequencer_go,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SequencerStopAction>(
            "sequencer_stop",
            MappingRequest::has_sequencer_stop,
            MappingRequest::sequencer_stop,
            MappingRequest::mut_sequencer_stop,
            MappingRequest::set_sequencer_stop,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LayoutControlAction>(
            "layout_control",
            MappingRequest::has_layout_control,
            MappingRequest::layout_control,
            MappingRequest::mut_layout_control,
            MappingRequest::set_layout_control,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProgrammerHighlightAction>(
            "programmer_highlight",
            MappingRequest::has_programmer_highlight,
            MappingRequest::programmer_highlight,
            MappingRequest::mut_programmer_highlight,
            MappingRequest::set_programmer_highlight,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ProgrammerClearAction>(
            "programmer_clear",
            MappingRequest::has_programmer_clear,
            MappingRequest::programmer_clear,
            MappingRequest::mut_programmer_clear,
            MappingRequest::set_programmer_clear,
        ));
        oneofs.push(mapping_request::Binding::generated_oneof_descriptor_data());
        oneofs.push(mapping_request::Action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MappingRequest>(
            "MappingRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MappingRequest {
    const NAME: &'static str = "MappingRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.binding = ::std::option::Option::Some(mapping_request::Binding::Midi(is.read_message()?));
                },
                82 => {
                    self.action = ::std::option::Option::Some(mapping_request::Action::SequencerGo(is.read_message()?));
                },
                90 => {
                    self.action = ::std::option::Option::Some(mapping_request::Action::SequencerStop(is.read_message()?));
                },
                98 => {
                    self.action = ::std::option::Option::Some(mapping_request::Action::LayoutControl(is.read_message()?));
                },
                106 => {
                    self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerHighlight(is.read_message()?));
                },
                114 => {
                    self.action = ::std::option::Option::Some(mapping_request::Action::ProgrammerClear(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.binding {
            match v {
                &mapping_request::Binding::Midi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &mapping_request::Action::SequencerGo(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mapping_request::Action::SequencerStop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mapping_request::Action::LayoutControl(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mapping_request::Action::ProgrammerHighlight(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &mapping_request::Action::ProgrammerClear(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.binding {
            match v {
                &mapping_request::Binding::Midi(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &mapping_request::Action::SequencerGo(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &mapping_request::Action::SequencerStop(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &mapping_request::Action::LayoutControl(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &mapping_request::Action::ProgrammerHighlight(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &mapping_request::Action::ProgrammerClear(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MappingRequest {
        MappingRequest::new()
    }

    fn clear(&mut self) {
        self.binding = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MappingRequest {
        static instance: MappingRequest = MappingRequest {
            binding: ::std::option::Option::None,
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MappingRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MappingRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MappingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MappingRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MappingRequest`
pub mod mapping_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:mizer.mappings.MappingRequest.binding)
    pub enum Binding {
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.midi)
        Midi(super::MidiMapping),
    }

    impl ::protobuf::Oneof for Binding {
    }

    impl ::protobuf::OneofFull for Binding {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MappingRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("binding").unwrap()).clone()
        }
    }

    impl Binding {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Binding>("binding")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:mizer.mappings.MappingRequest.action)
    pub enum Action {
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.sequencer_go)
        SequencerGo(super::SequencerGoAction),
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.sequencer_stop)
        SequencerStop(super::SequencerStopAction),
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.layout_control)
        LayoutControl(super::LayoutControlAction),
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.programmer_highlight)
        ProgrammerHighlight(super::ProgrammerHighlightAction),
        // @@protoc_insertion_point(oneof_field:mizer.mappings.MappingRequest.programmer_clear)
        ProgrammerClear(super::ProgrammerClearAction),
    }

    impl ::protobuf::Oneof for Action {
    }

    impl ::protobuf::OneofFull for Action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MappingRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("action").unwrap()).clone()
        }
    }

    impl Action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Action>("action")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.MidiMapping)
pub struct MidiMapping {
    // message fields
    // @@protoc_insertion_point(field:mizer.mappings.MidiMapping.config)
    pub config: ::protobuf::MessageField<super::nodes::MidiNodeConfig>,
    // @@protoc_insertion_point(field:mizer.mappings.MidiMapping.input_mapping)
    pub input_mapping: bool,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.MidiMapping.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MidiMapping {
    fn default() -> &'a MidiMapping {
        <MidiMapping as ::protobuf::Message>::default_instance()
    }
}

impl MidiMapping {
    pub fn new() -> MidiMapping {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::nodes::MidiNodeConfig>(
            "config",
            |m: &MidiMapping| { &m.config },
            |m: &mut MidiMapping| { &mut m.config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input_mapping",
            |m: &MidiMapping| { &m.input_mapping },
            |m: &mut MidiMapping| { &mut m.input_mapping },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MidiMapping>(
            "MidiMapping",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MidiMapping {
    const NAME: &'static str = "MidiMapping";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.config)?;
                },
                16 => {
                    self.input_mapping = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.input_mapping != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.config.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.input_mapping != false {
            os.write_bool(2, self.input_mapping)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MidiMapping {
        MidiMapping::new()
    }

    fn clear(&mut self) {
        self.config.clear();
        self.input_mapping = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MidiMapping {
        static instance: MidiMapping = MidiMapping {
            config: ::protobuf::MessageField::none(),
            input_mapping: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MidiMapping {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MidiMapping").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MidiMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MidiMapping {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.SequencerGoAction)
pub struct SequencerGoAction {
    // message fields
    // @@protoc_insertion_point(field:mizer.mappings.SequencerGoAction.sequencer_id)
    pub sequencer_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.SequencerGoAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SequencerGoAction {
    fn default() -> &'a SequencerGoAction {
        <SequencerGoAction as ::protobuf::Message>::default_instance()
    }
}

impl SequencerGoAction {
    pub fn new() -> SequencerGoAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequencer_id",
            |m: &SequencerGoAction| { &m.sequencer_id },
            |m: &mut SequencerGoAction| { &mut m.sequencer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SequencerGoAction>(
            "SequencerGoAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SequencerGoAction {
    const NAME: &'static str = "SequencerGoAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequencer_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequencer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.sequencer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequencer_id != 0 {
            os.write_uint32(1, self.sequencer_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SequencerGoAction {
        SequencerGoAction::new()
    }

    fn clear(&mut self) {
        self.sequencer_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SequencerGoAction {
        static instance: SequencerGoAction = SequencerGoAction {
            sequencer_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SequencerGoAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SequencerGoAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SequencerGoAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequencerGoAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.SequencerStopAction)
pub struct SequencerStopAction {
    // message fields
    // @@protoc_insertion_point(field:mizer.mappings.SequencerStopAction.sequencer_id)
    pub sequencer_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.SequencerStopAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SequencerStopAction {
    fn default() -> &'a SequencerStopAction {
        <SequencerStopAction as ::protobuf::Message>::default_instance()
    }
}

impl SequencerStopAction {
    pub fn new() -> SequencerStopAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sequencer_id",
            |m: &SequencerStopAction| { &m.sequencer_id },
            |m: &mut SequencerStopAction| { &mut m.sequencer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SequencerStopAction>(
            "SequencerStopAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SequencerStopAction {
    const NAME: &'static str = "SequencerStopAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sequencer_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sequencer_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.sequencer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sequencer_id != 0 {
            os.write_uint32(1, self.sequencer_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SequencerStopAction {
        SequencerStopAction::new()
    }

    fn clear(&mut self) {
        self.sequencer_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SequencerStopAction {
        static instance: SequencerStopAction = SequencerStopAction {
            sequencer_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SequencerStopAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SequencerStopAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SequencerStopAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SequencerStopAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.LayoutControlAction)
pub struct LayoutControlAction {
    // message fields
    // @@protoc_insertion_point(field:mizer.mappings.LayoutControlAction.control_node)
    pub control_node: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.LayoutControlAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LayoutControlAction {
    fn default() -> &'a LayoutControlAction {
        <LayoutControlAction as ::protobuf::Message>::default_instance()
    }
}

impl LayoutControlAction {
    pub fn new() -> LayoutControlAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control_node",
            |m: &LayoutControlAction| { &m.control_node },
            |m: &mut LayoutControlAction| { &mut m.control_node },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LayoutControlAction>(
            "LayoutControlAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LayoutControlAction {
    const NAME: &'static str = "LayoutControlAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.control_node = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.control_node.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.control_node);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.control_node.is_empty() {
            os.write_string(1, &self.control_node)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LayoutControlAction {
        LayoutControlAction::new()
    }

    fn clear(&mut self) {
        self.control_node.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LayoutControlAction {
        static instance: LayoutControlAction = LayoutControlAction {
            control_node: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LayoutControlAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LayoutControlAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LayoutControlAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LayoutControlAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.ProgrammerHighlightAction)
pub struct ProgrammerHighlightAction {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.ProgrammerHighlightAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProgrammerHighlightAction {
    fn default() -> &'a ProgrammerHighlightAction {
        <ProgrammerHighlightAction as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerHighlightAction {
    pub fn new() -> ProgrammerHighlightAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProgrammerHighlightAction>(
            "ProgrammerHighlightAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProgrammerHighlightAction {
    const NAME: &'static str = "ProgrammerHighlightAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProgrammerHighlightAction {
        ProgrammerHighlightAction::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProgrammerHighlightAction {
        static instance: ProgrammerHighlightAction = ProgrammerHighlightAction {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProgrammerHighlightAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProgrammerHighlightAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProgrammerHighlightAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerHighlightAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:mizer.mappings.ProgrammerClearAction)
pub struct ProgrammerClearAction {
    // special fields
    // @@protoc_insertion_point(special_field:mizer.mappings.ProgrammerClearAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProgrammerClearAction {
    fn default() -> &'a ProgrammerClearAction {
        <ProgrammerClearAction as ::protobuf::Message>::default_instance()
    }
}

impl ProgrammerClearAction {
    pub fn new() -> ProgrammerClearAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProgrammerClearAction>(
            "ProgrammerClearAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProgrammerClearAction {
    const NAME: &'static str = "ProgrammerClearAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProgrammerClearAction {
        ProgrammerClearAction::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProgrammerClearAction {
        static instance: ProgrammerClearAction = ProgrammerClearAction {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProgrammerClearAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProgrammerClearAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProgrammerClearAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgrammerClearAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emappings.proto\x12\x0emizer.mappings\x1a\x0bnodes.proto\"\xf0\x03\
    \n\x0eMappingRequest\x121\n\x04midi\x18\x01\x20\x01(\x0b2\x1b.mizer.mapp\
    ings.MidiMappingH\0R\x04midi\x12F\n\x0csequencer_go\x18\n\x20\x01(\x0b2!\
    .mizer.mappings.SequencerGoActionH\x01R\x0bsequencerGo\x12L\n\x0esequenc\
    er_stop\x18\x0b\x20\x01(\x0b2#.mizer.mappings.SequencerStopActionH\x01R\
    \rsequencerStop\x12L\n\x0elayout_control\x18\x0c\x20\x01(\x0b2#.mizer.ma\
    ppings.LayoutControlActionH\x01R\rlayoutControl\x12^\n\x14programmer_hig\
    hlight\x18\r\x20\x01(\x0b2).mizer.mappings.ProgrammerHighlightActionH\
    \x01R\x13programmerHighlight\x12R\n\x10programmer_clear\x18\x0e\x20\x01(\
    \x0b2%.mizer.mappings.ProgrammerClearActionH\x01R\x0fprogrammerClearB\t\
    \n\x07bindingB\x08\n\x06action\"g\n\x0bMidiMapping\x123\n\x06config\x18\
    \x01\x20\x01(\x0b2\x1b.mizer.nodes.MidiNodeConfigR\x06config\x12#\n\rinp\
    ut_mapping\x18\x02\x20\x01(\x08R\x0cinputMapping\"6\n\x11SequencerGoActi\
    on\x12!\n\x0csequencer_id\x18\x01\x20\x01(\rR\x0bsequencerId\"8\n\x13Seq\
    uencerStopAction\x12!\n\x0csequencer_id\x18\x01\x20\x01(\rR\x0bsequencer\
    Id\"8\n\x13LayoutControlAction\x12!\n\x0ccontrol_node\x18\x01\x20\x01(\t\
    R\x0bcontrolNode\"\x1b\n\x19ProgrammerHighlightAction\"\x17\n\x15Program\
    merClearActionb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::nodes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(MappingRequest::generated_message_descriptor_data());
            messages.push(MidiMapping::generated_message_descriptor_data());
            messages.push(SequencerGoAction::generated_message_descriptor_data());
            messages.push(SequencerStopAction::generated_message_descriptor_data());
            messages.push(LayoutControlAction::generated_message_descriptor_data());
            messages.push(ProgrammerHighlightAction::generated_message_descriptor_data());
            messages.push(ProgrammerClearAction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
